// Package rootly provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.1 DO NOT EDIT.
package rootly

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Bearer_authScopes = "bearer_auth.Scopes"
)

// Defines values for AlertSource.
const (
	AlertSourceNobl9 AlertSource = "nobl9"

	AlertSourceOpsgenie AlertSource = "opsgenie"

	AlertSourcePagerduty AlertSource = "pagerduty"

	AlertSourceVictorops AlertSource = "victorops"
)

// Defines values for AlertListDataType.
const (
	AlertListDataTypeAlerts AlertListDataType = "alerts"
)

// Defines values for AlertResponseDataType.
const (
	AlertResponseDataTypeAlerts AlertResponseDataType = "alerts"
)

// Defines values for CauseListDataType.
const (
	CauseListDataTypeCauses CauseListDataType = "causes"
)

// Defines values for CauseResponseDataType.
const (
	CauseResponseDataTypeCauses CauseResponseDataType = "causes"
)

// Defines values for EnvironmentListDataType.
const (
	EnvironmentListDataTypeEnvironments EnvironmentListDataType = "environments"
)

// Defines values for EnvironmentResponseDataType.
const (
	EnvironmentResponseDataTypeEnvironments EnvironmentResponseDataType = "environments"
)

// Defines values for FunctionalityListDataType.
const (
	FunctionalityListDataTypeFunctionalities FunctionalityListDataType = "functionalities"
)

// Defines values for FunctionalityResponseDataType.
const (
	FunctionalityResponseDataTypeFunctionalities FunctionalityResponseDataType = "functionalities"
)

// Defines values for IncidentActionItemPriority.
const (
	IncidentActionItemPriorityHigh IncidentActionItemPriority = "high"

	IncidentActionItemPriorityLow IncidentActionItemPriority = "low"

	IncidentActionItemPriorityMedium IncidentActionItemPriority = "medium"
)

// Defines values for IncidentActionItemStatus.
const (
	IncidentActionItemStatusCancelled IncidentActionItemStatus = "cancelled"

	IncidentActionItemStatusDone IncidentActionItemStatus = "done"

	IncidentActionItemStatusInProgress IncidentActionItemStatus = "in_progress"

	IncidentActionItemStatusOpen IncidentActionItemStatus = "open"
)

// Defines values for IncidentActionItemListDataType.
const (
	IncidentActionItemListDataTypeIncidentActionItems IncidentActionItemListDataType = "incident_action_items"
)

// Defines values for IncidentActionItemResponseDataType.
const (
	IncidentActionItemResponseDataTypeIncidentActionItems IncidentActionItemResponseDataType = "incident_action_items"
)

// Defines values for IncidentEventVisibility.
const (
	IncidentEventVisibilityExternal IncidentEventVisibility = "external"

	IncidentEventVisibilityInternal IncidentEventVisibility = "internal"
)

// Defines values for IncidentEventListDataType.
const (
	IncidentEventListDataTypeIncidentEvents IncidentEventListDataType = "incident_events"
)

// Defines values for IncidentEventResponseDataType.
const (
	IncidentEventResponseDataTypeIncidentEvents IncidentEventResponseDataType = "incident_events"
)

// Defines values for IncidentListDataType.
const (
	IncidentListDataTypeIncidents IncidentListDataType = "incidents"
)

// Defines values for IncidentPostMortemStatus.
const (
	IncidentPostMortemStatusDraft IncidentPostMortemStatus = "draft"

	IncidentPostMortemStatusPublished IncidentPostMortemStatus = "published"
)

// Defines values for IncidentPostMortemResponseDataType.
const (
	IncidentPostMortemResponseDataTypeIncidentPostMortems IncidentPostMortemResponseDataType = "incident_post_mortems"
)

// Defines values for IncidentResponseDataType.
const (
	IncidentResponseDataTypeIncidents IncidentResponseDataType = "incidents"
)

// Defines values for IncidentRoleListDataType.
const (
	IncidentRoleListDataTypeIncidentRoles IncidentRoleListDataType = "incident_roles"
)

// Defines values for IncidentRoleResponseDataType.
const (
	IncidentRoleResponseDataTypeIncidentRoles IncidentRoleResponseDataType = "incident_roles"
)

// Defines values for IncidentTaskListDataType.
const (
	IncidentTaskListDataTypeIncidentTasks IncidentTaskListDataType = "incident_tasks"
)

// Defines values for IncidentTaskResponseDataType.
const (
	IncidentTaskResponseDataTypeIncidentTasks IncidentTaskResponseDataType = "incident_tasks"
)

// Defines values for IncidentTypeListDataType.
const (
	IncidentTypeListDataTypeIncidentTypes IncidentTypeListDataType = "incident_types"
)

// Defines values for IncidentTypeResponseDataType.
const (
	IncidentTypeResponseDataTypeIncidentTypes IncidentTypeResponseDataType = "incident_types"
)

// Defines values for MitigateIncidentDataType.
const (
	MitigateIncidentDataTypeIncidents MitigateIncidentDataType = "incidents"
)

// Defines values for NewAlertDataType.
const (
	NewAlertDataTypeAlerts NewAlertDataType = "alerts"
)

// Defines values for NewCauseDataType.
const (
	NewCauseDataTypeCauses NewCauseDataType = "causes"
)

// Defines values for NewEnvironmentDataType.
const (
	NewEnvironmentDataTypeEnvironments NewEnvironmentDataType = "environments"
)

// Defines values for NewFunctionalityDataType.
const (
	NewFunctionalityDataTypeFunctionalities NewFunctionalityDataType = "functionalities"
)

// Defines values for NewIncidentDataType.
const (
	NewIncidentDataTypeIncidents NewIncidentDataType = "incidents"
)

// Defines values for NewIncidentActionItemDataAttributesPriority.
const (
	NewIncidentActionItemDataAttributesPriorityHigh NewIncidentActionItemDataAttributesPriority = "high"

	NewIncidentActionItemDataAttributesPriorityLow NewIncidentActionItemDataAttributesPriority = "low"

	NewIncidentActionItemDataAttributesPriorityMedium NewIncidentActionItemDataAttributesPriority = "medium"
)

// Defines values for NewIncidentActionItemDataAttributesStatus.
const (
	NewIncidentActionItemDataAttributesStatusCancelled NewIncidentActionItemDataAttributesStatus = "cancelled"

	NewIncidentActionItemDataAttributesStatusDone NewIncidentActionItemDataAttributesStatus = "done"

	NewIncidentActionItemDataAttributesStatusInProgress NewIncidentActionItemDataAttributesStatus = "in_progress"

	NewIncidentActionItemDataAttributesStatusOpen NewIncidentActionItemDataAttributesStatus = "open"
)

// Defines values for NewIncidentActionItemDataType.
const (
	NewIncidentActionItemDataTypeIncidentActionItems NewIncidentActionItemDataType = "incident_action_items"
)

// Defines values for NewIncidentEventDataAttributesVisibility.
const (
	NewIncidentEventDataAttributesVisibilityExternal NewIncidentEventDataAttributesVisibility = "external"

	NewIncidentEventDataAttributesVisibilityInternal NewIncidentEventDataAttributesVisibility = "internal"
)

// Defines values for NewIncidentEventDataType.
const (
	NewIncidentEventDataTypeIncidentEvents NewIncidentEventDataType = "incident_events"
)

// Defines values for NewIncidentRoleDataType.
const (
	NewIncidentRoleDataTypeIncidentRoles NewIncidentRoleDataType = "incident_roles"
)

// Defines values for NewIncidentTaskDataType.
const (
	NewIncidentTaskDataTypeIncidentTasks NewIncidentTaskDataType = "incident_tasks"
)

// Defines values for NewIncidentTypeDataType.
const (
	NewIncidentTypeDataTypeIncidentTypes NewIncidentTypeDataType = "incident_types"
)

// Defines values for NewPlaybookDataType.
const (
	NewPlaybookDataTypePlaybooks NewPlaybookDataType = "playbooks"
)

// Defines values for NewPlaybookTaskDataType.
const (
	NewPlaybookTaskDataTypePlaybookTasks NewPlaybookTaskDataType = "playbook_tasks"
)

// Defines values for NewPostMortemTemplateDataType.
const (
	NewPostMortemTemplateDataTypePostMortemTemplates NewPostMortemTemplateDataType = "post_mortem_templates"
)

// Defines values for NewPulseDataType.
const (
	NewPulseDataTypePulses NewPulseDataType = "pulses"
)

// Defines values for NewServiceDataType.
const (
	NewServiceDataTypeServices NewServiceDataType = "services"
)

// Defines values for NewSeverityDataAttributesSeverity.
const (
	NewSeverityDataAttributesSeverityCritical NewSeverityDataAttributesSeverity = "critical"

	NewSeverityDataAttributesSeverityHigh NewSeverityDataAttributesSeverity = "high"

	NewSeverityDataAttributesSeverityLow NewSeverityDataAttributesSeverity = "low"

	NewSeverityDataAttributesSeverityMedium NewSeverityDataAttributesSeverity = "medium"
)

// Defines values for NewSeverityDataType.
const (
	NewSeverityDataTypeSeverities NewSeverityDataType = "severities"
)

// Defines values for NewStatusPageDataAttributesShowUptimeLastDays.
const (
	NewStatusPageDataAttributesShowUptimeLastDaysN0 NewStatusPageDataAttributesShowUptimeLastDays = 30

	NewStatusPageDataAttributesShowUptimeLastDaysN01 NewStatusPageDataAttributesShowUptimeLastDays = 60

	NewStatusPageDataAttributesShowUptimeLastDaysN02 NewStatusPageDataAttributesShowUptimeLastDays = 90
)

// Defines values for NewStatusPageDataType.
const (
	NewStatusPageDataTypeStatusPages NewStatusPageDataType = "status_pages"
)

// Defines values for NewTeamDataType.
const (
	NewTeamDataTypeGroups NewTeamDataType = "groups"
)

// Defines values for PlaybookListDataType.
const (
	PlaybookListDataTypePlaybooks PlaybookListDataType = "playbooks"
)

// Defines values for PlaybookResponseDataType.
const (
	PlaybookResponseDataTypePlaybooks PlaybookResponseDataType = "playbooks"
)

// Defines values for PlaybookTaskListDataType.
const (
	PlaybookTaskListDataTypePlaybookTasks PlaybookTaskListDataType = "playbook_tasks"
)

// Defines values for PlaybookTaskResponseDataType.
const (
	PlaybookTaskResponseDataTypePlaybookTasks PlaybookTaskResponseDataType = "playbook_tasks"
)

// Defines values for PostMortemTemplateListDataType.
const (
	PostMortemTemplateListDataTypePostMortemTemplates PostMortemTemplateListDataType = "post_mortem_templates"
)

// Defines values for PostMortemTemplateResponseDataType.
const (
	PostMortemTemplateResponseDataTypePostMortemTemplates PostMortemTemplateResponseDataType = "post_mortem_templates"
)

// Defines values for PulseListDataType.
const (
	PulseListDataTypePulses PulseListDataType = "pulses"
)

// Defines values for PulseResponseDataType.
const (
	PulseResponseDataTypePulses PulseResponseDataType = "pulses"
)

// Defines values for ResolveIncidentDataType.
const (
	ResolveIncidentDataTypeIncidents ResolveIncidentDataType = "incidents"
)

// Defines values for ServiceListDataType.
const (
	ServiceListDataTypeServices ServiceListDataType = "services"
)

// Defines values for ServiceResponseDataType.
const (
	ServiceResponseDataTypeServices ServiceResponseDataType = "services"
)

// Defines values for SeveritySeverity.
const (
	SeveritySeverityCritical SeveritySeverity = "critical"

	SeveritySeverityHigh SeveritySeverity = "high"

	SeveritySeverityLow SeveritySeverity = "low"

	SeveritySeverityMedium SeveritySeverity = "medium"
)

// Defines values for SeverityListDataType.
const (
	SeverityListDataTypeSeverities SeverityListDataType = "severities"
)

// Defines values for SeverityResponseDataType.
const (
	SeverityResponseDataTypeSeverities SeverityResponseDataType = "severities"
)

// Defines values for StatusPageShowUptimeLastDays.
const (
	StatusPageShowUptimeLastDaysN0 StatusPageShowUptimeLastDays = 30

	StatusPageShowUptimeLastDaysN01 StatusPageShowUptimeLastDays = 60

	StatusPageShowUptimeLastDaysN02 StatusPageShowUptimeLastDays = 90
)

// Defines values for StatusPageListDataType.
const (
	StatusPageListDataTypeStatusPages StatusPageListDataType = "status_pages"
)

// Defines values for StatusPageResponseDataType.
const (
	StatusPageResponseDataTypeStatusPages StatusPageResponseDataType = "status_pages"
)

// Defines values for TeamListDataType.
const (
	TeamListDataTypeGroups TeamListDataType = "groups"
)

// Defines values for TeamResponseDataType.
const (
	TeamResponseDataTypeGroups TeamResponseDataType = "groups"
)

// Defines values for UpdateCauseDataType.
const (
	UpdateCauseDataTypeCauses UpdateCauseDataType = "causes"
)

// Defines values for UpdateEnvironmentDataType.
const (
	UpdateEnvironmentDataTypeEnvironments UpdateEnvironmentDataType = "environments"
)

// Defines values for UpdateFunctionalityDataType.
const (
	UpdateFunctionalityDataTypeFunctionalities UpdateFunctionalityDataType = "functionalities"
)

// Defines values for UpdateIncidentDataType.
const (
	UpdateIncidentDataTypeIncidents UpdateIncidentDataType = "incidents"
)

// Defines values for UpdateIncidentActionItemDataAttributesPriority.
const (
	UpdateIncidentActionItemDataAttributesPriorityHigh UpdateIncidentActionItemDataAttributesPriority = "high"

	UpdateIncidentActionItemDataAttributesPriorityLow UpdateIncidentActionItemDataAttributesPriority = "low"

	UpdateIncidentActionItemDataAttributesPriorityMedium UpdateIncidentActionItemDataAttributesPriority = "medium"
)

// Defines values for UpdateIncidentActionItemDataAttributesStatus.
const (
	UpdateIncidentActionItemDataAttributesStatusCancelled UpdateIncidentActionItemDataAttributesStatus = "cancelled"

	UpdateIncidentActionItemDataAttributesStatusDone UpdateIncidentActionItemDataAttributesStatus = "done"

	UpdateIncidentActionItemDataAttributesStatusInProgress UpdateIncidentActionItemDataAttributesStatus = "in_progress"

	UpdateIncidentActionItemDataAttributesStatusOpen UpdateIncidentActionItemDataAttributesStatus = "open"
)

// Defines values for UpdateIncidentActionItemDataType.
const (
	UpdateIncidentActionItemDataTypeIncidentActionItems UpdateIncidentActionItemDataType = "incident_action_items"
)

// Defines values for UpdateIncidentEventDataAttributesVisibility.
const (
	UpdateIncidentEventDataAttributesVisibilityExternal UpdateIncidentEventDataAttributesVisibility = "external"

	UpdateIncidentEventDataAttributesVisibilityInternal UpdateIncidentEventDataAttributesVisibility = "internal"
)

// Defines values for UpdateIncidentEventDataType.
const (
	UpdateIncidentEventDataTypeIncidentEvents UpdateIncidentEventDataType = "incident_events"
)

// Defines values for UpdateIncidentPostMortemDataAttributesStatus.
const (
	UpdateIncidentPostMortemDataAttributesStatusDraft UpdateIncidentPostMortemDataAttributesStatus = "draft"

	UpdateIncidentPostMortemDataAttributesStatusPublished UpdateIncidentPostMortemDataAttributesStatus = "published"
)

// Defines values for UpdateIncidentPostMortemDataType.
const (
	UpdateIncidentPostMortemDataTypeIncidentPostMortems UpdateIncidentPostMortemDataType = "incident_post_mortems"
)

// Defines values for UpdateIncidentRoleDataType.
const (
	UpdateIncidentRoleDataTypeIncidentRoles UpdateIncidentRoleDataType = "incident_roles"
)

// Defines values for UpdateIncidentTaskDataType.
const (
	UpdateIncidentTaskDataTypeIncidentTasks UpdateIncidentTaskDataType = "incident_tasks"
)

// Defines values for UpdateIncidentTypeDataType.
const (
	UpdateIncidentTypeDataTypeIncidentTypes UpdateIncidentTypeDataType = "incident_types"
)

// Defines values for UpdatePlaybookDataType.
const (
	UpdatePlaybookDataTypePlaybooks UpdatePlaybookDataType = "playbooks"
)

// Defines values for UpdatePlaybookTaskDataType.
const (
	UpdatePlaybookTaskDataTypePlaybookTasks UpdatePlaybookTaskDataType = "playbook_tasks"
)

// Defines values for UpdatePostMortemTemplateDataType.
const (
	UpdatePostMortemTemplateDataTypePostMortemTemplates UpdatePostMortemTemplateDataType = "post_mortem_templates"
)

// Defines values for UpdatePulseDataType.
const (
	UpdatePulseDataTypePulses UpdatePulseDataType = "pulses"
)

// Defines values for UpdateServiceDataType.
const (
	UpdateServiceDataTypeServices UpdateServiceDataType = "services"
)

// Defines values for UpdateSeverityDataAttributesSeverity.
const (
	UpdateSeverityDataAttributesSeverityCritical UpdateSeverityDataAttributesSeverity = "critical"

	UpdateSeverityDataAttributesSeverityHigh UpdateSeverityDataAttributesSeverity = "high"

	UpdateSeverityDataAttributesSeverityLow UpdateSeverityDataAttributesSeverity = "low"

	UpdateSeverityDataAttributesSeverityMedium UpdateSeverityDataAttributesSeverity = "medium"
)

// Defines values for UpdateSeverityDataType.
const (
	UpdateSeverityDataTypeSeverities UpdateSeverityDataType = "severities"
)

// Defines values for UpdateStatusPageDataAttributesShowUptimeLastDays.
const (
	UpdateStatusPageDataAttributesShowUptimeLastDaysN0 UpdateStatusPageDataAttributesShowUptimeLastDays = 30

	UpdateStatusPageDataAttributesShowUptimeLastDaysN01 UpdateStatusPageDataAttributesShowUptimeLastDays = 60

	UpdateStatusPageDataAttributesShowUptimeLastDaysN02 UpdateStatusPageDataAttributesShowUptimeLastDays = 90
)

// Defines values for UpdateStatusPageDataType.
const (
	UpdateStatusPageDataTypeStatusPages UpdateStatusPageDataType = "status_pages"
)

// Defines values for UpdateTeamDataType.
const (
	UpdateTeamDataTypeGroups UpdateTeamDataType = "groups"
)

// Alert defines model for alert.
type Alert struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Environments attached to the alert
	Environments *[]struct {
		// Embedded struct due to allOf(#/components/schemas/environment)
		Environment `yaml:",inline"`
	} `json:"environments,omitempty"`
	Labels *[]struct {

		// Key of the tag
		Key string `json:"key"`

		// Value of the tag
		Value string `json:"value"`
	} `json:"labels,omitempty"`

	// Services attached to the alert
	Services *[]struct {
		// Embedded struct due to allOf(#/components/schemas/service)
		Service `yaml:",inline"`
	} `json:"services,omitempty"`

	// The source of the alert
	Source AlertSource `json:"source"`

	// The summary of the alert
	Summary string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The source of the alert
type AlertSource string

// AlertList defines model for alert_list.
type AlertList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/alert)
			Alert `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the alert
		Id   string            `json:"id"`
		Type AlertListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// AlertListDataType defines model for AlertList.Data.Type.
type AlertListDataType string

// AlertResponse defines model for alert_response.
type AlertResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/alert)
			Alert `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the alert
		Id   string                `json:"id"`
		Type AlertResponseDataType `json:"type"`
	} `json:"data"`
}

// AlertResponseDataType defines model for AlertResponse.Data.Type.
type AlertResponseDataType string

// Cause defines model for cause.
type Cause struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the cause
	Description *string `json:"description"`

	// The name of the cause
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// CauseList defines model for cause_list.
type CauseList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/cause)
			Cause `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the cause
		Id   string            `json:"id"`
		Type CauseListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// CauseListDataType defines model for CauseList.Data.Type.
type CauseListDataType string

// CauseResponse defines model for cause_response.
type CauseResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/cause)
			Cause `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the cause
		Id   string                `json:"id"`
		Type CauseResponseDataType `json:"type"`
	} `json:"data"`
}

// CauseResponseDataType defines model for CauseResponse.Data.Type.
type CauseResponseDataType string

// Environment defines model for environment.
type Environment struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the environment
	Description *string `json:"description"`

	// The name of the environment
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// EnvironmentList defines model for environment_list.
type EnvironmentList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/environment)
			Environment `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the environment
		Id   string                  `json:"id"`
		Type EnvironmentListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// EnvironmentListDataType defines model for EnvironmentList.Data.Type.
type EnvironmentListDataType string

// EnvironmentResponse defines model for environment_response.
type EnvironmentResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/environment)
			Environment `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the environment
		Id   string                      `json:"id"`
		Type EnvironmentResponseDataType `json:"type"`
	} `json:"data"`
}

// EnvironmentResponseDataType defines model for EnvironmentResponse.Data.Type.
type EnvironmentResponseDataType string

// ErrorsList defines model for errors_list.
type ErrorsList struct {
	Errors *[]struct {
		Code   *string `json:"code"`
		Detail *string `json:"detail"`
		Status string  `json:"status"`
		Title  string  `json:"title"`
	} `json:"errors,omitempty"`
}

// Functionality defines model for functionality.
type Functionality struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the functionality
	Description *string `json:"description"`

	// The name of the functionality
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// FunctionalityList defines model for functionality_list.
type FunctionalityList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/functionality)
			Functionality `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the functionality
		Id   string                    `json:"id"`
		Type FunctionalityListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// FunctionalityListDataType defines model for FunctionalityList.Data.Type.
type FunctionalityListDataType string

// FunctionalityResponse defines model for functionality_response.
type FunctionalityResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/functionality)
			Functionality `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the functionality
		Id   string                        `json:"id"`
		Type FunctionalityResponseDataType `json:"type"`
	} `json:"data"`
}

// FunctionalityResponseDataType defines model for FunctionalityResponse.Data.Type.
type FunctionalityResponseDataType string

// Incident defines model for incident.
type Incident struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the incident
	Description *string `json:"description"`

	// The Environment ID to attach to the incident
	EnvironmentId *string `json:"environment_id"`

	// The Functionality ID's to attach to the incident
	FunctionalityIds *[]string `json:"functionality_ids"`

	// The Team ID's to attach to the incident
	GroupIds *[]string `json:"group_ids"`

	// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
	Labels *map[string]interface{} `json:"labels"`

	// The Service ID's to attach to the incident
	ServiceIds *[]string `json:"service_ids"`

	// The Severity ID to attach to the incident
	SeverityId *string `json:"severity_id"`

	// The title of the incident
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentActionItem defines model for incident_action_item.
type IncidentActionItem struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of incident action item
	Description *string `json:"description"`

	// The priority of the incident action item
	Priority *IncidentActionItemPriority `json:"priority,omitempty"`

	// The status of incident the action item
	Status *IncidentActionItemStatus `json:"status,omitempty"`

	// The summary of the incident action item
	Summary string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The priority of the incident action item
type IncidentActionItemPriority string

// The status of incident the action item
type IncidentActionItemStatus string

// IncidentActionItemList defines model for incident_action_item_list.
type IncidentActionItemList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_action_item)
			IncidentActionItem `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident action item
		Id   string                         `json:"id"`
		Type IncidentActionItemListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentActionItemListDataType defines model for IncidentActionItemList.Data.Type.
type IncidentActionItemListDataType string

// IncidentActionItemResponse defines model for incident_action_item_response.
type IncidentActionItemResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_action_item)
			IncidentActionItem `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident action item
		Id   string                             `json:"id"`
		Type IncidentActionItemResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentActionItemResponseDataType defines model for IncidentActionItemResponse.Data.Type.
type IncidentActionItemResponseDataType string

// IncidentEvent defines model for incident_event.
type IncidentEvent struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The summary of the incident event
	Event string `json:"event"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// The visibility of the incident action item
	Visibility *IncidentEventVisibility `json:"visibility,omitempty"`
}

// The visibility of the incident action item
type IncidentEventVisibility string

// IncidentEventList defines model for incident_event_list.
type IncidentEventList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_event)
			IncidentEvent `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident event
		Id   string                    `json:"id"`
		Type IncidentEventListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentEventListDataType defines model for IncidentEventList.Data.Type.
type IncidentEventListDataType string

// IncidentEventResponse defines model for incident_event_response.
type IncidentEventResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_event)
			IncidentEvent `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident event
		Id   string                        `json:"id"`
		Type IncidentEventResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentEventResponseDataType defines model for IncidentEventResponse.Data.Type.
type IncidentEventResponseDataType string

// IncidentList defines model for incident_list.
type IncidentList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident)
			Incident `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident
		Id   string               `json:"id"`
		Type IncidentListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentListDataType defines model for IncidentList.Data.Type.
type IncidentListDataType string

// IncidentPostMortem defines model for incident_post_mortem.
type IncidentPostMortem struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Date of mitigation
	MitigatedAt *string `json:"mitigated_at"`

	// Date of resolution
	ResolvedAt *string `json:"resolved_at"`

	// Show alerts attached to the incident
	ShowAlertsAttached *bool `json:"show_alerts_attached,omitempty"`

	// Show services impacted of the incident postmortem
	ShowFunctionalitiesImpacted *bool `json:"show_functionalities_impacted,omitempty"`

	// Show groups impacted of the incident postmortem
	ShowGroupsImpacted *bool `json:"show_groups_impacted,omitempty"`

	// Show functionalities impacted of the incident postmortem
	ShowServicesImpacted *bool `json:"show_services_impacted,omitempty"`

	// Show events timeline of the incident postmortem
	ShowTimeline *bool `json:"show_timeline,omitempty"`

	// Show action items in the timeline of the incident postmortem
	ShowTimelineActionItems *bool `json:"show_timeline_action_items,omitempty"`

	// Show genius events in the timeline of the incident postmortem
	ShowTimelineGenius *bool `json:"show_timeline_genius,omitempty"`

	// Show tasks in the timeline of the incident postmortem
	ShowTimelineTasks *bool `json:"show_timeline_tasks,omitempty"`

	// Show trail events in the timeline of the incident postmortem
	ShowTimelineTrail *bool `json:"show_timeline_trail,omitempty"`

	// Date of started at
	StartedAt *string `json:"started_at"`

	// The status of the incident postmortem
	Status *IncidentPostMortemStatus `json:"status,omitempty"`

	// The title of the incident postmortem
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The status of the incident postmortem
type IncidentPostMortemStatus string

// IncidentPostMortemResponse defines model for incident_post_mortem_response.
type IncidentPostMortemResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_post_mortem)
			IncidentPostMortem `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident postmortem
		Id   string                             `json:"id"`
		Type IncidentPostMortemResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentPostMortemResponseDataType defines model for IncidentPostMortemResponse.Data.Type.
type IncidentPostMortemResponseDataType string

// IncidentResponse defines model for incident_response.
type IncidentResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident)
			Incident `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident
		Id   string                   `json:"id"`
		Type IncidentResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentResponseDataType defines model for IncidentResponse.Data.Type.
type IncidentResponseDataType string

// IncidentRole defines model for incident_role.
type IncidentRole struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the incident role
	Description *string `json:"description"`

	// The name of the incident role
	Name string `json:"name"`

	// The summary of the incident role
	Summary *string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentRoleList defines model for incident_role_list.
type IncidentRoleList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_role)
			IncidentRole `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident role
		Id   string                   `json:"id"`
		Type IncidentRoleListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentRoleListDataType defines model for IncidentRoleList.Data.Type.
type IncidentRoleListDataType string

// IncidentRoleResponse defines model for incident_role_response.
type IncidentRoleResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_role)
			IncidentRole `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident role
		Id   string                       `json:"id"`
		Type IncidentRoleResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentRoleResponseDataType defines model for IncidentRoleResponse.Data.Type.
type IncidentRoleResponseDataType string

// IncidentTask defines model for incident_task.
type IncidentTask struct {
	Checked *bool `json:"checked,omitempty"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of incident task
	Description *string `json:"description"`

	// The task of the incident task
	Task string `json:"task"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentTaskList defines model for incident_task_list.
type IncidentTaskList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_task)
			IncidentTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string                   `json:"id"`
		Type IncidentTaskListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentTaskListDataType defines model for IncidentTaskList.Data.Type.
type IncidentTaskListDataType string

// IncidentTaskResponse defines model for incident_task_response.
type IncidentTaskResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_task)
			IncidentTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string                       `json:"id"`
		Type IncidentTaskResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentTaskResponseDataType defines model for IncidentTaskResponse.Data.Type.
type IncidentTaskResponseDataType string

// IncidentType defines model for incident_type.
type IncidentType struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the incident type
	Description *string `json:"description"`

	// The name of the incident type
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentTypeList defines model for incident_type_list.
type IncidentTypeList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_type)
			IncidentType `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident type
		Id   string                   `json:"id"`
		Type IncidentTypeListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentTypeListDataType defines model for IncidentTypeList.Data.Type.
type IncidentTypeListDataType string

// IncidentTypeResponse defines model for incident_type_response.
type IncidentTypeResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_type)
			IncidentType `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident type
		Id   string                       `json:"id"`
		Type IncidentTypeResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentTypeResponseDataType defines model for IncidentTypeResponse.Data.Type.
type IncidentTypeResponseDataType string

// Links defines model for links.
type Links struct {
	First string  `json:"first"`
	Last  string  `json:"last"`
	Next  *string `json:"next"`
	Prev  *string `json:"prev"`
	Self  string  `json:"self"`
}

// MitigateIncident defines model for mitigate_incident.
type MitigateIncident struct {
	Data struct {
		Attributes struct {

			// How was the incident mitigated?
			MitigationMessage *string `json:"mitigation_message"`
		} `json:"attributes"`
		Type MitigateIncidentDataType `json:"type"`
	} `json:"data"`
}

// MitigateIncidentDataType defines model for MitigateIncident.Data.Type.
type MitigateIncidentDataType string

// NewAlert defines model for new_alert.
type NewAlert struct {
	Data struct {
		Attributes struct {

			// Alert Id to attach to the incident
			AlertIds *[]string `json:"alert_ids"`
		} `json:"attributes"`
		Type NewAlertDataType `json:"type"`
	} `json:"data"`
}

// NewAlertDataType defines model for NewAlert.Data.Type.
type NewAlertDataType string

// NewCause defines model for new_cause.
type NewCause struct {
	Data struct {
		Attributes struct {

			// The description of the cause
			Description *string `json:"description"`

			// The name of the cause
			Name string `json:"name"`
		} `json:"attributes"`
		Type NewCauseDataType `json:"type"`
	} `json:"data"`
}

// NewCauseDataType defines model for NewCause.Data.Type.
type NewCauseDataType string

// NewEnvironment defines model for new_environment.
type NewEnvironment struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the environment
			Description *string `json:"description"`

			// The name of the environment
			Name string `json:"name"`
		} `json:"attributes"`
		Type NewEnvironmentDataType `json:"type"`
	} `json:"data"`
}

// NewEnvironmentDataType defines model for NewEnvironment.Data.Type.
type NewEnvironmentDataType string

// NewFunctionality defines model for new_functionality.
type NewFunctionality struct {
	Data struct {
		Attributes struct {

			// The description of the functionality
			Description *string `json:"description"`

			// The name of the functionality
			Name string `json:"name"`
		} `json:"attributes"`
		Type NewFunctionalityDataType `json:"type"`
	} `json:"data"`
}

// NewFunctionalityDataType defines model for NewFunctionality.Data.Type.
type NewFunctionalityDataType string

// NewIncident defines model for new_incident.
type NewIncident struct {
	Data struct {
		Attributes struct {

			// Create a task on Asana as well (if integration enabled)
			CreateOnAsana *bool `json:"create_on_asana"`

			// Create an story on Clubhouse as well (if integration enabled)
			CreateOnClubhouse *bool `json:"create_on_clubhouse"`

			// Create a Google meet meeting as well (if integration enabled)
			CreateOnGoogleMeet *bool `json:"create_on_google_meet"`

			// Create an issue on Jira as well (if integration enabled)
			CreateOnJira *bool `json:"create_on_jira"`

			// Create an issue on Linear as well (if integration enabled)
			CreateOnLinear *bool `json:"create_on_linear"`

			// Create a incident on Opsgenie as well  (if integration enabled)
			CreateOnOpsgenie *bool `json:"create_on_opsgenie"`

			// Create an incident on PagerDuty as well for specified PagerDuty services ids (if integration enabled)
			CreateOnPagerduty *bool `json:"create_on_pagerduty"`

			// Create an incident on ServiceNow as well (if integration enabled)
			CreateOnServiceNow *bool `json:"create_on_service_now"`

			// Create an incident on Slack as well (if integration enabled)
			CreateOnSlack *bool `json:"create_on_slack"`

			// Create a card on Trello as well (if integration enabled)
			CreateOnTrello *bool `json:"create_on_trello"`

			// Create an issue on Zendesk as well (if integration enabled)
			CreateOnZendesk *bool `json:"create_on_zendesk"`

			// Create a Zoom meeting as well (if integration enabled)
			CreateOnZoom *bool `json:"create_on_zoom"`

			// The description of the incident
			Description *string `json:"description"`

			// The Environment ID to attach to the incident
			EnvironmentId *string `json:"environment_id"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
			Labels *map[string]interface{} `json:"labels"`

			// Emails you want to notify
			NotifyEmails *[]string `json:"notify_emails"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID to attach to the incident
			SeverityId *string `json:"severity_id"`

			// The title of the incident
			Title string `json:"title"`
		} `json:"attributes"`
		Type NewIncidentDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentDataType defines model for NewIncident.Data.Type.
type NewIncidentDataType string

// NewIncidentActionItem defines model for new_incident_action_item.
type NewIncidentActionItem struct {
	Data struct {
		Attributes struct {

			// Create a Asana task as well (if integration enabled)
			CreateOnAsana *bool `json:"create_on_asana"`

			// Create a Clubhouse task as well (if integration enabled)
			CreateOnClubhouse *bool `json:"create_on_clubhouse"`

			// Create an Jira issue as well (if integration enabled)
			CreateOnJira *bool `json:"create_on_jira"`

			// Create an Linear issue as well (if integration enabled)
			CreateOnLinear *bool `json:"create_on_linear"`

			// Create a Trello task as well (if integration enabled)
			CreateOnTrello *bool `json:"create_on_trello"`

			// Create an issue on Zendesk as well (if integration enabled)
			CreateOnZendesk *bool `json:"create_on_zendesk"`

			// The description of the incident action item
			Description *string `json:"description"`

			// The priority of the incident action item
			Priority *NewIncidentActionItemDataAttributesPriority `json:"priority,omitempty"`

			// The status of incident the action item
			Status *NewIncidentActionItemDataAttributesStatus `json:"status,omitempty"`

			// The summary of the incident action item
			Summary string `json:"summary"`
		} `json:"attributes"`
		Type NewIncidentActionItemDataType `json:"type"`
	} `json:"data"`
}

// The priority of the incident action item
type NewIncidentActionItemDataAttributesPriority string

// The status of incident the action item
type NewIncidentActionItemDataAttributesStatus string

// NewIncidentActionItemDataType defines model for NewIncidentActionItem.Data.Type.
type NewIncidentActionItemDataType string

// NewIncidentEvent defines model for new_incident_event.
type NewIncidentEvent struct {
	Data struct {
		Attributes struct {

			// The summary of the incident event
			Event string `json:"event"`

			// The visibility of the incident action item
			Visibility *NewIncidentEventDataAttributesVisibility `json:"visibility,omitempty"`
		} `json:"attributes"`
		Type NewIncidentEventDataType `json:"type"`
	} `json:"data"`
}

// The visibility of the incident action item
type NewIncidentEventDataAttributesVisibility string

// NewIncidentEventDataType defines model for NewIncidentEvent.Data.Type.
type NewIncidentEventDataType string

// NewIncidentRole defines model for new_incident_role.
type NewIncidentRole struct {
	Data struct {
		Attributes struct {

			// The description of the incident role
			Description *string `json:"description"`

			// The name of the incident role
			Name string `json:"name"`

			// The summary of the incident role
			Summary *string `json:"summary"`
		} `json:"attributes"`
		Type NewIncidentRoleDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentRoleDataType defines model for NewIncidentRole.Data.Type.
type NewIncidentRoleDataType string

// NewIncidentTask defines model for new_incident_task.
type NewIncidentTask struct {
	Data struct {
		Attributes struct {
			Checked *bool `json:"checked,omitempty"`

			// The description of the incident task
			Description *string `json:"description"`

			// The task of the incident task
			Task string `json:"task"`
		} `json:"attributes"`
		Type NewIncidentTaskDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentTaskDataType defines model for NewIncidentTask.Data.Type.
type NewIncidentTaskDataType string

// NewIncidentType defines model for new_incident_type.
type NewIncidentType struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the incident type
			Description *string `json:"description"`

			// The name of the incident type
			Name string `json:"name"`
		} `json:"attributes"`
		Type NewIncidentTypeDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentTypeDataType defines model for NewIncidentType.Data.Type.
type NewIncidentTypeDataType string

// NewPlaybook defines model for new_playbook.
type NewPlaybook struct {
	Data struct {
		Attributes struct {

			// The summary of the playbook
			Summary *string `json:"summary"`

			// The title of the playbook
			Title string `json:"title"`
		} `json:"attributes"`
		Type NewPlaybookDataType `json:"type"`
	} `json:"data"`
}

// NewPlaybookDataType defines model for NewPlaybook.Data.Type.
type NewPlaybookDataType string

// NewPlaybookTask defines model for new_playbook_task.
type NewPlaybookTask struct {
	Data struct {
		Attributes struct {

			// The description of the incident task
			Description *string `json:"description"`

			// The task of the incident task
			Task string `json:"task"`
		} `json:"attributes"`
		Type NewPlaybookTaskDataType `json:"type"`
	} `json:"data"`
}

// NewPlaybookTaskDataType defines model for NewPlaybookTask.Data.Type.
type NewPlaybookTaskDataType string

// NewPostMortemTemplate defines model for new_post_mortem_template.
type NewPostMortemTemplate struct {
	Data struct {
		Attributes struct {

			// Default selected template when editing a postmortem
			Default *bool `json:"default"`

			// The name of the postmortem template
			Name string `json:"name"`
		} `json:"attributes"`
		Type NewPostMortemTemplateDataType `json:"type"`
	} `json:"data"`
}

// NewPostMortemTemplateDataType defines model for NewPostMortemTemplate.Data.Type.
type NewPostMortemTemplateDataType string

// NewPulse defines model for new_pulse.
type NewPulse struct {
	Data struct {
		Attributes struct {

			// Pulse end datetime
			EndedAt *time.Time `json:"ended_at"`

			// The Environment ID's to attach to the pulse
			EnvironmentIds *[]string `json:"environment_ids"`
			Labels         *[]struct {

				// Key of the tag
				Key string `json:"key"`

				// Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`
			Refs *[]struct {

				// Key of the ref
				Key string `json:"key"`

				// Value of the ref
				Value string `json:"value"`
			} `json:"refs,omitempty"`

			// The Service ID's to attach to the pulse
			ServiceIds *[]string `json:"service_ids"`

			// The source of the pulse (eg: k8s)
			Source *string `json:"source"`

			// Pulse start datetime
			StartedAt *time.Time `json:"started_at"`

			// The summary of the pulse
			Summary string `json:"summary"`
		} `json:"attributes"`
		Type NewPulseDataType `json:"type"`
	} `json:"data"`
}

// NewPulseDataType defines model for NewPulse.Data.Type.
type NewPulseDataType string

// NewService defines model for new_service.
type NewService struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the service
			Description *string `json:"description"`

			// The name of the service
			Name string `json:"name"`
		} `json:"attributes"`
		Type NewServiceDataType `json:"type"`
	} `json:"data"`
}

// NewServiceDataType defines model for NewService.Data.Type.
type NewServiceDataType string

// NewSeverity defines model for new_severity.
type NewSeverity struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the severity
			Description *string `json:"description"`

			// The name of the severity
			Name string `json:"name"`

			// The severity of the severity
			Severity *NewSeverityDataAttributesSeverity `json:"severity,omitempty"`
		} `json:"attributes"`
		Type NewSeverityDataType `json:"type"`
	} `json:"data"`
}

// The severity of the severity
type NewSeverityDataAttributesSeverity string

// NewSeverityDataType defines model for NewSeverity.Data.Type.
type NewSeverityDataType string

// NewStatusPage defines model for new_status_page.
type NewStatusPage struct {
	Data struct {
		Attributes struct {

			// Allow search engines to include your public status page in search results.
			AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

			// The description of the status page
			Description *string `json:"description"`

			// Enabled / Disable the status page
			Enabled *bool `json:"enabled"`

			// The color of the footer. Eg. "#1F2F41"
			FooterColor *string `json:"footer_color"`

			// The color of the header. Eg. "#0061F2"
			HeaderColor *string `json:"header_color"`

			// Make the status page accessible to the public
			Public *bool `json:"public"`

			// Show uptime
			ShowUptime *bool `json:"show_uptime"`

			// Show uptime over x days
			ShowUptimeLastDays *NewStatusPageDataAttributesShowUptimeLastDays `json:"show_uptime_last_days"`

			// The title of the status page
			Title string `json:"title"`
		} `json:"attributes"`
		Type NewStatusPageDataType `json:"type"`
	} `json:"data"`
}

// Show uptime over x days
type NewStatusPageDataAttributesShowUptimeLastDays int

// NewStatusPageDataType defines model for NewStatusPage.Data.Type.
type NewStatusPageDataType string

// NewTeam defines model for new_team.
type NewTeam struct {
	Data struct {
		Attributes struct {

			// The description of the team
			Description *string `json:"description"`

			// The name of the team
			Name string `json:"name"`
		} `json:"attributes"`
		Type NewTeamDataType `json:"type"`
	} `json:"data"`
}

// NewTeamDataType defines model for NewTeam.Data.Type.
type NewTeamDataType string

// Playbook defines model for playbook.
type Playbook struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The summary of the playbook
	Summary *string `json:"summary"`

	// The title of the playbook
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PlaybookList defines model for playbook_list.
type PlaybookList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook)
			Playbook `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the playbook
		Id   string               `json:"id"`
		Type PlaybookListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PlaybookListDataType defines model for PlaybookList.Data.Type.
type PlaybookListDataType string

// PlaybookResponse defines model for playbook_response.
type PlaybookResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook)
			Playbook `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the playbook
		Id   string                   `json:"id"`
		Type PlaybookResponseDataType `json:"type"`
	} `json:"data"`
}

// PlaybookResponseDataType defines model for PlaybookResponse.Data.Type.
type PlaybookResponseDataType string

// PlaybookTask defines model for playbook_task.
type PlaybookTask struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of incident task
	Description *string `json:"description"`

	// The task of the incident task
	Task string `json:"task"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PlaybookTaskList defines model for playbook_task_list.
type PlaybookTaskList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook_task)
			PlaybookTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string                   `json:"id"`
		Type PlaybookTaskListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PlaybookTaskListDataType defines model for PlaybookTaskList.Data.Type.
type PlaybookTaskListDataType string

// PlaybookTaskResponse defines model for playbook_task_response.
type PlaybookTaskResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook_task)
			PlaybookTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string                       `json:"id"`
		Type PlaybookTaskResponseDataType `json:"type"`
	} `json:"data"`
}

// PlaybookTaskResponseDataType defines model for PlaybookTaskResponse.Data.Type.
type PlaybookTaskResponseDataType string

// PostMortemTemplate defines model for post_mortem_template.
type PostMortemTemplate struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Default selected template when editing a postmortem
	Default *bool `json:"default"`

	// The name of the postmortem template
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PostMortemTemplateList defines model for post_mortem_template_list.
type PostMortemTemplateList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/post_mortem_template)
			PostMortemTemplate `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the post_mortem_template
		Id   string                         `json:"id"`
		Type PostMortemTemplateListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PostMortemTemplateListDataType defines model for PostMortemTemplateList.Data.Type.
type PostMortemTemplateListDataType string

// PostMortemTemplateResponse defines model for post_mortem_template_response.
type PostMortemTemplateResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/post_mortem_template)
			PostMortemTemplate `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the post_mortem_template
		Id   string                             `json:"id"`
		Type PostMortemTemplateResponseDataType `json:"type"`
	} `json:"data"`
}

// PostMortemTemplateResponseDataType defines model for PostMortemTemplateResponse.Data.Type.
type PostMortemTemplateResponseDataType string

// Pulse defines model for pulse.
type Pulse struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Environments attached to the pulse
	Environments *[]struct {
		// Embedded struct due to allOf(#/components/schemas/environment)
		Environment `yaml:",inline"`
	} `json:"environments,omitempty"`
	Labels *[]struct {

		// Key of the tag
		Key string `json:"key"`

		// Value of the tag
		Value string `json:"value"`
	} `json:"labels,omitempty"`
	Refs *[]struct {

		// Key of the ref
		Key string `json:"key"`

		// Value of the ref
		Value string `json:"value"`
	} `json:"refs,omitempty"`

	// Services attached to the pulse
	Services *[]struct {
		// Embedded struct due to allOf(#/components/schemas/service)
		Service `yaml:",inline"`
	} `json:"services,omitempty"`

	// The source of the pulse (eg: k8s)
	Source *string `json:"source"`

	// The summary of the pulse
	Summary string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PulseList defines model for pulse_list.
type PulseList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/pulse)
			Pulse `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the pulse
		Id   string            `json:"id"`
		Type PulseListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PulseListDataType defines model for PulseList.Data.Type.
type PulseListDataType string

// PulseResponse defines model for pulse_response.
type PulseResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/pulse)
			Pulse `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the pulse
		Id   string                `json:"id"`
		Type PulseResponseDataType `json:"type"`
	} `json:"data"`
}

// PulseResponseDataType defines model for PulseResponse.Data.Type.
type PulseResponseDataType string

// ResolveIncident defines model for resolve_incident.
type ResolveIncident struct {
	Data struct {
		Attributes struct {

			// How was the incident resolved?
			ResolutionMessage *string `json:"resolution_message"`
		} `json:"attributes"`
		Type ResolveIncidentDataType `json:"type"`
	} `json:"data"`
}

// ResolveIncidentDataType defines model for ResolveIncident.Data.Type.
type ResolveIncidentDataType string

// Service defines model for service.
type Service struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the service
	Description *string `json:"description"`

	// The name of the service
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// ServiceList defines model for service_list.
type ServiceList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/service)
			Service `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the service
		Id   string              `json:"id"`
		Type ServiceListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// ServiceListDataType defines model for ServiceList.Data.Type.
type ServiceListDataType string

// ServiceResponse defines model for service_response.
type ServiceResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/service)
			Service `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the service
		Id   string                  `json:"id"`
		Type ServiceResponseDataType `json:"type"`
	} `json:"data"`
}

// ServiceResponseDataType defines model for ServiceResponse.Data.Type.
type ServiceResponseDataType string

// Severity defines model for severity.
type Severity struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the severity
	Description *string `json:"description"`

	// The name of the severity
	Name string `json:"name"`

	// The severity of the severity
	Severity *SeveritySeverity `json:"severity,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The severity of the severity
type SeveritySeverity string

// SeverityList defines model for severity_list.
type SeverityList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/severity)
			Severity `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the severity
		Id   string               `json:"id"`
		Type SeverityListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// SeverityListDataType defines model for SeverityList.Data.Type.
type SeverityListDataType string

// SeverityResponse defines model for severity_response.
type SeverityResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/severity)
			Severity `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the severity
		Id   string                   `json:"id"`
		Type SeverityResponseDataType `json:"type"`
	} `json:"data"`
}

// SeverityResponseDataType defines model for SeverityResponse.Data.Type.
type SeverityResponseDataType string

// StatusPage defines model for status_page.
type StatusPage struct {

	// Allow search engines to include your public status page in search results.
	AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the status page
	Description *string `json:"description"`

	// Enabled / Disable the status page
	Enabled *bool `json:"enabled"`

	// The color of the footer. Eg. "#1F2F41"
	FooterColor *string `json:"footer_color"`

	// The color of the header. Eg. "#0061F2"
	HeaderColor *string `json:"header_color"`

	// Make the status page accessible to the public
	Public *bool `json:"public"`

	// Show uptime
	ShowUptime *bool `json:"show_uptime"`

	// Show uptime over x days
	ShowUptimeLastDays *StatusPageShowUptimeLastDays `json:"show_uptime_last_days"`

	// The title of the status page
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// Show uptime over x days
type StatusPageShowUptimeLastDays int

// StatusPageList defines model for status_page_list.
type StatusPageList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/status_page)
			StatusPage `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the status page
		Id   string                 `json:"id"`
		Type StatusPageListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// StatusPageListDataType defines model for StatusPageList.Data.Type.
type StatusPageListDataType string

// StatusPageResponse defines model for status_page_response.
type StatusPageResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/status_page)
			StatusPage `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the status page
		Id   string                     `json:"id"`
		Type StatusPageResponseDataType `json:"type"`
	} `json:"data"`
}

// StatusPageResponseDataType defines model for StatusPageResponse.Data.Type.
type StatusPageResponseDataType string

// Team defines model for team.
type Team struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the team
	Description *string `json:"description"`

	// The name of the team
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// TeamList defines model for team_list.
type TeamList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/team)
			Team `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the team
		Id   string           `json:"id"`
		Type TeamListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// TeamListDataType defines model for TeamList.Data.Type.
type TeamListDataType string

// TeamResponse defines model for team_response.
type TeamResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/team)
			Team `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the team
		Id   string               `json:"id"`
		Type TeamResponseDataType `json:"type"`
	} `json:"data"`
}

// TeamResponseDataType defines model for TeamResponse.Data.Type.
type TeamResponseDataType string

// UpdateCause defines model for update_cause.
type UpdateCause struct {
	Data struct {
		Attributes struct {

			// The description of the cause
			Description *string `json:"description"`

			// The name of the cause
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type UpdateCauseDataType `json:"type"`
	} `json:"data"`
}

// UpdateCauseDataType defines model for UpdateCause.Data.Type.
type UpdateCauseDataType string

// UpdateEnvironment defines model for update_environment.
type UpdateEnvironment struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the environment
			Description *string `json:"description"`

			// The name of the environment
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type UpdateEnvironmentDataType `json:"type"`
	} `json:"data"`
}

// UpdateEnvironmentDataType defines model for UpdateEnvironment.Data.Type.
type UpdateEnvironmentDataType string

// UpdateFunctionality defines model for update_functionality.
type UpdateFunctionality struct {
	Data struct {
		Attributes struct {

			// The description of the functionality
			Description *string `json:"description"`

			// The name of the functionality
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type UpdateFunctionalityDataType `json:"type"`
	} `json:"data"`
}

// UpdateFunctionalityDataType defines model for UpdateFunctionality.Data.Type.
type UpdateFunctionalityDataType string

// UpdateIncident defines model for update_incident.
type UpdateIncident struct {
	Data struct {
		Attributes struct {

			// The description of the incident
			Description *string `json:"description"`

			// The Environment ID to attach to the incident
			EnvironmentId *string `json:"environment_id"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
			Labels *map[string]interface{} `json:"labels"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID to attach to the incident
			SeverityId *string `json:"severity_id"`

			// The title of the incident
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentDataType defines model for UpdateIncident.Data.Type.
type UpdateIncidentDataType string

// UpdateIncidentActionItem defines model for update_incident_action_item.
type UpdateIncidentActionItem struct {
	Data struct {
		Attributes struct {

			// The description of the incident action item
			Description *string `json:"description"`

			// The priority of the incident action item
			Priority *UpdateIncidentActionItemDataAttributesPriority `json:"priority,omitempty"`

			// The status of incident the action item
			Status *UpdateIncidentActionItemDataAttributesStatus `json:"status,omitempty"`

			// The summary of the incident action item
			Summary *string `json:"summary,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentActionItemDataType `json:"type"`
	} `json:"data"`
}

// The priority of the incident action item
type UpdateIncidentActionItemDataAttributesPriority string

// The status of incident the action item
type UpdateIncidentActionItemDataAttributesStatus string

// UpdateIncidentActionItemDataType defines model for UpdateIncidentActionItem.Data.Type.
type UpdateIncidentActionItemDataType string

// UpdateIncidentEvent defines model for update_incident_event.
type UpdateIncidentEvent struct {
	Data struct {
		Attributes struct {

			// The summary of the incident event
			Event *string `json:"event,omitempty"`

			// The visibility of the incident action item
			Visibility *UpdateIncidentEventDataAttributesVisibility `json:"visibility,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentEventDataType `json:"type"`
	} `json:"data"`
}

// The visibility of the incident action item
type UpdateIncidentEventDataAttributesVisibility string

// UpdateIncidentEventDataType defines model for UpdateIncidentEvent.Data.Type.
type UpdateIncidentEventDataType string

// UpdateIncidentPostMortem defines model for update_incident_post_mortem.
type UpdateIncidentPostMortem struct {
	Data struct {
		Attributes struct {

			// The Cause ID's to attach to the incident postmortem
			CauseIds *[]string `json:"cause_ids"`

			// Date of mitigation
			MitigatedAt *string `json:"mitigated_at"`

			// Date of resolution
			ResolvedAt *string `json:"resolved_at"`

			// Show alerts attached to the incident
			ShowAlertsAttached *bool `json:"show_alerts_attached,omitempty"`

			// Show services impacted of the incident postmortem
			ShowFunctionalitiesImpacted *bool `json:"show_functionalities_impacted,omitempty"`

			// Show groups impacted of the incident postmortem
			ShowGroupsImpacted *bool `json:"show_groups_impacted,omitempty"`

			// Show functionalities impacted of the incident postmortem
			ShowServicesImpacted *bool `json:"show_services_impacted,omitempty"`

			// Show events timeline of the incident postmortem
			ShowTimeline *bool `json:"show_timeline,omitempty"`

			// Show action items in the timeline of the incident postmortem
			ShowTimelineActionItems *bool `json:"show_timeline_action_items,omitempty"`

			// Show genius events in the timeline of the incident postmortem
			ShowTimelineGenius *bool `json:"show_timeline_genius,omitempty"`

			// Show tasks in the timeline of the incident postmortem
			ShowTimelineTasks *bool `json:"show_timeline_tasks,omitempty"`

			// Show trail events in the timeline of the incident postmortem
			ShowTimelineTrail *bool `json:"show_timeline_trail,omitempty"`

			// Date of started at
			StartedAt *string `json:"started_at"`

			// The status of the incident postmortem
			Status *UpdateIncidentPostMortemDataAttributesStatus `json:"status,omitempty"`

			// The title of the incident postmortem
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentPostMortemDataType `json:"type"`
	} `json:"data"`
}

// The status of the incident postmortem
type UpdateIncidentPostMortemDataAttributesStatus string

// UpdateIncidentPostMortemDataType defines model for UpdateIncidentPostMortem.Data.Type.
type UpdateIncidentPostMortemDataType string

// UpdateIncidentRole defines model for update_incident_role.
type UpdateIncidentRole struct {
	Data struct {
		Attributes struct {

			// The description of the incident role
			Description *string `json:"description"`

			// The name of the incident role
			Name *string `json:"name,omitempty"`

			// The summary of the incident role
			Summary *string `json:"summary"`
		} `json:"attributes"`
		Type UpdateIncidentRoleDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentRoleDataType defines model for UpdateIncidentRole.Data.Type.
type UpdateIncidentRoleDataType string

// UpdateIncidentTask defines model for update_incident_task.
type UpdateIncidentTask struct {
	Data struct {
		Attributes struct {
			Checked *bool `json:"checked,omitempty"`

			// The description of the incident task
			Description *string `json:"description"`

			// The task of the incident task
			Task *string `json:"task,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentTaskDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentTaskDataType defines model for UpdateIncidentTask.Data.Type.
type UpdateIncidentTaskDataType string

// UpdateIncidentType defines model for update_incident_type.
type UpdateIncidentType struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the incident type
			Description *string `json:"description"`

			// The name of the incident type
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentTypeDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentTypeDataType defines model for UpdateIncidentType.Data.Type.
type UpdateIncidentTypeDataType string

// UpdatePlaybook defines model for update_playbook.
type UpdatePlaybook struct {
	Data struct {
		Attributes struct {

			// The summary of the playbook
			Summary *string `json:"summary"`

			// The title of the playbook
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type UpdatePlaybookDataType `json:"type"`
	} `json:"data"`
}

// UpdatePlaybookDataType defines model for UpdatePlaybook.Data.Type.
type UpdatePlaybookDataType string

// UpdatePlaybookTask defines model for update_playbook_task.
type UpdatePlaybookTask struct {
	Data struct {
		Attributes struct {

			// The description of the incident task
			Description *string `json:"description"`

			// The task of the incident task
			Task *string `json:"task,omitempty"`
		} `json:"attributes"`
		Type UpdatePlaybookTaskDataType `json:"type"`
	} `json:"data"`
}

// UpdatePlaybookTaskDataType defines model for UpdatePlaybookTask.Data.Type.
type UpdatePlaybookTaskDataType string

// UpdatePostMortemTemplate defines model for update_post_mortem_template.
type UpdatePostMortemTemplate struct {
	Data struct {
		Attributes struct {

			// Default selected template when editing a postmortem
			Default *bool `json:"default"`

			// The name of the postmortem template
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type UpdatePostMortemTemplateDataType `json:"type"`
	} `json:"data"`
}

// UpdatePostMortemTemplateDataType defines model for UpdatePostMortemTemplate.Data.Type.
type UpdatePostMortemTemplateDataType string

// UpdatePulse defines model for update_pulse.
type UpdatePulse struct {
	Data struct {
		Attributes struct {

			// Pulse end datetime
			EndedAt *time.Time `json:"ended_at"`

			// The Environment ID's to attach to the pulse
			EnvironmentIds *[]string `json:"environment_ids"`
			Labels         *[]struct {

				// Key of the tag
				Key string `json:"key"`

				// Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`
			Refs *[]struct {

				// Key of the ref
				Key string `json:"key"`

				// Value of the ref
				Value string `json:"value"`
			} `json:"refs,omitempty"`

			// The Service ID's to attach to the pulse
			ServiceIds *[]string `json:"service_ids"`

			// The source of the pulse (eg: k8s)
			Source *string `json:"source"`

			// Pulse start datetime
			StartedAt *time.Time `json:"started_at"`

			// The summary of the pulse
			Summary *string `json:"summary,omitempty"`
		} `json:"attributes"`
		Type *UpdatePulseDataType `json:"type,omitempty"`
	} `json:"data"`
}

// UpdatePulseDataType defines model for UpdatePulse.Data.Type.
type UpdatePulseDataType string

// UpdateService defines model for update_service.
type UpdateService struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the service
			Description *string `json:"description"`

			// The name of the service
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type UpdateServiceDataType `json:"type"`
	} `json:"data"`
}

// UpdateServiceDataType defines model for UpdateService.Data.Type.
type UpdateServiceDataType string

// UpdateSeverity defines model for update_severity.
type UpdateSeverity struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the severity
			Description *string `json:"description"`

			// The name of the severity
			Name *string `json:"name,omitempty"`

			// The severity of the severity
			Severity *UpdateSeverityDataAttributesSeverity `json:"severity,omitempty"`
		} `json:"attributes"`
		Type UpdateSeverityDataType `json:"type"`
	} `json:"data"`
}

// The severity of the severity
type UpdateSeverityDataAttributesSeverity string

// UpdateSeverityDataType defines model for UpdateSeverity.Data.Type.
type UpdateSeverityDataType string

// UpdateStatusPage defines model for update_status_page.
type UpdateStatusPage struct {
	Data struct {
		Attributes struct {

			// Allow search engines to include your public status page in search results.
			AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

			// The description of the status page
			Description *string `json:"description"`

			// Enabled / Disable the status page
			Enabled *bool `json:"enabled"`

			// The color of the footer. Eg. "#1F2F41"
			FooterColor *string `json:"footer_color"`

			// The color of the header. Eg. "#0061F2"
			HeaderColor *string `json:"header_color"`

			// Make the status page accessible to the public
			Public *bool `json:"public"`

			// Show uptime
			ShowUptime *bool `json:"show_uptime"`

			// Show uptime over x days
			ShowUptimeLastDays *UpdateStatusPageDataAttributesShowUptimeLastDays `json:"show_uptime_last_days"`

			// The title of the status page
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type UpdateStatusPageDataType `json:"type"`
	} `json:"data"`
}

// Show uptime over x days
type UpdateStatusPageDataAttributesShowUptimeLastDays int

// UpdateStatusPageDataType defines model for UpdateStatusPage.Data.Type.
type UpdateStatusPageDataType string

// UpdateTeam defines model for update_team.
type UpdateTeam struct {
	Data struct {
		Attributes struct {

			// The description of the team
			Description *string `json:"description"`

			// The name of the team
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type UpdateTeamDataType `json:"type"`
	} `json:"data"`
}

// UpdateTeamDataType defines model for UpdateTeam.Data.Type.
type UpdateTeamDataType string

// ListAlertsParams defines parameters for ListAlerts.
type ListAlertsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListCausesParams defines parameters for ListCauses.
type ListCausesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListEnvironmentsParams defines parameters for ListEnvironments.
type ListEnvironmentsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListFunctionalitiesParams defines parameters for ListFunctionalities.
type ListFunctionalitiesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentRolesParams defines parameters for ListIncidentRoles.
type ListIncidentRolesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentTypesParams defines parameters for ListIncidentTypes.
type ListIncidentTypesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentsParams defines parameters for ListIncidents.
type ListIncidentsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentActionItemsParams defines parameters for ListIncidentActionItems.
type ListIncidentActionItemsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListAlertParams defines parameters for ListAlert.
type ListAlertParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentEventsParams defines parameters for ListIncidentEvents.
type ListIncidentEventsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentTasksParams defines parameters for ListIncidentTasks.
type ListIncidentTasksParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListPlaybooksParams defines parameters for ListPlaybooks.
type ListPlaybooksParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListPlaybookTasksParams defines parameters for ListPlaybookTasks.
type ListPlaybookTasksParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListPostmortemTemplatesParams defines parameters for ListPostmortemTemplates.
type ListPostmortemTemplatesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListPulsesParams defines parameters for ListPulses.
type ListPulsesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListServicesParams defines parameters for ListServices.
type ListServicesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListSeveritiesParams defines parameters for ListSeverities.
type ListSeveritiesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListStatusPagesParams defines parameters for ListStatusPages.
type ListStatusPagesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListTeamsParams defines parameters for ListTeams.
type ListTeamsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteIncidentActionItem request
	DeleteIncidentActionItem(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// GetIncidentActionItems request
	GetIncidentActionItems(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// UpdateIncidentActionItem request  with any body
	UpdateIncidentActionItemWithBody(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// ListAlerts request
	ListAlerts(
		ctx context.Context,
		params *ListAlertsParams,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// GetAlert request
	GetAlert(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCauses request
	ListCauses(
		ctx context.Context,
		params *ListCausesParams,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// CreateCause request  with any body
	CreateCauseWithBody(
		ctx context.Context,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// DeleteCause request
	DeleteCause(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// GetCause request
	GetCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCause request  with any body
	UpdateCauseWithBody(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// ListEnvironments request
	ListEnvironments(
		ctx context.Context,
		params *ListEnvironmentsParams,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// CreateEnvironment request  with any body
	CreateEnvironmentWithBody(
		ctx context.Context,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// DeleteEnvironment request
	DeleteEnvironment(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// GetEnvironment request
	GetEnvironment(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// UpdateEnvironment request  with any body
	UpdateEnvironmentWithBody(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// DeleteIncidentEvent request
	DeleteIncidentEvent(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// GetIncidentEvents request
	GetIncidentEvents(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// UpdateIncidentEvent request  with any body
	UpdateIncidentEventWithBody(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// ListFunctionalities request
	ListFunctionalities(
		ctx context.Context,
		params *ListFunctionalitiesParams,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// CreateFunctionality request  with any body
	CreateFunctionalityWithBody(
		ctx context.Context,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// DeleteFunctionality request
	DeleteFunctionality(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// GetFunctionality request
	GetFunctionality(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// UpdateFunctionality request  with any body
	UpdateFunctionalityWithBody(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// ListIncidentRoles request
	ListIncidentRoles(
		ctx context.Context,
		params *ListIncidentRolesParams,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// CreateIncidentRole request  with any body
	CreateIncidentRoleWithBody(
		ctx context.Context,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// DeleteIncidentRole request
	DeleteIncidentRole(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// GetIncidentRole request
	GetIncidentRole(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// UpdateIncidentRole request  with any body
	UpdateIncidentRoleWithBody(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// DeleteIncidentTask request
	DeleteIncidentTask(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// GetIncidentTasks request
	GetIncidentTasks(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// UpdateIncidentTask request  with any body
	UpdateIncidentTaskWithBody(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// ListIncidentTypes request
	ListIncidentTypes(
		ctx context.Context,
		params *ListIncidentTypesParams,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// CreateIncidentType request  with any body
	CreateIncidentTypeWithBody(
		ctx context.Context,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// DeleteIncidentType request
	DeleteIncidentType(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// GetIncidentType request
	GetIncidentType(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// UpdateIncidentType request  with any body
	UpdateIncidentTypeWithBody(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// ListIncidents request
	ListIncidents(
		ctx context.Context,
		params *ListIncidentsParams,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// CreateIncident request  with any body
	CreateIncidentWithBody(
		ctx context.Context,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// DeleteIncident request
	DeleteIncident(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// GetIncident request
	GetIncident(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// UpdateIncident request  with any body
	UpdateIncidentWithBody(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// MitigateIncident request  with any body
	MitigateIncidentWithBody(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// ResolveIncident request  with any body
	ResolveIncidentWithBody(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// ListIncidentActionItems request
	ListIncidentActionItems(
		ctx context.Context,
		incidentId string,
		params *ListIncidentActionItemsParams,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// CreateIncidentActionItem request  with any body
	CreateIncidentActionItemWithBody(
		ctx context.Context,
		incidentId string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// ListAlert request
	ListAlert(
		ctx context.Context,
		incidentId string,
		params *ListAlertParams,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// AttachAlert request  with any body
	AttachAlertWithBody(
		ctx context.Context,
		incidentId string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// ListIncidentEvents request
	ListIncidentEvents(
		ctx context.Context,
		incidentId string,
		params *ListIncidentEventsParams,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// CreateIncidentEvent request  with any body
	CreateIncidentEventWithBody(
		ctx context.Context,
		incidentId string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// ListIncidentTasks request
	ListIncidentTasks(
		ctx context.Context,
		incidentId string,
		params *ListIncidentTasksParams,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// CreateIncidentTask request  with any body
	CreateIncidentTaskWithBody(
		ctx context.Context,
		incidentId string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// DeletePlaybookTask request
	DeletePlaybookTask(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// GetPlaybookTasks request
	GetPlaybookTasks(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// UpdatePlaybookTask request  with any body
	UpdatePlaybookTaskWithBody(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// ListPlaybooks request
	ListPlaybooks(
		ctx context.Context,
		params *ListPlaybooksParams,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// CreatePlaybook request  with any body
	CreatePlaybookWithBody(
		ctx context.Context,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// DeletePlaybook request
	DeletePlaybook(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// GetPlaybook request
	GetPlaybook(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// UpdatePlaybook request  with any body
	UpdatePlaybookWithBody(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// ListPlaybookTasks request
	ListPlaybookTasks(
		ctx context.Context,
		playbookId string,
		params *ListPlaybookTasksParams,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// CreatePlaybookTask request  with any body
	CreatePlaybookTaskWithBody(
		ctx context.Context,
		playbookId string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// ListPostmortemTemplates request
	ListPostmortemTemplates(
		ctx context.Context,
		params *ListPostmortemTemplatesParams,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// CreatePostmortemTemplate request  with any body
	CreatePostmortemTemplateWithBody(
		ctx context.Context,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// DeletePostmortemTemplate request
	DeletePostmortemTemplate(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// GetPostmortemTemplate request
	GetPostmortemTemplate(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// UpdatePostmortemTemplate request  with any body
	UpdatePostmortemTemplateWithBody(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// GetIncidentPostmortem request
	GetIncidentPostmortem(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// UpdateIncidentPostmortem request  with any body
	UpdateIncidentPostmortemWithBody(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// ListPulses request
	ListPulses(
		ctx context.Context,
		params *ListPulsesParams,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// CreatePulse request  with any body
	CreatePulseWithBody(
		ctx context.Context,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// GetPulse request
	GetPulse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePulse request  with any body
	UpdatePulseWithBody(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// ListServices request
	ListServices(
		ctx context.Context,
		params *ListServicesParams,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// CreateService request  with any body
	CreateServiceWithBody(
		ctx context.Context,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// DeleteService request
	DeleteService(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// GetService request
	GetService(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// UpdateService request  with any body
	UpdateServiceWithBody(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// ListSeverities request
	ListSeverities(
		ctx context.Context,
		params *ListSeveritiesParams,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// CreateSeverity request  with any body
	CreateSeverityWithBody(
		ctx context.Context,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// DeleteSeverity request
	DeleteSeverity(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// GetSeverity request
	GetSeverity(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// UpdateSeverity request  with any body
	UpdateSeverityWithBody(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// ListStatusPages request
	ListStatusPages(
		ctx context.Context,
		params *ListStatusPagesParams,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// CreateStatusPage request  with any body
	CreateStatusPageWithBody(
		ctx context.Context,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// DeleteStatusPage request
	DeleteStatusPage(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// GetStatusPage request
	GetStatusPage(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// UpdateStatusPage request  with any body
	UpdateStatusPageWithBody(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// ListTeams request
	ListTeams(
		ctx context.Context,
		params *ListTeamsParams,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// CreateTeam request  with any body
	CreateTeamWithBody(
		ctx context.Context,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// DeleteTeam request
	DeleteTeam(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// GetTeam request
	GetTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTeam request  with any body
	UpdateTeamWithBody(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)
}

func (c *Client) DeleteIncidentActionItem(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewDeleteIncidentActionItemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentActionItems(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewGetIncidentActionItemsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentActionItemWithBody(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewUpdateIncidentActionItemRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAlerts(
	ctx context.Context,
	params *ListAlertsParams,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewListAlertsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlert(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewGetAlertRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCauses(
	ctx context.Context,
	params *ListCausesParams,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewListCausesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCauseWithBody(
	ctx context.Context,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewCreateCauseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCause(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewDeleteCauseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCause(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewGetCauseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCauseWithBody(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewUpdateCauseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEnvironments(
	ctx context.Context,
	params *ListEnvironmentsParams,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewListEnvironmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentWithBody(
	ctx context.Context,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironment(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewDeleteEnvironmentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironment(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewGetEnvironmentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnvironmentWithBody(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewUpdateEnvironmentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentEvent(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewDeleteIncidentEventRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentEvents(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewGetIncidentEventsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentEventWithBody(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewUpdateIncidentEventRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFunctionalities(
	ctx context.Context,
	params *ListFunctionalitiesParams,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewListFunctionalitiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFunctionalityWithBody(
	ctx context.Context,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewCreateFunctionalityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFunctionality(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewDeleteFunctionalityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionality(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewGetFunctionalityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFunctionalityWithBody(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewUpdateFunctionalityRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentRoles(
	ctx context.Context,
	params *ListIncidentRolesParams,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewListIncidentRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentRoleWithBody(
	ctx context.Context,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewCreateIncidentRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentRole(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewDeleteIncidentRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentRole(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewGetIncidentRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentRoleWithBody(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewUpdateIncidentRoleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentTask(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewDeleteIncidentTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentTasks(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewGetIncidentTasksRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentTaskWithBody(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewUpdateIncidentTaskRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentTypes(
	ctx context.Context,
	params *ListIncidentTypesParams,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewListIncidentTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentTypeWithBody(
	ctx context.Context,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewCreateIncidentTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentType(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewDeleteIncidentTypeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentType(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewGetIncidentTypeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentTypeWithBody(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewUpdateIncidentTypeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidents(
	ctx context.Context,
	params *ListIncidentsParams,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewListIncidentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentWithBody(
	ctx context.Context,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewCreateIncidentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncident(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewDeleteIncidentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncident(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewGetIncidentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentWithBody(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewUpdateIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MitigateIncidentWithBody(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewMitigateIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResolveIncidentWithBody(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewResolveIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentActionItems(
	ctx context.Context,
	incidentId string,
	params *ListIncidentActionItemsParams,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewListIncidentActionItemsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentActionItemWithBody(
	ctx context.Context,
	incidentId string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewCreateIncidentActionItemRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAlert(
	ctx context.Context,
	incidentId string,
	params *ListAlertParams,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewListAlertRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AttachAlertWithBody(
	ctx context.Context,
	incidentId string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewAttachAlertRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentEvents(
	ctx context.Context,
	incidentId string,
	params *ListIncidentEventsParams,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewListIncidentEventsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentEventWithBody(
	ctx context.Context,
	incidentId string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewCreateIncidentEventRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentTasks(
	ctx context.Context,
	incidentId string,
	params *ListIncidentTasksParams,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewListIncidentTasksRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentTaskWithBody(
	ctx context.Context,
	incidentId string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewCreateIncidentTaskRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePlaybookTask(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewDeletePlaybookTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaybookTasks(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewGetPlaybookTasksRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlaybookTaskWithBody(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewUpdatePlaybookTaskRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPlaybooks(
	ctx context.Context,
	params *ListPlaybooksParams,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewListPlaybooksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlaybookWithBody(
	ctx context.Context,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewCreatePlaybookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePlaybook(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewDeletePlaybookRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaybook(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewGetPlaybookRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlaybookWithBody(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewUpdatePlaybookRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPlaybookTasks(
	ctx context.Context,
	playbookId string,
	params *ListPlaybookTasksParams,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewListPlaybookTasksRequest(c.Server, playbookId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlaybookTaskWithBody(
	ctx context.Context,
	playbookId string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewCreatePlaybookTaskRequestWithBody(c.Server, playbookId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPostmortemTemplates(
	ctx context.Context,
	params *ListPostmortemTemplatesParams,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewListPostmortemTemplatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePostmortemTemplateWithBody(
	ctx context.Context,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewCreatePostmortemTemplateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePostmortemTemplate(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewDeletePostmortemTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPostmortemTemplate(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewGetPostmortemTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePostmortemTemplateWithBody(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewUpdatePostmortemTemplateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentPostmortem(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewGetIncidentPostmortemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentPostmortemWithBody(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewUpdateIncidentPostmortemRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPulses(
	ctx context.Context,
	params *ListPulsesParams,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewListPulsesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePulseWithBody(
	ctx context.Context,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewCreatePulseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPulse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewGetPulseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePulseWithBody(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewUpdatePulseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListServices(
	ctx context.Context,
	params *ListServicesParams,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewListServicesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceWithBody(
	ctx context.Context,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewCreateServiceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteService(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewDeleteServiceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetService(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewGetServiceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateServiceWithBody(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewUpdateServiceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSeverities(
	ctx context.Context,
	params *ListSeveritiesParams,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewListSeveritiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSeverityWithBody(
	ctx context.Context,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewCreateSeverityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSeverity(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewDeleteSeverityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSeverity(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewGetSeverityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSeverityWithBody(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewUpdateSeverityRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListStatusPages(
	ctx context.Context,
	params *ListStatusPagesParams,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewListStatusPagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStatusPageWithBody(
	ctx context.Context,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewCreateStatusPageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStatusPage(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewDeleteStatusPageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusPage(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewGetStatusPageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStatusPageWithBody(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewUpdateStatusPageRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTeams(
	ctx context.Context,
	params *ListTeamsParams,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewListTeamsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamWithBody(
	ctx context.Context,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewCreateTeamRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTeam(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewDeleteTeamRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeam(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewGetTeamRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamWithBody(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*http.Response, error) {
	req, err := NewUpdateTeamRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteIncidentActionItemRequest generates requests for DeleteIncidentActionItem
func NewDeleteIncidentActionItemRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentActionItemsRequest generates requests for GetIncidentActionItems
func NewGetIncidentActionItemsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentActionItemRequestWithBody generates requests for UpdateIncidentActionItem with any type of body
func NewUpdateIncidentActionItemRequestWithBody(
	server string,
	id string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAlertsRequest generates requests for ListAlerts
func NewListAlertsRequest(server string, params *ListAlertsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alerts")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlertRequest generates requests for GetAlert
func NewGetAlertRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alerts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListCausesRequest generates requests for ListCauses
func NewListCausesRequest(server string, params *ListCausesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCauseRequestWithBody generates requests for CreateCause with any type of body
func NewCreateCauseRequestWithBody(
	server string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCauseRequest generates requests for DeleteCause
func NewDeleteCauseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCauseRequest generates requests for GetCause
func NewGetCauseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCauseRequestWithBody generates requests for UpdateCause with any type of body
func NewUpdateCauseRequestWithBody(
	server string,
	id string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListEnvironmentsRequest generates requests for ListEnvironments
func NewListEnvironmentsRequest(
	server string,
	params *ListEnvironmentsParams,
) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEnvironmentRequestWithBody generates requests for CreateEnvironment with any type of body
func NewCreateEnvironmentRequestWithBody(
	server string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEnvironmentRequest generates requests for DeleteEnvironment
func NewDeleteEnvironmentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvironmentRequest generates requests for GetEnvironment
func NewGetEnvironmentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEnvironmentRequestWithBody generates requests for UpdateEnvironment with any type of body
func NewUpdateEnvironmentRequestWithBody(
	server string,
	id string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentEventRequest generates requests for DeleteIncidentEvent
func NewDeleteIncidentEventRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentEventsRequest generates requests for GetIncidentEvents
func NewGetIncidentEventsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentEventRequestWithBody generates requests for UpdateIncidentEvent with any type of body
func NewUpdateIncidentEventRequestWithBody(
	server string,
	id string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListFunctionalitiesRequest generates requests for ListFunctionalities
func NewListFunctionalitiesRequest(
	server string,
	params *ListFunctionalitiesParams,
) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFunctionalityRequestWithBody generates requests for CreateFunctionality with any type of body
func NewCreateFunctionalityRequestWithBody(
	server string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFunctionalityRequest generates requests for DeleteFunctionality
func NewDeleteFunctionalityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFunctionalityRequest generates requests for GetFunctionality
func NewGetFunctionalityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFunctionalityRequestWithBody generates requests for UpdateFunctionality with any type of body
func NewUpdateFunctionalityRequestWithBody(
	server string,
	id string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentRolesRequest generates requests for ListIncidentRoles
func NewListIncidentRolesRequest(
	server string,
	params *ListIncidentRolesParams,
) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentRoleRequestWithBody generates requests for CreateIncidentRole with any type of body
func NewCreateIncidentRoleRequestWithBody(
	server string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentRoleRequest generates requests for DeleteIncidentRole
func NewDeleteIncidentRoleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentRoleRequest generates requests for GetIncidentRole
func NewGetIncidentRoleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentRoleRequestWithBody generates requests for UpdateIncidentRole with any type of body
func NewUpdateIncidentRoleRequestWithBody(
	server string,
	id string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentTaskRequest generates requests for DeleteIncidentTask
func NewDeleteIncidentTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentTasksRequest generates requests for GetIncidentTasks
func NewGetIncidentTasksRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentTaskRequestWithBody generates requests for UpdateIncidentTask with any type of body
func NewUpdateIncidentTaskRequestWithBody(
	server string,
	id string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentTypesRequest generates requests for ListIncidentTypes
func NewListIncidentTypesRequest(
	server string,
	params *ListIncidentTypesParams,
) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentTypeRequestWithBody generates requests for CreateIncidentType with any type of body
func NewCreateIncidentTypeRequestWithBody(
	server string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentTypeRequest generates requests for DeleteIncidentType
func NewDeleteIncidentTypeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentTypeRequest generates requests for GetIncidentType
func NewGetIncidentTypeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentTypeRequestWithBody generates requests for UpdateIncidentType with any type of body
func NewUpdateIncidentTypeRequestWithBody(
	server string,
	id string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentsRequest generates requests for ListIncidents
func NewListIncidentsRequest(server string, params *ListIncidentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentRequestWithBody generates requests for CreateIncident with any type of body
func NewCreateIncidentRequestWithBody(
	server string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentRequest generates requests for DeleteIncident
func NewDeleteIncidentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentRequest generates requests for GetIncident
func NewGetIncidentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentRequestWithBody generates requests for UpdateIncident with any type of body
func NewUpdateIncidentRequestWithBody(
	server string,
	id string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMitigateIncidentRequestWithBody generates requests for MitigateIncident with any type of body
func NewMitigateIncidentRequestWithBody(
	server string,
	id string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/mitigate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResolveIncidentRequestWithBody generates requests for ResolveIncident with any type of body
func NewResolveIncidentRequestWithBody(
	server string,
	id string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/resolve", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentActionItemsRequest generates requests for ListIncidentActionItems
func NewListIncidentActionItemsRequest(
	server string,
	incidentId string,
	params *ListIncidentActionItemsParams,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"incident_id",
		runtime.ParamLocationPath,
		incidentId,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/action_items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentActionItemRequestWithBody generates requests for CreateIncidentActionItem with any type of body
func NewCreateIncidentActionItemRequestWithBody(
	server string,
	incidentId string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"incident_id",
		runtime.ParamLocationPath,
		incidentId,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/action_items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAlertRequest generates requests for ListAlert
func NewListAlertRequest(
	server string,
	incidentId string,
	params *ListAlertParams,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"incident_id",
		runtime.ParamLocationPath,
		incidentId,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/alerts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAttachAlertRequestWithBody generates requests for AttachAlert with any type of body
func NewAttachAlertRequestWithBody(
	server string,
	incidentId string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"incident_id",
		runtime.ParamLocationPath,
		incidentId,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/alerts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentEventsRequest generates requests for ListIncidentEvents
func NewListIncidentEventsRequest(
	server string,
	incidentId string,
	params *ListIncidentEventsParams,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"incident_id",
		runtime.ParamLocationPath,
		incidentId,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentEventRequestWithBody generates requests for CreateIncidentEvent with any type of body
func NewCreateIncidentEventRequestWithBody(
	server string,
	incidentId string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"incident_id",
		runtime.ParamLocationPath,
		incidentId,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentTasksRequest generates requests for ListIncidentTasks
func NewListIncidentTasksRequest(
	server string,
	incidentId string,
	params *ListIncidentTasksParams,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"incident_id",
		runtime.ParamLocationPath,
		incidentId,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/incident_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentTaskRequestWithBody generates requests for CreateIncidentTask with any type of body
func NewCreateIncidentTaskRequestWithBody(
	server string,
	incidentId string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"incident_id",
		runtime.ParamLocationPath,
		incidentId,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/incident_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePlaybookTaskRequest generates requests for DeletePlaybookTask
func NewDeletePlaybookTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlaybookTasksRequest generates requests for GetPlaybookTasks
func NewGetPlaybookTasksRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlaybookTaskRequestWithBody generates requests for UpdatePlaybookTask with any type of body
func NewUpdatePlaybookTaskRequestWithBody(
	server string,
	id string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPlaybooksRequest generates requests for ListPlaybooks
func NewListPlaybooksRequest(server string, params *ListPlaybooksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlaybookRequestWithBody generates requests for CreatePlaybook with any type of body
func NewCreatePlaybookRequestWithBody(
	server string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePlaybookRequest generates requests for DeletePlaybook
func NewDeletePlaybookRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlaybookRequest generates requests for GetPlaybook
func NewGetPlaybookRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlaybookRequestWithBody generates requests for UpdatePlaybook with any type of body
func NewUpdatePlaybookRequestWithBody(
	server string,
	id string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPlaybookTasksRequest generates requests for ListPlaybookTasks
func NewListPlaybookTasksRequest(
	server string,
	playbookId string,
	params *ListPlaybookTasksParams,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"playbook_id",
		runtime.ParamLocationPath,
		playbookId,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s/playbook_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlaybookTaskRequestWithBody generates requests for CreatePlaybookTask with any type of body
func NewCreatePlaybookTaskRequestWithBody(
	server string,
	playbookId string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"playbook_id",
		runtime.ParamLocationPath,
		playbookId,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s/playbook_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPostmortemTemplatesRequest generates requests for ListPostmortemTemplates
func NewListPostmortemTemplatesRequest(
	server string,
	params *ListPostmortemTemplatesParams,
) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePostmortemTemplateRequestWithBody generates requests for CreatePostmortemTemplate with any type of body
func NewCreatePostmortemTemplateRequestWithBody(
	server string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePostmortemTemplateRequest generates requests for DeletePostmortemTemplate
func NewDeletePostmortemTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPostmortemTemplateRequest generates requests for GetPostmortemTemplate
func NewGetPostmortemTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePostmortemTemplateRequestWithBody generates requests for UpdatePostmortemTemplate with any type of body
func NewUpdatePostmortemTemplateRequestWithBody(
	server string,
	id string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIncidentPostmortemRequest generates requests for GetIncidentPostmortem
func NewGetIncidentPostmortemRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentPostmortemRequestWithBody generates requests for UpdateIncidentPostmortem with any type of body
func NewUpdateIncidentPostmortemRequestWithBody(
	server string,
	id string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPulsesRequest generates requests for ListPulses
func NewListPulsesRequest(server string, params *ListPulsesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePulseRequestWithBody generates requests for CreatePulse with any type of body
func NewCreatePulseRequestWithBody(
	server string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPulseRequest generates requests for GetPulse
func NewGetPulseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePulseRequestWithBody generates requests for UpdatePulse with any type of body
func NewUpdatePulseRequestWithBody(
	server string,
	id string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListServicesRequest generates requests for ListServices
func NewListServicesRequest(server string, params *ListServicesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateServiceRequestWithBody generates requests for CreateService with any type of body
func NewCreateServiceRequestWithBody(
	server string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServiceRequest generates requests for DeleteService
func NewDeleteServiceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceRequest generates requests for GetService
func NewGetServiceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateServiceRequestWithBody generates requests for UpdateService with any type of body
func NewUpdateServiceRequestWithBody(
	server string,
	id string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSeveritiesRequest generates requests for ListSeverities
func NewListSeveritiesRequest(server string, params *ListSeveritiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSeverityRequestWithBody generates requests for CreateSeverity with any type of body
func NewCreateSeverityRequestWithBody(
	server string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSeverityRequest generates requests for DeleteSeverity
func NewDeleteSeverityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSeverityRequest generates requests for GetSeverity
func NewGetSeverityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSeverityRequestWithBody generates requests for UpdateSeverity with any type of body
func NewUpdateSeverityRequestWithBody(
	server string,
	id string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListStatusPagesRequest generates requests for ListStatusPages
func NewListStatusPagesRequest(
	server string,
	params *ListStatusPagesParams,
) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateStatusPageRequestWithBody generates requests for CreateStatusPage with any type of body
func NewCreateStatusPageRequestWithBody(
	server string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStatusPageRequest generates requests for DeleteStatusPage
func NewDeleteStatusPageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusPageRequest generates requests for GetStatusPage
func NewGetStatusPageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateStatusPageRequestWithBody generates requests for UpdateStatusPage with any type of body
func NewUpdateStatusPageRequestWithBody(
	server string,
	id string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListTeamsRequest generates requests for ListTeams
func NewListTeamsRequest(server string, params *ListTeamsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTeamRequestWithBody generates requests for CreateTeam with any type of body
func NewCreateTeamRequestWithBody(
	server string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTeamRequest generates requests for DeleteTeam
func NewDeleteTeamRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamRequest generates requests for GetTeam
func NewGetTeamRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTeamRequestWithBody generates requests for UpdateTeam with any type of body
func NewUpdateTeamRequestWithBody(
	server string,
	id string,
	contentType string,
	body io.Reader,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		id,
	)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(
	ctx context.Context,
	req *http.Request,
	additionalEditors []RequestEditorFn,
) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteIncidentActionItem request
	DeleteIncidentActionItemWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*DeleteIncidentActionItemResponse, error)

	// GetIncidentActionItems request
	GetIncidentActionItemsWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*GetIncidentActionItemsResponse, error)

	// UpdateIncidentActionItem request  with any body
	UpdateIncidentActionItemWithBodyWithResponse(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*UpdateIncidentActionItemResponse, error)

	// ListAlerts request
	ListAlertsWithResponse(
		ctx context.Context,
		params *ListAlertsParams,
		reqEditors ...RequestEditorFn,
	) (*ListAlertsResponse, error)

	// GetAlert request
	GetAlertWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*GetAlertResponse, error)

	// ListCauses request
	ListCausesWithResponse(
		ctx context.Context,
		params *ListCausesParams,
		reqEditors ...RequestEditorFn,
	) (*ListCausesResponse, error)

	// CreateCause request  with any body
	CreateCauseWithBodyWithResponse(
		ctx context.Context,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*CreateCauseResponse, error)

	// DeleteCause request
	DeleteCauseWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*DeleteCauseResponse, error)

	// GetCause request
	GetCauseWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*GetCauseResponse, error)

	// UpdateCause request  with any body
	UpdateCauseWithBodyWithResponse(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*UpdateCauseResponse, error)

	// ListEnvironments request
	ListEnvironmentsWithResponse(
		ctx context.Context,
		params *ListEnvironmentsParams,
		reqEditors ...RequestEditorFn,
	) (*ListEnvironmentsResponse, error)

	// CreateEnvironment request  with any body
	CreateEnvironmentWithBodyWithResponse(
		ctx context.Context,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*CreateEnvironmentResponse, error)

	// DeleteEnvironment request
	DeleteEnvironmentWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*DeleteEnvironmentResponse, error)

	// GetEnvironment request
	GetEnvironmentWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*GetEnvironmentResponse, error)

	// UpdateEnvironment request  with any body
	UpdateEnvironmentWithBodyWithResponse(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*UpdateEnvironmentResponse, error)

	// DeleteIncidentEvent request
	DeleteIncidentEventWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*DeleteIncidentEventResponse, error)

	// GetIncidentEvents request
	GetIncidentEventsWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*GetIncidentEventsResponse, error)

	// UpdateIncidentEvent request  with any body
	UpdateIncidentEventWithBodyWithResponse(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*UpdateIncidentEventResponse, error)

	// ListFunctionalities request
	ListFunctionalitiesWithResponse(
		ctx context.Context,
		params *ListFunctionalitiesParams,
		reqEditors ...RequestEditorFn,
	) (*ListFunctionalitiesResponse, error)

	// CreateFunctionality request  with any body
	CreateFunctionalityWithBodyWithResponse(
		ctx context.Context,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*CreateFunctionalityResponse, error)

	// DeleteFunctionality request
	DeleteFunctionalityWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*DeleteFunctionalityResponse, error)

	// GetFunctionality request
	GetFunctionalityWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*GetFunctionalityResponse, error)

	// UpdateFunctionality request  with any body
	UpdateFunctionalityWithBodyWithResponse(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*UpdateFunctionalityResponse, error)

	// ListIncidentRoles request
	ListIncidentRolesWithResponse(
		ctx context.Context,
		params *ListIncidentRolesParams,
		reqEditors ...RequestEditorFn,
	) (*ListIncidentRolesResponse, error)

	// CreateIncidentRole request  with any body
	CreateIncidentRoleWithBodyWithResponse(
		ctx context.Context,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*CreateIncidentRoleResponse, error)

	// DeleteIncidentRole request
	DeleteIncidentRoleWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*DeleteIncidentRoleResponse, error)

	// GetIncidentRole request
	GetIncidentRoleWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*GetIncidentRoleResponse, error)

	// UpdateIncidentRole request  with any body
	UpdateIncidentRoleWithBodyWithResponse(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*UpdateIncidentRoleResponse, error)

	// DeleteIncidentTask request
	DeleteIncidentTaskWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*DeleteIncidentTaskResponse, error)

	// GetIncidentTasks request
	GetIncidentTasksWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*GetIncidentTasksResponse, error)

	// UpdateIncidentTask request  with any body
	UpdateIncidentTaskWithBodyWithResponse(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*UpdateIncidentTaskResponse, error)

	// ListIncidentTypes request
	ListIncidentTypesWithResponse(
		ctx context.Context,
		params *ListIncidentTypesParams,
		reqEditors ...RequestEditorFn,
	) (*ListIncidentTypesResponse, error)

	// CreateIncidentType request  with any body
	CreateIncidentTypeWithBodyWithResponse(
		ctx context.Context,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*CreateIncidentTypeResponse, error)

	// DeleteIncidentType request
	DeleteIncidentTypeWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*DeleteIncidentTypeResponse, error)

	// GetIncidentType request
	GetIncidentTypeWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*GetIncidentTypeResponse, error)

	// UpdateIncidentType request  with any body
	UpdateIncidentTypeWithBodyWithResponse(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*UpdateIncidentTypeResponse, error)

	// ListIncidents request
	ListIncidentsWithResponse(
		ctx context.Context,
		params *ListIncidentsParams,
		reqEditors ...RequestEditorFn,
	) (*ListIncidentsResponse, error)

	// CreateIncident request  with any body
	CreateIncidentWithBodyWithResponse(
		ctx context.Context,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*CreateIncidentResponse, error)

	// DeleteIncident request
	DeleteIncidentWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*DeleteIncidentResponse, error)

	// GetIncident request
	GetIncidentWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*GetIncidentResponse, error)

	// UpdateIncident request  with any body
	UpdateIncidentWithBodyWithResponse(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*UpdateIncidentResponse, error)

	// MitigateIncident request  with any body
	MitigateIncidentWithBodyWithResponse(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*MitigateIncidentResponse, error)

	// ResolveIncident request  with any body
	ResolveIncidentWithBodyWithResponse(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*ResolveIncidentResponse, error)

	// ListIncidentActionItems request
	ListIncidentActionItemsWithResponse(
		ctx context.Context,
		incidentId string,
		params *ListIncidentActionItemsParams,
		reqEditors ...RequestEditorFn,
	) (*ListIncidentActionItemsResponse, error)

	// CreateIncidentActionItem request  with any body
	CreateIncidentActionItemWithBodyWithResponse(
		ctx context.Context,
		incidentId string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*CreateIncidentActionItemResponse, error)

	// ListAlert request
	ListAlertWithResponse(
		ctx context.Context,
		incidentId string,
		params *ListAlertParams,
		reqEditors ...RequestEditorFn,
	) (*ListAlertResponse, error)

	// AttachAlert request  with any body
	AttachAlertWithBodyWithResponse(
		ctx context.Context,
		incidentId string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*AttachAlertResponse, error)

	// ListIncidentEvents request
	ListIncidentEventsWithResponse(
		ctx context.Context,
		incidentId string,
		params *ListIncidentEventsParams,
		reqEditors ...RequestEditorFn,
	) (*ListIncidentEventsResponse, error)

	// CreateIncidentEvent request  with any body
	CreateIncidentEventWithBodyWithResponse(
		ctx context.Context,
		incidentId string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*CreateIncidentEventResponse, error)

	// ListIncidentTasks request
	ListIncidentTasksWithResponse(
		ctx context.Context,
		incidentId string,
		params *ListIncidentTasksParams,
		reqEditors ...RequestEditorFn,
	) (*ListIncidentTasksResponse, error)

	// CreateIncidentTask request  with any body
	CreateIncidentTaskWithBodyWithResponse(
		ctx context.Context,
		incidentId string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*CreateIncidentTaskResponse, error)

	// DeletePlaybookTask request
	DeletePlaybookTaskWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*DeletePlaybookTaskResponse, error)

	// GetPlaybookTasks request
	GetPlaybookTasksWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*GetPlaybookTasksResponse, error)

	// UpdatePlaybookTask request  with any body
	UpdatePlaybookTaskWithBodyWithResponse(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*UpdatePlaybookTaskResponse, error)

	// ListPlaybooks request
	ListPlaybooksWithResponse(
		ctx context.Context,
		params *ListPlaybooksParams,
		reqEditors ...RequestEditorFn,
	) (*ListPlaybooksResponse, error)

	// CreatePlaybook request  with any body
	CreatePlaybookWithBodyWithResponse(
		ctx context.Context,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*CreatePlaybookResponse, error)

	// DeletePlaybook request
	DeletePlaybookWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*DeletePlaybookResponse, error)

	// GetPlaybook request
	GetPlaybookWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*GetPlaybookResponse, error)

	// UpdatePlaybook request  with any body
	UpdatePlaybookWithBodyWithResponse(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*UpdatePlaybookResponse, error)

	// ListPlaybookTasks request
	ListPlaybookTasksWithResponse(
		ctx context.Context,
		playbookId string,
		params *ListPlaybookTasksParams,
		reqEditors ...RequestEditorFn,
	) (*ListPlaybookTasksResponse, error)

	// CreatePlaybookTask request  with any body
	CreatePlaybookTaskWithBodyWithResponse(
		ctx context.Context,
		playbookId string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*CreatePlaybookTaskResponse, error)

	// ListPostmortemTemplates request
	ListPostmortemTemplatesWithResponse(
		ctx context.Context,
		params *ListPostmortemTemplatesParams,
		reqEditors ...RequestEditorFn,
	) (*ListPostmortemTemplatesResponse, error)

	// CreatePostmortemTemplate request  with any body
	CreatePostmortemTemplateWithBodyWithResponse(
		ctx context.Context,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*CreatePostmortemTemplateResponse, error)

	// DeletePostmortemTemplate request
	DeletePostmortemTemplateWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*DeletePostmortemTemplateResponse, error)

	// GetPostmortemTemplate request
	GetPostmortemTemplateWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*GetPostmortemTemplateResponse, error)

	// UpdatePostmortemTemplate request  with any body
	UpdatePostmortemTemplateWithBodyWithResponse(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*UpdatePostmortemTemplateResponse, error)

	// GetIncidentPostmortem request
	GetIncidentPostmortemWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*GetIncidentPostmortemResponse, error)

	// UpdateIncidentPostmortem request  with any body
	UpdateIncidentPostmortemWithBodyWithResponse(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*UpdateIncidentPostmortemResponse, error)

	// ListPulses request
	ListPulsesWithResponse(
		ctx context.Context,
		params *ListPulsesParams,
		reqEditors ...RequestEditorFn,
	) (*ListPulsesResponse, error)

	// CreatePulse request  with any body
	CreatePulseWithBodyWithResponse(
		ctx context.Context,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*CreatePulseResponse, error)

	// GetPulse request
	GetPulseWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*GetPulseResponse, error)

	// UpdatePulse request  with any body
	UpdatePulseWithBodyWithResponse(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*UpdatePulseResponse, error)

	// ListServices request
	ListServicesWithResponse(
		ctx context.Context,
		params *ListServicesParams,
		reqEditors ...RequestEditorFn,
	) (*ListServicesResponse, error)

	// CreateService request  with any body
	CreateServiceWithBodyWithResponse(
		ctx context.Context,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*CreateServiceResponse, error)

	// DeleteService request
	DeleteServiceWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*DeleteServiceResponse, error)

	// GetService request
	GetServiceWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*GetServiceResponse, error)

	// UpdateService request  with any body
	UpdateServiceWithBodyWithResponse(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*UpdateServiceResponse, error)

	// ListSeverities request
	ListSeveritiesWithResponse(
		ctx context.Context,
		params *ListSeveritiesParams,
		reqEditors ...RequestEditorFn,
	) (*ListSeveritiesResponse, error)

	// CreateSeverity request  with any body
	CreateSeverityWithBodyWithResponse(
		ctx context.Context,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*CreateSeverityResponse, error)

	// DeleteSeverity request
	DeleteSeverityWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*DeleteSeverityResponse, error)

	// GetSeverity request
	GetSeverityWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*GetSeverityResponse, error)

	// UpdateSeverity request  with any body
	UpdateSeverityWithBodyWithResponse(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*UpdateSeverityResponse, error)

	// ListStatusPages request
	ListStatusPagesWithResponse(
		ctx context.Context,
		params *ListStatusPagesParams,
		reqEditors ...RequestEditorFn,
	) (*ListStatusPagesResponse, error)

	// CreateStatusPage request  with any body
	CreateStatusPageWithBodyWithResponse(
		ctx context.Context,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*CreateStatusPageResponse, error)

	// DeleteStatusPage request
	DeleteStatusPageWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*DeleteStatusPageResponse, error)

	// GetStatusPage request
	GetStatusPageWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*GetStatusPageResponse, error)

	// UpdateStatusPage request  with any body
	UpdateStatusPageWithBodyWithResponse(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*UpdateStatusPageResponse, error)

	// ListTeams request
	ListTeamsWithResponse(
		ctx context.Context,
		params *ListTeamsParams,
		reqEditors ...RequestEditorFn,
	) (*ListTeamsResponse, error)

	// CreateTeam request  with any body
	CreateTeamWithBodyWithResponse(
		ctx context.Context,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*CreateTeamResponse, error)

	// DeleteTeam request
	DeleteTeamWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*DeleteTeamResponse, error)

	// GetTeam request
	GetTeamWithResponse(
		ctx context.Context,
		id string,
		reqEditors ...RequestEditorFn,
	) (*GetTeamResponse, error)

	// UpdateTeam request  with any body
	UpdateTeamWithBodyWithResponse(
		ctx context.Context,
		id string,
		contentType string,
		body io.Reader,
		reqEditors ...RequestEditorFn,
	) (*UpdateTeamResponse, error)
}

type DeleteIncidentActionItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentActionItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentActionItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentActionItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentActionItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCausesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListCausesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCausesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFunctionalitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListFunctionalitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFunctionalitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MitigateIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MitigateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MitigateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResolveIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResolveIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResolveIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentActionItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentActionItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentActionItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentActionItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AttachAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AttachAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AttachAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaybookTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlaybookTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaybookTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPlaybooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPlaybooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPlaybooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPlaybookTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPlaybookTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPlaybookTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPostmortemTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPostmortemTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPostmortemTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentPostmortemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentPostmortemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentPostmortemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentPostmortemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentPostmortemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentPostmortemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPulsesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPulsesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPulsesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSeveritiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListSeveritiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSeveritiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListStatusPagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListStatusPagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListStatusPagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteIncidentActionItemWithResponse request returning *DeleteIncidentActionItemResponse
func (c *ClientWithResponses) DeleteIncidentActionItemWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*DeleteIncidentActionItemResponse, error) {
	rsp, err := c.DeleteIncidentActionItem(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentActionItemResponse(rsp)
}

// GetIncidentActionItemsWithResponse request returning *GetIncidentActionItemsResponse
func (c *ClientWithResponses) GetIncidentActionItemsWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*GetIncidentActionItemsResponse, error) {
	rsp, err := c.GetIncidentActionItems(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentActionItemsResponse(rsp)
}

// UpdateIncidentActionItemWithBodyWithResponse request with arbitrary body returning *UpdateIncidentActionItemResponse
func (c *ClientWithResponses) UpdateIncidentActionItemWithBodyWithResponse(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*UpdateIncidentActionItemResponse, error) {
	rsp, err := c.UpdateIncidentActionItemWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentActionItemResponse(rsp)
}

// ListAlertsWithResponse request returning *ListAlertsResponse
func (c *ClientWithResponses) ListAlertsWithResponse(
	ctx context.Context,
	params *ListAlertsParams,
	reqEditors ...RequestEditorFn,
) (*ListAlertsResponse, error) {
	rsp, err := c.ListAlerts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAlertsResponse(rsp)
}

// GetAlertWithResponse request returning *GetAlertResponse
func (c *ClientWithResponses) GetAlertWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*GetAlertResponse, error) {
	rsp, err := c.GetAlert(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertResponse(rsp)
}

// ListCausesWithResponse request returning *ListCausesResponse
func (c *ClientWithResponses) ListCausesWithResponse(
	ctx context.Context,
	params *ListCausesParams,
	reqEditors ...RequestEditorFn,
) (*ListCausesResponse, error) {
	rsp, err := c.ListCauses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCausesResponse(rsp)
}

// CreateCauseWithBodyWithResponse request with arbitrary body returning *CreateCauseResponse
func (c *ClientWithResponses) CreateCauseWithBodyWithResponse(
	ctx context.Context,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*CreateCauseResponse, error) {
	rsp, err := c.CreateCauseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCauseResponse(rsp)
}

// DeleteCauseWithResponse request returning *DeleteCauseResponse
func (c *ClientWithResponses) DeleteCauseWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*DeleteCauseResponse, error) {
	rsp, err := c.DeleteCause(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCauseResponse(rsp)
}

// GetCauseWithResponse request returning *GetCauseResponse
func (c *ClientWithResponses) GetCauseWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*GetCauseResponse, error) {
	rsp, err := c.GetCause(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCauseResponse(rsp)
}

// UpdateCauseWithBodyWithResponse request with arbitrary body returning *UpdateCauseResponse
func (c *ClientWithResponses) UpdateCauseWithBodyWithResponse(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*UpdateCauseResponse, error) {
	rsp, err := c.UpdateCauseWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCauseResponse(rsp)
}

// ListEnvironmentsWithResponse request returning *ListEnvironmentsResponse
func (c *ClientWithResponses) ListEnvironmentsWithResponse(
	ctx context.Context,
	params *ListEnvironmentsParams,
	reqEditors ...RequestEditorFn,
) (*ListEnvironmentsResponse, error) {
	rsp, err := c.ListEnvironments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEnvironmentsResponse(rsp)
}

// CreateEnvironmentWithBodyWithResponse request with arbitrary body returning *CreateEnvironmentResponse
func (c *ClientWithResponses) CreateEnvironmentWithBodyWithResponse(
	ctx context.Context,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

// DeleteEnvironmentWithResponse request returning *DeleteEnvironmentResponse
func (c *ClientWithResponses) DeleteEnvironmentWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*DeleteEnvironmentResponse, error) {
	rsp, err := c.DeleteEnvironment(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentResponse(rsp)
}

// GetEnvironmentWithResponse request returning *GetEnvironmentResponse
func (c *ClientWithResponses) GetEnvironmentWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*GetEnvironmentResponse, error) {
	rsp, err := c.GetEnvironment(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentResponse(rsp)
}

// UpdateEnvironmentWithBodyWithResponse request with arbitrary body returning *UpdateEnvironmentResponse
func (c *ClientWithResponses) UpdateEnvironmentWithBodyWithResponse(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*UpdateEnvironmentResponse, error) {
	rsp, err := c.UpdateEnvironmentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnvironmentResponse(rsp)
}

// DeleteIncidentEventWithResponse request returning *DeleteIncidentEventResponse
func (c *ClientWithResponses) DeleteIncidentEventWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*DeleteIncidentEventResponse, error) {
	rsp, err := c.DeleteIncidentEvent(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentEventResponse(rsp)
}

// GetIncidentEventsWithResponse request returning *GetIncidentEventsResponse
func (c *ClientWithResponses) GetIncidentEventsWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*GetIncidentEventsResponse, error) {
	rsp, err := c.GetIncidentEvents(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentEventsResponse(rsp)
}

// UpdateIncidentEventWithBodyWithResponse request with arbitrary body returning *UpdateIncidentEventResponse
func (c *ClientWithResponses) UpdateIncidentEventWithBodyWithResponse(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*UpdateIncidentEventResponse, error) {
	rsp, err := c.UpdateIncidentEventWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentEventResponse(rsp)
}

// ListFunctionalitiesWithResponse request returning *ListFunctionalitiesResponse
func (c *ClientWithResponses) ListFunctionalitiesWithResponse(
	ctx context.Context,
	params *ListFunctionalitiesParams,
	reqEditors ...RequestEditorFn,
) (*ListFunctionalitiesResponse, error) {
	rsp, err := c.ListFunctionalities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFunctionalitiesResponse(rsp)
}

// CreateFunctionalityWithBodyWithResponse request with arbitrary body returning *CreateFunctionalityResponse
func (c *ClientWithResponses) CreateFunctionalityWithBodyWithResponse(
	ctx context.Context,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*CreateFunctionalityResponse, error) {
	rsp, err := c.CreateFunctionalityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFunctionalityResponse(rsp)
}

// DeleteFunctionalityWithResponse request returning *DeleteFunctionalityResponse
func (c *ClientWithResponses) DeleteFunctionalityWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*DeleteFunctionalityResponse, error) {
	rsp, err := c.DeleteFunctionality(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFunctionalityResponse(rsp)
}

// GetFunctionalityWithResponse request returning *GetFunctionalityResponse
func (c *ClientWithResponses) GetFunctionalityWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*GetFunctionalityResponse, error) {
	rsp, err := c.GetFunctionality(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionalityResponse(rsp)
}

// UpdateFunctionalityWithBodyWithResponse request with arbitrary body returning *UpdateFunctionalityResponse
func (c *ClientWithResponses) UpdateFunctionalityWithBodyWithResponse(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*UpdateFunctionalityResponse, error) {
	rsp, err := c.UpdateFunctionalityWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFunctionalityResponse(rsp)
}

// ListIncidentRolesWithResponse request returning *ListIncidentRolesResponse
func (c *ClientWithResponses) ListIncidentRolesWithResponse(
	ctx context.Context,
	params *ListIncidentRolesParams,
	reqEditors ...RequestEditorFn,
) (*ListIncidentRolesResponse, error) {
	rsp, err := c.ListIncidentRoles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentRolesResponse(rsp)
}

// CreateIncidentRoleWithBodyWithResponse request with arbitrary body returning *CreateIncidentRoleResponse
func (c *ClientWithResponses) CreateIncidentRoleWithBodyWithResponse(
	ctx context.Context,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*CreateIncidentRoleResponse, error) {
	rsp, err := c.CreateIncidentRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentRoleResponse(rsp)
}

// DeleteIncidentRoleWithResponse request returning *DeleteIncidentRoleResponse
func (c *ClientWithResponses) DeleteIncidentRoleWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*DeleteIncidentRoleResponse, error) {
	rsp, err := c.DeleteIncidentRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentRoleResponse(rsp)
}

// GetIncidentRoleWithResponse request returning *GetIncidentRoleResponse
func (c *ClientWithResponses) GetIncidentRoleWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*GetIncidentRoleResponse, error) {
	rsp, err := c.GetIncidentRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentRoleResponse(rsp)
}

// UpdateIncidentRoleWithBodyWithResponse request with arbitrary body returning *UpdateIncidentRoleResponse
func (c *ClientWithResponses) UpdateIncidentRoleWithBodyWithResponse(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*UpdateIncidentRoleResponse, error) {
	rsp, err := c.UpdateIncidentRoleWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentRoleResponse(rsp)
}

// DeleteIncidentTaskWithResponse request returning *DeleteIncidentTaskResponse
func (c *ClientWithResponses) DeleteIncidentTaskWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*DeleteIncidentTaskResponse, error) {
	rsp, err := c.DeleteIncidentTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentTaskResponse(rsp)
}

// GetIncidentTasksWithResponse request returning *GetIncidentTasksResponse
func (c *ClientWithResponses) GetIncidentTasksWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*GetIncidentTasksResponse, error) {
	rsp, err := c.GetIncidentTasks(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentTasksResponse(rsp)
}

// UpdateIncidentTaskWithBodyWithResponse request with arbitrary body returning *UpdateIncidentTaskResponse
func (c *ClientWithResponses) UpdateIncidentTaskWithBodyWithResponse(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*UpdateIncidentTaskResponse, error) {
	rsp, err := c.UpdateIncidentTaskWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentTaskResponse(rsp)
}

// ListIncidentTypesWithResponse request returning *ListIncidentTypesResponse
func (c *ClientWithResponses) ListIncidentTypesWithResponse(
	ctx context.Context,
	params *ListIncidentTypesParams,
	reqEditors ...RequestEditorFn,
) (*ListIncidentTypesResponse, error) {
	rsp, err := c.ListIncidentTypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentTypesResponse(rsp)
}

// CreateIncidentTypeWithBodyWithResponse request with arbitrary body returning *CreateIncidentTypeResponse
func (c *ClientWithResponses) CreateIncidentTypeWithBodyWithResponse(
	ctx context.Context,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*CreateIncidentTypeResponse, error) {
	rsp, err := c.CreateIncidentTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentTypeResponse(rsp)
}

// DeleteIncidentTypeWithResponse request returning *DeleteIncidentTypeResponse
func (c *ClientWithResponses) DeleteIncidentTypeWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*DeleteIncidentTypeResponse, error) {
	rsp, err := c.DeleteIncidentType(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentTypeResponse(rsp)
}

// GetIncidentTypeWithResponse request returning *GetIncidentTypeResponse
func (c *ClientWithResponses) GetIncidentTypeWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*GetIncidentTypeResponse, error) {
	rsp, err := c.GetIncidentType(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentTypeResponse(rsp)
}

// UpdateIncidentTypeWithBodyWithResponse request with arbitrary body returning *UpdateIncidentTypeResponse
func (c *ClientWithResponses) UpdateIncidentTypeWithBodyWithResponse(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*UpdateIncidentTypeResponse, error) {
	rsp, err := c.UpdateIncidentTypeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentTypeResponse(rsp)
}

// ListIncidentsWithResponse request returning *ListIncidentsResponse
func (c *ClientWithResponses) ListIncidentsWithResponse(
	ctx context.Context,
	params *ListIncidentsParams,
	reqEditors ...RequestEditorFn,
) (*ListIncidentsResponse, error) {
	rsp, err := c.ListIncidents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentsResponse(rsp)
}

// CreateIncidentWithBodyWithResponse request with arbitrary body returning *CreateIncidentResponse
func (c *ClientWithResponses) CreateIncidentWithBodyWithResponse(
	ctx context.Context,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*CreateIncidentResponse, error) {
	rsp, err := c.CreateIncidentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentResponse(rsp)
}

// DeleteIncidentWithResponse request returning *DeleteIncidentResponse
func (c *ClientWithResponses) DeleteIncidentWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*DeleteIncidentResponse, error) {
	rsp, err := c.DeleteIncident(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentResponse(rsp)
}

// GetIncidentWithResponse request returning *GetIncidentResponse
func (c *ClientWithResponses) GetIncidentWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*GetIncidentResponse, error) {
	rsp, err := c.GetIncident(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentResponse(rsp)
}

// UpdateIncidentWithBodyWithResponse request with arbitrary body returning *UpdateIncidentResponse
func (c *ClientWithResponses) UpdateIncidentWithBodyWithResponse(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*UpdateIncidentResponse, error) {
	rsp, err := c.UpdateIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentResponse(rsp)
}

// MitigateIncidentWithBodyWithResponse request with arbitrary body returning *MitigateIncidentResponse
func (c *ClientWithResponses) MitigateIncidentWithBodyWithResponse(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*MitigateIncidentResponse, error) {
	rsp, err := c.MitigateIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMitigateIncidentResponse(rsp)
}

// ResolveIncidentWithBodyWithResponse request with arbitrary body returning *ResolveIncidentResponse
func (c *ClientWithResponses) ResolveIncidentWithBodyWithResponse(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*ResolveIncidentResponse, error) {
	rsp, err := c.ResolveIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResolveIncidentResponse(rsp)
}

// ListIncidentActionItemsWithResponse request returning *ListIncidentActionItemsResponse
func (c *ClientWithResponses) ListIncidentActionItemsWithResponse(
	ctx context.Context,
	incidentId string,
	params *ListIncidentActionItemsParams,
	reqEditors ...RequestEditorFn,
) (*ListIncidentActionItemsResponse, error) {
	rsp, err := c.ListIncidentActionItems(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentActionItemsResponse(rsp)
}

// CreateIncidentActionItemWithBodyWithResponse request with arbitrary body returning *CreateIncidentActionItemResponse
func (c *ClientWithResponses) CreateIncidentActionItemWithBodyWithResponse(
	ctx context.Context,
	incidentId string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*CreateIncidentActionItemResponse, error) {
	rsp, err := c.CreateIncidentActionItemWithBody(
		ctx,
		incidentId,
		contentType,
		body,
		reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentActionItemResponse(rsp)
}

// ListAlertWithResponse request returning *ListAlertResponse
func (c *ClientWithResponses) ListAlertWithResponse(
	ctx context.Context,
	incidentId string,
	params *ListAlertParams,
	reqEditors ...RequestEditorFn,
) (*ListAlertResponse, error) {
	rsp, err := c.ListAlert(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAlertResponse(rsp)
}

// AttachAlertWithBodyWithResponse request with arbitrary body returning *AttachAlertResponse
func (c *ClientWithResponses) AttachAlertWithBodyWithResponse(
	ctx context.Context,
	incidentId string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*AttachAlertResponse, error) {
	rsp, err := c.AttachAlertWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAttachAlertResponse(rsp)
}

// ListIncidentEventsWithResponse request returning *ListIncidentEventsResponse
func (c *ClientWithResponses) ListIncidentEventsWithResponse(
	ctx context.Context,
	incidentId string,
	params *ListIncidentEventsParams,
	reqEditors ...RequestEditorFn,
) (*ListIncidentEventsResponse, error) {
	rsp, err := c.ListIncidentEvents(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentEventsResponse(rsp)
}

// CreateIncidentEventWithBodyWithResponse request with arbitrary body returning *CreateIncidentEventResponse
func (c *ClientWithResponses) CreateIncidentEventWithBodyWithResponse(
	ctx context.Context,
	incidentId string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*CreateIncidentEventResponse, error) {
	rsp, err := c.CreateIncidentEventWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentEventResponse(rsp)
}

// ListIncidentTasksWithResponse request returning *ListIncidentTasksResponse
func (c *ClientWithResponses) ListIncidentTasksWithResponse(
	ctx context.Context,
	incidentId string,
	params *ListIncidentTasksParams,
	reqEditors ...RequestEditorFn,
) (*ListIncidentTasksResponse, error) {
	rsp, err := c.ListIncidentTasks(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentTasksResponse(rsp)
}

// CreateIncidentTaskWithBodyWithResponse request with arbitrary body returning *CreateIncidentTaskResponse
func (c *ClientWithResponses) CreateIncidentTaskWithBodyWithResponse(
	ctx context.Context,
	incidentId string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*CreateIncidentTaskResponse, error) {
	rsp, err := c.CreateIncidentTaskWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentTaskResponse(rsp)
}

// DeletePlaybookTaskWithResponse request returning *DeletePlaybookTaskResponse
func (c *ClientWithResponses) DeletePlaybookTaskWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*DeletePlaybookTaskResponse, error) {
	rsp, err := c.DeletePlaybookTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePlaybookTaskResponse(rsp)
}

// GetPlaybookTasksWithResponse request returning *GetPlaybookTasksResponse
func (c *ClientWithResponses) GetPlaybookTasksWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*GetPlaybookTasksResponse, error) {
	rsp, err := c.GetPlaybookTasks(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaybookTasksResponse(rsp)
}

// UpdatePlaybookTaskWithBodyWithResponse request with arbitrary body returning *UpdatePlaybookTaskResponse
func (c *ClientWithResponses) UpdatePlaybookTaskWithBodyWithResponse(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*UpdatePlaybookTaskResponse, error) {
	rsp, err := c.UpdatePlaybookTaskWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlaybookTaskResponse(rsp)
}

// ListPlaybooksWithResponse request returning *ListPlaybooksResponse
func (c *ClientWithResponses) ListPlaybooksWithResponse(
	ctx context.Context,
	params *ListPlaybooksParams,
	reqEditors ...RequestEditorFn,
) (*ListPlaybooksResponse, error) {
	rsp, err := c.ListPlaybooks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPlaybooksResponse(rsp)
}

// CreatePlaybookWithBodyWithResponse request with arbitrary body returning *CreatePlaybookResponse
func (c *ClientWithResponses) CreatePlaybookWithBodyWithResponse(
	ctx context.Context,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*CreatePlaybookResponse, error) {
	rsp, err := c.CreatePlaybookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlaybookResponse(rsp)
}

// DeletePlaybookWithResponse request returning *DeletePlaybookResponse
func (c *ClientWithResponses) DeletePlaybookWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*DeletePlaybookResponse, error) {
	rsp, err := c.DeletePlaybook(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePlaybookResponse(rsp)
}

// GetPlaybookWithResponse request returning *GetPlaybookResponse
func (c *ClientWithResponses) GetPlaybookWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*GetPlaybookResponse, error) {
	rsp, err := c.GetPlaybook(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaybookResponse(rsp)
}

// UpdatePlaybookWithBodyWithResponse request with arbitrary body returning *UpdatePlaybookResponse
func (c *ClientWithResponses) UpdatePlaybookWithBodyWithResponse(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*UpdatePlaybookResponse, error) {
	rsp, err := c.UpdatePlaybookWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlaybookResponse(rsp)
}

// ListPlaybookTasksWithResponse request returning *ListPlaybookTasksResponse
func (c *ClientWithResponses) ListPlaybookTasksWithResponse(
	ctx context.Context,
	playbookId string,
	params *ListPlaybookTasksParams,
	reqEditors ...RequestEditorFn,
) (*ListPlaybookTasksResponse, error) {
	rsp, err := c.ListPlaybookTasks(ctx, playbookId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPlaybookTasksResponse(rsp)
}

// CreatePlaybookTaskWithBodyWithResponse request with arbitrary body returning *CreatePlaybookTaskResponse
func (c *ClientWithResponses) CreatePlaybookTaskWithBodyWithResponse(
	ctx context.Context,
	playbookId string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*CreatePlaybookTaskResponse, error) {
	rsp, err := c.CreatePlaybookTaskWithBody(ctx, playbookId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlaybookTaskResponse(rsp)
}

// ListPostmortemTemplatesWithResponse request returning *ListPostmortemTemplatesResponse
func (c *ClientWithResponses) ListPostmortemTemplatesWithResponse(
	ctx context.Context,
	params *ListPostmortemTemplatesParams,
	reqEditors ...RequestEditorFn,
) (*ListPostmortemTemplatesResponse, error) {
	rsp, err := c.ListPostmortemTemplates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPostmortemTemplatesResponse(rsp)
}

// CreatePostmortemTemplateWithBodyWithResponse request with arbitrary body returning *CreatePostmortemTemplateResponse
func (c *ClientWithResponses) CreatePostmortemTemplateWithBodyWithResponse(
	ctx context.Context,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*CreatePostmortemTemplateResponse, error) {
	rsp, err := c.CreatePostmortemTemplateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePostmortemTemplateResponse(rsp)
}

// DeletePostmortemTemplateWithResponse request returning *DeletePostmortemTemplateResponse
func (c *ClientWithResponses) DeletePostmortemTemplateWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*DeletePostmortemTemplateResponse, error) {
	rsp, err := c.DeletePostmortemTemplate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePostmortemTemplateResponse(rsp)
}

// GetPostmortemTemplateWithResponse request returning *GetPostmortemTemplateResponse
func (c *ClientWithResponses) GetPostmortemTemplateWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*GetPostmortemTemplateResponse, error) {
	rsp, err := c.GetPostmortemTemplate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPostmortemTemplateResponse(rsp)
}

// UpdatePostmortemTemplateWithBodyWithResponse request with arbitrary body returning *UpdatePostmortemTemplateResponse
func (c *ClientWithResponses) UpdatePostmortemTemplateWithBodyWithResponse(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*UpdatePostmortemTemplateResponse, error) {
	rsp, err := c.UpdatePostmortemTemplateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePostmortemTemplateResponse(rsp)
}

// GetIncidentPostmortemWithResponse request returning *GetIncidentPostmortemResponse
func (c *ClientWithResponses) GetIncidentPostmortemWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*GetIncidentPostmortemResponse, error) {
	rsp, err := c.GetIncidentPostmortem(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentPostmortemResponse(rsp)
}

// UpdateIncidentPostmortemWithBodyWithResponse request with arbitrary body returning *UpdateIncidentPostmortemResponse
func (c *ClientWithResponses) UpdateIncidentPostmortemWithBodyWithResponse(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*UpdateIncidentPostmortemResponse, error) {
	rsp, err := c.UpdateIncidentPostmortemWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentPostmortemResponse(rsp)
}

// ListPulsesWithResponse request returning *ListPulsesResponse
func (c *ClientWithResponses) ListPulsesWithResponse(
	ctx context.Context,
	params *ListPulsesParams,
	reqEditors ...RequestEditorFn,
) (*ListPulsesResponse, error) {
	rsp, err := c.ListPulses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPulsesResponse(rsp)
}

// CreatePulseWithBodyWithResponse request with arbitrary body returning *CreatePulseResponse
func (c *ClientWithResponses) CreatePulseWithBodyWithResponse(
	ctx context.Context,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*CreatePulseResponse, error) {
	rsp, err := c.CreatePulseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePulseResponse(rsp)
}

// GetPulseWithResponse request returning *GetPulseResponse
func (c *ClientWithResponses) GetPulseWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*GetPulseResponse, error) {
	rsp, err := c.GetPulse(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPulseResponse(rsp)
}

// UpdatePulseWithBodyWithResponse request with arbitrary body returning *UpdatePulseResponse
func (c *ClientWithResponses) UpdatePulseWithBodyWithResponse(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*UpdatePulseResponse, error) {
	rsp, err := c.UpdatePulseWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePulseResponse(rsp)
}

// ListServicesWithResponse request returning *ListServicesResponse
func (c *ClientWithResponses) ListServicesWithResponse(
	ctx context.Context,
	params *ListServicesParams,
	reqEditors ...RequestEditorFn,
) (*ListServicesResponse, error) {
	rsp, err := c.ListServices(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListServicesResponse(rsp)
}

// CreateServiceWithBodyWithResponse request with arbitrary body returning *CreateServiceResponse
func (c *ClientWithResponses) CreateServiceWithBodyWithResponse(
	ctx context.Context,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*CreateServiceResponse, error) {
	rsp, err := c.CreateServiceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceResponse(rsp)
}

// DeleteServiceWithResponse request returning *DeleteServiceResponse
func (c *ClientWithResponses) DeleteServiceWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*DeleteServiceResponse, error) {
	rsp, err := c.DeleteService(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceResponse(rsp)
}

// GetServiceWithResponse request returning *GetServiceResponse
func (c *ClientWithResponses) GetServiceWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*GetServiceResponse, error) {
	rsp, err := c.GetService(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceResponse(rsp)
}

// UpdateServiceWithBodyWithResponse request with arbitrary body returning *UpdateServiceResponse
func (c *ClientWithResponses) UpdateServiceWithBodyWithResponse(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*UpdateServiceResponse, error) {
	rsp, err := c.UpdateServiceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateServiceResponse(rsp)
}

// ListSeveritiesWithResponse request returning *ListSeveritiesResponse
func (c *ClientWithResponses) ListSeveritiesWithResponse(
	ctx context.Context,
	params *ListSeveritiesParams,
	reqEditors ...RequestEditorFn,
) (*ListSeveritiesResponse, error) {
	rsp, err := c.ListSeverities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSeveritiesResponse(rsp)
}

// CreateSeverityWithBodyWithResponse request with arbitrary body returning *CreateSeverityResponse
func (c *ClientWithResponses) CreateSeverityWithBodyWithResponse(
	ctx context.Context,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*CreateSeverityResponse, error) {
	rsp, err := c.CreateSeverityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSeverityResponse(rsp)
}

// DeleteSeverityWithResponse request returning *DeleteSeverityResponse
func (c *ClientWithResponses) DeleteSeverityWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*DeleteSeverityResponse, error) {
	rsp, err := c.DeleteSeverity(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSeverityResponse(rsp)
}

// GetSeverityWithResponse request returning *GetSeverityResponse
func (c *ClientWithResponses) GetSeverityWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*GetSeverityResponse, error) {
	rsp, err := c.GetSeverity(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSeverityResponse(rsp)
}

// UpdateSeverityWithBodyWithResponse request with arbitrary body returning *UpdateSeverityResponse
func (c *ClientWithResponses) UpdateSeverityWithBodyWithResponse(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*UpdateSeverityResponse, error) {
	rsp, err := c.UpdateSeverityWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSeverityResponse(rsp)
}

// ListStatusPagesWithResponse request returning *ListStatusPagesResponse
func (c *ClientWithResponses) ListStatusPagesWithResponse(
	ctx context.Context,
	params *ListStatusPagesParams,
	reqEditors ...RequestEditorFn,
) (*ListStatusPagesResponse, error) {
	rsp, err := c.ListStatusPages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListStatusPagesResponse(rsp)
}

// CreateStatusPageWithBodyWithResponse request with arbitrary body returning *CreateStatusPageResponse
func (c *ClientWithResponses) CreateStatusPageWithBodyWithResponse(
	ctx context.Context,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*CreateStatusPageResponse, error) {
	rsp, err := c.CreateStatusPageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStatusPageResponse(rsp)
}

// DeleteStatusPageWithResponse request returning *DeleteStatusPageResponse
func (c *ClientWithResponses) DeleteStatusPageWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*DeleteStatusPageResponse, error) {
	rsp, err := c.DeleteStatusPage(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStatusPageResponse(rsp)
}

// GetStatusPageWithResponse request returning *GetStatusPageResponse
func (c *ClientWithResponses) GetStatusPageWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*GetStatusPageResponse, error) {
	rsp, err := c.GetStatusPage(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusPageResponse(rsp)
}

// UpdateStatusPageWithBodyWithResponse request with arbitrary body returning *UpdateStatusPageResponse
func (c *ClientWithResponses) UpdateStatusPageWithBodyWithResponse(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*UpdateStatusPageResponse, error) {
	rsp, err := c.UpdateStatusPageWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStatusPageResponse(rsp)
}

// ListTeamsWithResponse request returning *ListTeamsResponse
func (c *ClientWithResponses) ListTeamsWithResponse(
	ctx context.Context,
	params *ListTeamsParams,
	reqEditors ...RequestEditorFn,
) (*ListTeamsResponse, error) {
	rsp, err := c.ListTeams(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTeamsResponse(rsp)
}

// CreateTeamWithBodyWithResponse request with arbitrary body returning *CreateTeamResponse
func (c *ClientWithResponses) CreateTeamWithBodyWithResponse(
	ctx context.Context,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*CreateTeamResponse, error) {
	rsp, err := c.CreateTeamWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamResponse(rsp)
}

// DeleteTeamWithResponse request returning *DeleteTeamResponse
func (c *ClientWithResponses) DeleteTeamWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*DeleteTeamResponse, error) {
	rsp, err := c.DeleteTeam(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamResponse(rsp)
}

// GetTeamWithResponse request returning *GetTeamResponse
func (c *ClientWithResponses) GetTeamWithResponse(
	ctx context.Context,
	id string,
	reqEditors ...RequestEditorFn,
) (*GetTeamResponse, error) {
	rsp, err := c.GetTeam(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamResponse(rsp)
}

// UpdateTeamWithBodyWithResponse request with arbitrary body returning *UpdateTeamResponse
func (c *ClientWithResponses) UpdateTeamWithBodyWithResponse(
	ctx context.Context,
	id string,
	contentType string,
	body io.Reader,
	reqEditors ...RequestEditorFn,
) (*UpdateTeamResponse, error) {
	rsp, err := c.UpdateTeamWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamResponse(rsp)
}

// ParseDeleteIncidentActionItemResponse parses an HTTP response from a DeleteIncidentActionItemWithResponse call
func ParseDeleteIncidentActionItemResponse(
	rsp *http.Response,
) (*DeleteIncidentActionItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentActionItemsResponse parses an HTTP response from a GetIncidentActionItemsWithResponse call
func ParseGetIncidentActionItemsResponse(
	rsp *http.Response,
) (*GetIncidentActionItemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentActionItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentActionItemResponse parses an HTTP response from a UpdateIncidentActionItemWithResponse call
func ParseUpdateIncidentActionItemResponse(
	rsp *http.Response,
) (*UpdateIncidentActionItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListAlertsResponse parses an HTTP response from a ListAlertsWithResponse call
func ParseListAlertsResponse(rsp *http.Response) (*ListAlertsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetAlertResponse parses an HTTP response from a GetAlertWithResponse call
func ParseGetAlertResponse(rsp *http.Response) (*GetAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListCausesResponse parses an HTTP response from a ListCausesWithResponse call
func ParseListCausesResponse(rsp *http.Response) (*ListCausesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListCausesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateCauseResponse parses an HTTP response from a CreateCauseWithResponse call
func ParseCreateCauseResponse(rsp *http.Response) (*CreateCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteCauseResponse parses an HTTP response from a DeleteCauseWithResponse call
func ParseDeleteCauseResponse(rsp *http.Response) (*DeleteCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCauseResponse parses an HTTP response from a GetCauseWithResponse call
func ParseGetCauseResponse(rsp *http.Response) (*GetCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateCauseResponse parses an HTTP response from a UpdateCauseWithResponse call
func ParseUpdateCauseResponse(rsp *http.Response) (*UpdateCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListEnvironmentsResponse parses an HTTP response from a ListEnvironmentsWithResponse call
func ParseListEnvironmentsResponse(rsp *http.Response) (*ListEnvironmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateEnvironmentResponse parses an HTTP response from a CreateEnvironmentWithResponse call
func ParseCreateEnvironmentResponse(rsp *http.Response) (*CreateEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteEnvironmentResponse parses an HTTP response from a DeleteEnvironmentWithResponse call
func ParseDeleteEnvironmentResponse(rsp *http.Response) (*DeleteEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetEnvironmentResponse parses an HTTP response from a GetEnvironmentWithResponse call
func ParseGetEnvironmentResponse(rsp *http.Response) (*GetEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateEnvironmentResponse parses an HTTP response from a UpdateEnvironmentWithResponse call
func ParseUpdateEnvironmentResponse(rsp *http.Response) (*UpdateEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIncidentEventResponse parses an HTTP response from a DeleteIncidentEventWithResponse call
func ParseDeleteIncidentEventResponse(rsp *http.Response) (*DeleteIncidentEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentEventsResponse parses an HTTP response from a GetIncidentEventsWithResponse call
func ParseGetIncidentEventsResponse(rsp *http.Response) (*GetIncidentEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentEventResponse parses an HTTP response from a UpdateIncidentEventWithResponse call
func ParseUpdateIncidentEventResponse(rsp *http.Response) (*UpdateIncidentEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListFunctionalitiesResponse parses an HTTP response from a ListFunctionalitiesWithResponse call
func ParseListFunctionalitiesResponse(rsp *http.Response) (*ListFunctionalitiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListFunctionalitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateFunctionalityResponse parses an HTTP response from a CreateFunctionalityWithResponse call
func ParseCreateFunctionalityResponse(rsp *http.Response) (*CreateFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteFunctionalityResponse parses an HTTP response from a DeleteFunctionalityWithResponse call
func ParseDeleteFunctionalityResponse(rsp *http.Response) (*DeleteFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetFunctionalityResponse parses an HTTP response from a GetFunctionalityWithResponse call
func ParseGetFunctionalityResponse(rsp *http.Response) (*GetFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateFunctionalityResponse parses an HTTP response from a UpdateFunctionalityWithResponse call
func ParseUpdateFunctionalityResponse(rsp *http.Response) (*UpdateFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentRolesResponse parses an HTTP response from a ListIncidentRolesWithResponse call
func ParseListIncidentRolesResponse(rsp *http.Response) (*ListIncidentRolesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentRoleResponse parses an HTTP response from a CreateIncidentRoleWithResponse call
func ParseCreateIncidentRoleResponse(rsp *http.Response) (*CreateIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIncidentRoleResponse parses an HTTP response from a DeleteIncidentRoleWithResponse call
func ParseDeleteIncidentRoleResponse(rsp *http.Response) (*DeleteIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentRoleResponse parses an HTTP response from a GetIncidentRoleWithResponse call
func ParseGetIncidentRoleResponse(rsp *http.Response) (*GetIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentRoleResponse parses an HTTP response from a UpdateIncidentRoleWithResponse call
func ParseUpdateIncidentRoleResponse(rsp *http.Response) (*UpdateIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIncidentTaskResponse parses an HTTP response from a DeleteIncidentTaskWithResponse call
func ParseDeleteIncidentTaskResponse(rsp *http.Response) (*DeleteIncidentTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentTasksResponse parses an HTTP response from a GetIncidentTasksWithResponse call
func ParseGetIncidentTasksResponse(rsp *http.Response) (*GetIncidentTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentTaskResponse parses an HTTP response from a UpdateIncidentTaskWithResponse call
func ParseUpdateIncidentTaskResponse(rsp *http.Response) (*UpdateIncidentTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentTypesResponse parses an HTTP response from a ListIncidentTypesWithResponse call
func ParseListIncidentTypesResponse(rsp *http.Response) (*ListIncidentTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentTypeResponse parses an HTTP response from a CreateIncidentTypeWithResponse call
func ParseCreateIncidentTypeResponse(rsp *http.Response) (*CreateIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIncidentTypeResponse parses an HTTP response from a DeleteIncidentTypeWithResponse call
func ParseDeleteIncidentTypeResponse(rsp *http.Response) (*DeleteIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentTypeResponse parses an HTTP response from a GetIncidentTypeWithResponse call
func ParseGetIncidentTypeResponse(rsp *http.Response) (*GetIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentTypeResponse parses an HTTP response from a UpdateIncidentTypeWithResponse call
func ParseUpdateIncidentTypeResponse(rsp *http.Response) (*UpdateIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentsResponse parses an HTTP response from a ListIncidentsWithResponse call
func ParseListIncidentsResponse(rsp *http.Response) (*ListIncidentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentResponse parses an HTTP response from a CreateIncidentWithResponse call
func ParseCreateIncidentResponse(rsp *http.Response) (*CreateIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIncidentResponse parses an HTTP response from a DeleteIncidentWithResponse call
func ParseDeleteIncidentResponse(rsp *http.Response) (*DeleteIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentResponse parses an HTTP response from a GetIncidentWithResponse call
func ParseGetIncidentResponse(rsp *http.Response) (*GetIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentResponse parses an HTTP response from a UpdateIncidentWithResponse call
func ParseUpdateIncidentResponse(rsp *http.Response) (*UpdateIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseMitigateIncidentResponse parses an HTTP response from a MitigateIncidentWithResponse call
func ParseMitigateIncidentResponse(rsp *http.Response) (*MitigateIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &MitigateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseResolveIncidentResponse parses an HTTP response from a ResolveIncidentWithResponse call
func ParseResolveIncidentResponse(rsp *http.Response) (*ResolveIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ResolveIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentActionItemsResponse parses an HTTP response from a ListIncidentActionItemsWithResponse call
func ParseListIncidentActionItemsResponse(
	rsp *http.Response,
) (*ListIncidentActionItemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentActionItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentActionItemResponse parses an HTTP response from a CreateIncidentActionItemWithResponse call
func ParseCreateIncidentActionItemResponse(
	rsp *http.Response,
) (*CreateIncidentActionItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListAlertResponse parses an HTTP response from a ListAlertWithResponse call
func ParseListAlertResponse(rsp *http.Response) (*ListAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseAttachAlertResponse parses an HTTP response from a AttachAlertWithResponse call
func ParseAttachAlertResponse(rsp *http.Response) (*AttachAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AttachAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentEventsResponse parses an HTTP response from a ListIncidentEventsWithResponse call
func ParseListIncidentEventsResponse(rsp *http.Response) (*ListIncidentEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentEventResponse parses an HTTP response from a CreateIncidentEventWithResponse call
func ParseCreateIncidentEventResponse(rsp *http.Response) (*CreateIncidentEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentTasksResponse parses an HTTP response from a ListIncidentTasksWithResponse call
func ParseListIncidentTasksResponse(rsp *http.Response) (*ListIncidentTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentTaskResponse parses an HTTP response from a CreateIncidentTaskWithResponse call
func ParseCreateIncidentTaskResponse(rsp *http.Response) (*CreateIncidentTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeletePlaybookTaskResponse parses an HTTP response from a DeletePlaybookTaskWithResponse call
func ParseDeletePlaybookTaskResponse(rsp *http.Response) (*DeletePlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPlaybookTasksResponse parses an HTTP response from a GetPlaybookTasksWithResponse call
func ParseGetPlaybookTasksResponse(rsp *http.Response) (*GetPlaybookTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPlaybookTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdatePlaybookTaskResponse parses an HTTP response from a UpdatePlaybookTaskWithResponse call
func ParseUpdatePlaybookTaskResponse(rsp *http.Response) (*UpdatePlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListPlaybooksResponse parses an HTTP response from a ListPlaybooksWithResponse call
func ParseListPlaybooksResponse(rsp *http.Response) (*ListPlaybooksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListPlaybooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreatePlaybookResponse parses an HTTP response from a CreatePlaybookWithResponse call
func ParseCreatePlaybookResponse(rsp *http.Response) (*CreatePlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeletePlaybookResponse parses an HTTP response from a DeletePlaybookWithResponse call
func ParseDeletePlaybookResponse(rsp *http.Response) (*DeletePlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPlaybookResponse parses an HTTP response from a GetPlaybookWithResponse call
func ParseGetPlaybookResponse(rsp *http.Response) (*GetPlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdatePlaybookResponse parses an HTTP response from a UpdatePlaybookWithResponse call
func ParseUpdatePlaybookResponse(rsp *http.Response) (*UpdatePlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListPlaybookTasksResponse parses an HTTP response from a ListPlaybookTasksWithResponse call
func ParseListPlaybookTasksResponse(rsp *http.Response) (*ListPlaybookTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListPlaybookTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreatePlaybookTaskResponse parses an HTTP response from a CreatePlaybookTaskWithResponse call
func ParseCreatePlaybookTaskResponse(rsp *http.Response) (*CreatePlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListPostmortemTemplatesResponse parses an HTTP response from a ListPostmortemTemplatesWithResponse call
func ParseListPostmortemTemplatesResponse(
	rsp *http.Response,
) (*ListPostmortemTemplatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListPostmortemTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreatePostmortemTemplateResponse parses an HTTP response from a CreatePostmortemTemplateWithResponse call
func ParseCreatePostmortemTemplateResponse(
	rsp *http.Response,
) (*CreatePostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeletePostmortemTemplateResponse parses an HTTP response from a DeletePostmortemTemplateWithResponse call
func ParseDeletePostmortemTemplateResponse(
	rsp *http.Response,
) (*DeletePostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPostmortemTemplateResponse parses an HTTP response from a GetPostmortemTemplateWithResponse call
func ParseGetPostmortemTemplateResponse(
	rsp *http.Response,
) (*GetPostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdatePostmortemTemplateResponse parses an HTTP response from a UpdatePostmortemTemplateWithResponse call
func ParseUpdatePostmortemTemplateResponse(
	rsp *http.Response,
) (*UpdatePostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdatePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentPostmortemResponse parses an HTTP response from a GetIncidentPostmortemWithResponse call
func ParseGetIncidentPostmortemResponse(
	rsp *http.Response,
) (*GetIncidentPostmortemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentPostmortemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentPostmortemResponse parses an HTTP response from a UpdateIncidentPostmortemWithResponse call
func ParseUpdateIncidentPostmortemResponse(
	rsp *http.Response,
) (*UpdateIncidentPostmortemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentPostmortemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListPulsesResponse parses an HTTP response from a ListPulsesWithResponse call
func ParseListPulsesResponse(rsp *http.Response) (*ListPulsesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListPulsesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreatePulseResponse parses an HTTP response from a CreatePulseWithResponse call
func ParseCreatePulseResponse(rsp *http.Response) (*CreatePulseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatePulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPulseResponse parses an HTTP response from a GetPulseWithResponse call
func ParseGetPulseResponse(rsp *http.Response) (*GetPulseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdatePulseResponse parses an HTTP response from a UpdatePulseWithResponse call
func ParseUpdatePulseResponse(rsp *http.Response) (*UpdatePulseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdatePulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListServicesResponse parses an HTTP response from a ListServicesWithResponse call
func ParseListServicesResponse(rsp *http.Response) (*ListServicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateServiceResponse parses an HTTP response from a CreateServiceWithResponse call
func ParseCreateServiceResponse(rsp *http.Response) (*CreateServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteServiceResponse parses an HTTP response from a DeleteServiceWithResponse call
func ParseDeleteServiceResponse(rsp *http.Response) (*DeleteServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetServiceResponse parses an HTTP response from a GetServiceWithResponse call
func ParseGetServiceResponse(rsp *http.Response) (*GetServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateServiceResponse parses an HTTP response from a UpdateServiceWithResponse call
func ParseUpdateServiceResponse(rsp *http.Response) (*UpdateServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListSeveritiesResponse parses an HTTP response from a ListSeveritiesWithResponse call
func ParseListSeveritiesResponse(rsp *http.Response) (*ListSeveritiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSeveritiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateSeverityResponse parses an HTTP response from a CreateSeverityWithResponse call
func ParseCreateSeverityResponse(rsp *http.Response) (*CreateSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteSeverityResponse parses an HTTP response from a DeleteSeverityWithResponse call
func ParseDeleteSeverityResponse(rsp *http.Response) (*DeleteSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSeverityResponse parses an HTTP response from a GetSeverityWithResponse call
func ParseGetSeverityResponse(rsp *http.Response) (*GetSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateSeverityResponse parses an HTTP response from a UpdateSeverityWithResponse call
func ParseUpdateSeverityResponse(rsp *http.Response) (*UpdateSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListStatusPagesResponse parses an HTTP response from a ListStatusPagesWithResponse call
func ParseListStatusPagesResponse(rsp *http.Response) (*ListStatusPagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListStatusPagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateStatusPageResponse parses an HTTP response from a CreateStatusPageWithResponse call
func ParseCreateStatusPageResponse(rsp *http.Response) (*CreateStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteStatusPageResponse parses an HTTP response from a DeleteStatusPageWithResponse call
func ParseDeleteStatusPageResponse(rsp *http.Response) (*DeleteStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetStatusPageResponse parses an HTTP response from a GetStatusPageWithResponse call
func ParseGetStatusPageResponse(rsp *http.Response) (*GetStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateStatusPageResponse parses an HTTP response from a UpdateStatusPageWithResponse call
func ParseUpdateStatusPageResponse(rsp *http.Response) (*UpdateStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListTeamsResponse parses an HTTP response from a ListTeamsWithResponse call
func ParseListTeamsResponse(rsp *http.Response) (*ListTeamsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateTeamResponse parses an HTTP response from a CreateTeamWithResponse call
func ParseCreateTeamResponse(rsp *http.Response) (*CreateTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteTeamResponse parses an HTTP response from a DeleteTeamWithResponse call
func ParseDeleteTeamResponse(rsp *http.Response) (*DeleteTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetTeamResponse parses an HTTP response from a GetTeamWithResponse call
func ParseGetTeamResponse(rsp *http.Response) (*GetTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateTeamResponse parses an HTTP response from a UpdateTeamWithResponse call
func ParseUpdateTeamResponse(rsp *http.Response) (*UpdateTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete a incident action item
	// (DELETE /v1/action_items/{id})
	DeleteIncidentActionItem(ctx echo.Context, id string) error
	// Retrieves a incident action item
	// (GET /v1/action_items/{id})
	GetIncidentActionItems(ctx echo.Context, id string) error
	// Update a incident action item
	// (PUT /v1/action_items/{id})
	UpdateIncidentActionItem(ctx echo.Context, id string) error
	// List alerts
	// (GET /v1/alerts)
	ListAlerts(ctx echo.Context, params ListAlertsParams) error
	// Retrieves a alert
	// (GET /v1/alerts/{id})
	GetAlert(ctx echo.Context, id string) error
	// List causes
	// (GET /v1/causes)
	ListCauses(ctx echo.Context, params ListCausesParams) error
	// Creates a cause
	// (POST /v1/causes)
	CreateCause(ctx echo.Context) error
	// Delete a cause
	// (DELETE /v1/causes/{id})
	DeleteCause(ctx echo.Context, id string) error
	// Retrieves a cause
	// (GET /v1/causes/{id})
	GetCause(ctx echo.Context, id string) error
	// Update a cause
	// (PUT /v1/causes/{id})
	UpdateCause(ctx echo.Context, id string) error
	// List environments
	// (GET /v1/environments)
	ListEnvironments(ctx echo.Context, params ListEnvironmentsParams) error
	// Creates a environment
	// (POST /v1/environments)
	CreateEnvironment(ctx echo.Context) error
	// Delete a environment
	// (DELETE /v1/environments/{id})
	DeleteEnvironment(ctx echo.Context, id string) error
	// Retrieves a environment
	// (GET /v1/environments/{id})
	GetEnvironment(ctx echo.Context, id string) error
	// Update a environment
	// (PUT /v1/environments/{id})
	UpdateEnvironment(ctx echo.Context, id string) error
	// Delete a incident event
	// (DELETE /v1/events/{id})
	DeleteIncidentEvent(ctx echo.Context, id string) error
	// Retrieves a incident event
	// (GET /v1/events/{id})
	GetIncidentEvents(ctx echo.Context, id string) error
	// Update a incident event
	// (PUT /v1/events/{id})
	UpdateIncidentEvent(ctx echo.Context, id string) error
	// List functionalities
	// (GET /v1/functionalities)
	ListFunctionalities(ctx echo.Context, params ListFunctionalitiesParams) error
	// Creates a functionality
	// (POST /v1/functionalities)
	CreateFunctionality(ctx echo.Context) error
	// Delete a functionality
	// (DELETE /v1/functionalities/{id})
	DeleteFunctionality(ctx echo.Context, id string) error
	// Retrieves a functionality
	// (GET /v1/functionalities/{id})
	GetFunctionality(ctx echo.Context, id string) error
	// Update a functionality
	// (PUT /v1/functionalities/{id})
	UpdateFunctionality(ctx echo.Context, id string) error
	// List incident roles
	// (GET /v1/incident_roles)
	ListIncidentRoles(ctx echo.Context, params ListIncidentRolesParams) error
	// Creates a incident role
	// (POST /v1/incident_roles)
	CreateIncidentRole(ctx echo.Context) error
	// Delete a incident role
	// (DELETE /v1/incident_roles/{id})
	DeleteIncidentRole(ctx echo.Context, id string) error
	// Retrieves a incident role
	// (GET /v1/incident_roles/{id})
	GetIncidentRole(ctx echo.Context, id string) error
	// Update a incident role
	// (PUT /v1/incident_roles/{id})
	UpdateIncidentRole(ctx echo.Context, id string) error
	// Delete a incident task
	// (DELETE /v1/incident_tasks/{id})
	DeleteIncidentTask(ctx echo.Context, id string) error
	// Retrieves a incident task
	// (GET /v1/incident_tasks/{id})
	GetIncidentTasks(ctx echo.Context, id string) error
	// Update a incident task
	// (PUT /v1/incident_tasks/{id})
	UpdateIncidentTask(ctx echo.Context, id string) error
	// List incident_types
	// (GET /v1/incident_types)
	ListIncidentTypes(ctx echo.Context, params ListIncidentTypesParams) error
	// Creates a incident_type
	// (POST /v1/incident_types)
	CreateIncidentType(ctx echo.Context) error
	// Delete a incident_type
	// (DELETE /v1/incident_types/{id})
	DeleteIncidentType(ctx echo.Context, id string) error
	// Retrieves a incident_type
	// (GET /v1/incident_types/{id})
	GetIncidentType(ctx echo.Context, id string) error
	// Update a incident_type
	// (PUT /v1/incident_types/{id})
	UpdateIncidentType(ctx echo.Context, id string) error
	// List incidents
	// (GET /v1/incidents)
	ListIncidents(ctx echo.Context, params ListIncidentsParams) error
	// Creates a incident
	// (POST /v1/incidents)
	CreateIncident(ctx echo.Context) error
	// Delete a incident
	// (DELETE /v1/incidents/{id})
	DeleteIncident(ctx echo.Context, id string) error
	// Retrieves a incident
	// (GET /v1/incidents/{id})
	GetIncident(ctx echo.Context, id string) error
	// Update a incident
	// (PUT /v1/incidents/{id})
	UpdateIncident(ctx echo.Context, id string) error
	// Mitigate an incident
	// (PUT /v1/incidents/{id}/mitigate)
	MitigateIncident(ctx echo.Context, id string) error
	// Resolve an incident
	// (PUT /v1/incidents/{id}/resolve)
	ResolveIncident(ctx echo.Context, id string) error
	// List incident action items
	// (GET /v1/incidents/{incident_id}/action_items)
	ListIncidentActionItems(
		ctx echo.Context,
		incidentId string,
		params ListIncidentActionItemsParams,
	) error
	// Creates a incident action item
	// (POST /v1/incidents/{incident_id}/action_items)
	CreateIncidentActionItem(ctx echo.Context, incidentId string) error
	// List alerts
	// (GET /v1/incidents/{incident_id}/alerts)
	ListAlert(ctx echo.Context, incidentId string, params ListAlertParams) error
	// Attach alerts to an incident
	// (POST /v1/incidents/{incident_id}/alerts)
	AttachAlert(ctx echo.Context, incidentId string) error
	// List incident events
	// (GET /v1/incidents/{incident_id}/events)
	ListIncidentEvents(ctx echo.Context, incidentId string, params ListIncidentEventsParams) error
	// Creates a incident event
	// (POST /v1/incidents/{incident_id}/events)
	CreateIncidentEvent(ctx echo.Context, incidentId string) error
	// List incident tasks
	// (GET /v1/incidents/{incident_id}/incident_tasks)
	ListIncidentTasks(ctx echo.Context, incidentId string, params ListIncidentTasksParams) error
	// Creates a incident task
	// (POST /v1/incidents/{incident_id}/incident_tasks)
	CreateIncidentTask(ctx echo.Context, incidentId string) error
	// Delete a playbook task
	// (DELETE /v1/playbook_tasks/{id})
	DeletePlaybookTask(ctx echo.Context, id string) error
	// Retrieves a playbook task
	// (GET /v1/playbook_tasks/{id})
	GetPlaybookTasks(ctx echo.Context, id string) error
	// Update a playbook task
	// (PUT /v1/playbook_tasks/{id})
	UpdatePlaybookTask(ctx echo.Context, id string) error
	// List playbooks
	// (GET /v1/playbooks)
	ListPlaybooks(ctx echo.Context, params ListPlaybooksParams) error
	// Creates a playbook
	// (POST /v1/playbooks)
	CreatePlaybook(ctx echo.Context) error
	// Delete a playbook
	// (DELETE /v1/playbooks/{id})
	DeletePlaybook(ctx echo.Context, id string) error
	// Retrieves a playbook
	// (GET /v1/playbooks/{id})
	GetPlaybook(ctx echo.Context, id string) error
	// Update a playbook
	// (PUT /v1/playbooks/{id})
	UpdatePlaybook(ctx echo.Context, id string) error
	// List playbook tasks
	// (GET /v1/playbooks/{playbook_id}/playbook_tasks)
	ListPlaybookTasks(ctx echo.Context, playbookId string, params ListPlaybookTasksParams) error
	// Creates a playbook task
	// (POST /v1/playbooks/{playbook_id}/playbook_tasks)
	CreatePlaybookTask(ctx echo.Context, playbookId string) error
	// List Postmortem Templates
	// (GET /v1/post_mortem_templates)
	ListPostmortemTemplates(ctx echo.Context, params ListPostmortemTemplatesParams) error
	// Creates a postmortem template
	// (POST /v1/post_mortem_templates)
	CreatePostmortemTemplate(ctx echo.Context) error
	// Delete a Postmortem Template
	// (DELETE /v1/post_mortem_templates/{id})
	DeletePostmortemTemplate(ctx echo.Context, id string) error
	// Retrieves a Postmortem Template
	// (GET /v1/post_mortem_templates/{id})
	GetPostmortemTemplate(ctx echo.Context, id string) error
	// Update a Postmortem Template
	// (PUT /v1/post_mortem_templates/{id})
	UpdatePostmortemTemplate(ctx echo.Context, id string) error
	// Retrieves a incident postmortem
	// (GET /v1/post_mortems/{id})
	GetIncidentPostmortem(ctx echo.Context, id string) error
	// Update a incident postmortem
	// (PUT /v1/post_mortems/{id})
	UpdateIncidentPostmortem(ctx echo.Context, id string) error
	// List pulses
	// (GET /v1/pulses)
	ListPulses(ctx echo.Context, params ListPulsesParams) error
	// Creates a pulse
	// (POST /v1/pulses)
	CreatePulse(ctx echo.Context) error
	// Retrieves a pulse
	// (GET /v1/pulses/{id})
	GetPulse(ctx echo.Context, id string) error
	// Update a pulse
	// (PUT /v1/pulses/{id})
	UpdatePulse(ctx echo.Context, id string) error
	// List services
	// (GET /v1/services)
	ListServices(ctx echo.Context, params ListServicesParams) error
	// Creates a service
	// (POST /v1/services)
	CreateService(ctx echo.Context) error
	// Delete a service
	// (DELETE /v1/services/{id})
	DeleteService(ctx echo.Context, id string) error
	// Retrieves a service
	// (GET /v1/services/{id})
	GetService(ctx echo.Context, id string) error
	// Update a service
	// (PUT /v1/services/{id})
	UpdateService(ctx echo.Context, id string) error
	// List severities
	// (GET /v1/severities)
	ListSeverities(ctx echo.Context, params ListSeveritiesParams) error
	// Creates a severity
	// (POST /v1/severities)
	CreateSeverity(ctx echo.Context) error
	// Delete a severity
	// (DELETE /v1/severities/{id})
	DeleteSeverity(ctx echo.Context, id string) error
	// Retrieves a severity
	// (GET /v1/severities/{id})
	GetSeverity(ctx echo.Context, id string) error
	// Update a severity
	// (PUT /v1/severities/{id})
	UpdateSeverity(ctx echo.Context, id string) error
	// List public status pages
	// (GET /v1/status-pages)
	ListStatusPages(ctx echo.Context, params ListStatusPagesParams) error
	// Creates a public status page
	// (POST /v1/status-pages)
	CreateStatusPage(ctx echo.Context) error
	// Delete a public status page
	// (DELETE /v1/status-pages/{id})
	DeleteStatusPage(ctx echo.Context, id string) error
	// Retrieves a public status page
	// (GET /v1/status-pages/{id})
	GetStatusPage(ctx echo.Context, id string) error
	// Update a public status page
	// (PUT /v1/status-pages/{id})
	UpdateStatusPage(ctx echo.Context, id string) error
	// List teams
	// (GET /v1/teams)
	ListTeams(ctx echo.Context, params ListTeamsParams) error
	// Creates a team
	// (POST /v1/teams)
	CreateTeam(ctx echo.Context) error
	// Delete a team
	// (DELETE /v1/teams/{id})
	DeleteTeam(ctx echo.Context, id string) error
	// Retrieves a team
	// (GET /v1/teams/{id})
	GetTeam(ctx echo.Context, id string) error
	// Update a team
	// (PUT /v1/teams/{id})
	UpdateTeam(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteIncidentActionItem converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentActionItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentActionItem(ctx, id)
	return err
}

// GetIncidentActionItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentActionItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentActionItems(ctx, id)
	return err
}

// UpdateIncidentActionItem converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentActionItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentActionItem(ctx, id)
	return err
}

// ListAlerts converts echo context to params.
func (w *ServerInterfaceWrapper) ListAlerts(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAlertsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[number]",
		ctx.QueryParams(),
		&params.PageNumber,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[number]: %s", err),
		)
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[size]",
		ctx.QueryParams(),
		&params.PageSize,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[size]: %s", err),
		)
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAlerts(ctx, params)
	return err
}

// GetAlert converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlert(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAlert(ctx, id)
	return err
}

// ListCauses converts echo context to params.
func (w *ServerInterfaceWrapper) ListCauses(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCausesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[number]",
		ctx.QueryParams(),
		&params.PageNumber,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[number]: %s", err),
		)
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[size]",
		ctx.QueryParams(),
		&params.PageSize,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[size]: %s", err),
		)
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListCauses(ctx, params)
	return err
}

// CreateCause converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCause(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCause(ctx)
	return err
}

// DeleteCause converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCause(ctx, id)
	return err
}

// GetCause converts echo context to params.
func (w *ServerInterfaceWrapper) GetCause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCause(ctx, id)
	return err
}

// UpdateCause converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCause(ctx, id)
	return err
}

// ListEnvironments converts echo context to params.
func (w *ServerInterfaceWrapper) ListEnvironments(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEnvironmentsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[number]",
		ctx.QueryParams(),
		&params.PageNumber,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[number]: %s", err),
		)
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[size]",
		ctx.QueryParams(),
		&params.PageSize,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[size]: %s", err),
		)
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListEnvironments(ctx, params)
	return err
}

// CreateEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) CreateEnvironment(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateEnvironment(ctx)
	return err
}

// DeleteEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEnvironment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteEnvironment(ctx, id)
	return err
}

// GetEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnvironment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnvironment(ctx, id)
	return err
}

// UpdateEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateEnvironment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateEnvironment(ctx, id)
	return err
}

// DeleteIncidentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentEvent(ctx, id)
	return err
}

// GetIncidentEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentEvents(ctx, id)
	return err
}

// UpdateIncidentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentEvent(ctx, id)
	return err
}

// ListFunctionalities converts echo context to params.
func (w *ServerInterfaceWrapper) ListFunctionalities(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFunctionalitiesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[number]",
		ctx.QueryParams(),
		&params.PageNumber,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[number]: %s", err),
		)
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[size]",
		ctx.QueryParams(),
		&params.PageSize,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[size]: %s", err),
		)
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListFunctionalities(ctx, params)
	return err
}

// CreateFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFunctionality(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateFunctionality(ctx)
	return err
}

// DeleteFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFunctionality(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteFunctionality(ctx, id)
	return err
}

// GetFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) GetFunctionality(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFunctionality(ctx, id)
	return err
}

// UpdateFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateFunctionality(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateFunctionality(ctx, id)
	return err
}

// ListIncidentRoles converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentRoles(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentRolesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[number]",
		ctx.QueryParams(),
		&params.PageNumber,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[number]: %s", err),
		)
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[size]",
		ctx.QueryParams(),
		&params.PageSize,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[size]: %s", err),
		)
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentRoles(ctx, params)
	return err
}

// CreateIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentRole(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentRole(ctx)
	return err
}

// DeleteIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentRole(ctx, id)
	return err
}

// GetIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentRole(ctx, id)
	return err
}

// UpdateIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentRole(ctx, id)
	return err
}

// DeleteIncidentTask converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentTask(ctx, id)
	return err
}

// GetIncidentTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentTasks(ctx, id)
	return err
}

// UpdateIncidentTask converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentTask(ctx, id)
	return err
}

// ListIncidentTypes converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentTypes(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentTypesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[number]",
		ctx.QueryParams(),
		&params.PageNumber,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[number]: %s", err),
		)
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[size]",
		ctx.QueryParams(),
		&params.PageSize,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[size]: %s", err),
		)
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentTypes(ctx, params)
	return err
}

// CreateIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentType(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentType(ctx)
	return err
}

// DeleteIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentType(ctx, id)
	return err
}

// GetIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentType(ctx, id)
	return err
}

// UpdateIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentType(ctx, id)
	return err
}

// ListIncidents converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidents(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[number]",
		ctx.QueryParams(),
		&params.PageNumber,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[number]: %s", err),
		)
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[size]",
		ctx.QueryParams(),
		&params.PageSize,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[size]: %s", err),
		)
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidents(ctx, params)
	return err
}

// CreateIncident converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncident(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncident(ctx)
	return err
}

// DeleteIncident converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncident(ctx, id)
	return err
}

// GetIncident converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncident(ctx, id)
	return err
}

// UpdateIncident converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncident(ctx, id)
	return err
}

// MitigateIncident converts echo context to params.
func (w *ServerInterfaceWrapper) MitigateIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MitigateIncident(ctx, id)
	return err
}

// ResolveIncident converts echo context to params.
func (w *ServerInterfaceWrapper) ResolveIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ResolveIncident(ctx, id)
	return err
}

// ListIncidentActionItems converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentActionItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"incident_id",
		runtime.ParamLocationPath,
		ctx.Param("incident_id"),
		&incidentId,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter incident_id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentActionItemsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[number]",
		ctx.QueryParams(),
		&params.PageNumber,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[number]: %s", err),
		)
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[size]",
		ctx.QueryParams(),
		&params.PageSize,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[size]: %s", err),
		)
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentActionItems(ctx, incidentId, params)
	return err
}

// CreateIncidentActionItem converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentActionItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"incident_id",
		runtime.ParamLocationPath,
		ctx.Param("incident_id"),
		&incidentId,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter incident_id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentActionItem(ctx, incidentId)
	return err
}

// ListAlert converts echo context to params.
func (w *ServerInterfaceWrapper) ListAlert(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"incident_id",
		runtime.ParamLocationPath,
		ctx.Param("incident_id"),
		&incidentId,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter incident_id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAlertParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[number]",
		ctx.QueryParams(),
		&params.PageNumber,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[number]: %s", err),
		)
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[size]",
		ctx.QueryParams(),
		&params.PageSize,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[size]: %s", err),
		)
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAlert(ctx, incidentId, params)
	return err
}

// AttachAlert converts echo context to params.
func (w *ServerInterfaceWrapper) AttachAlert(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"incident_id",
		runtime.ParamLocationPath,
		ctx.Param("incident_id"),
		&incidentId,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter incident_id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AttachAlert(ctx, incidentId)
	return err
}

// ListIncidentEvents converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"incident_id",
		runtime.ParamLocationPath,
		ctx.Param("incident_id"),
		&incidentId,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter incident_id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentEventsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[number]",
		ctx.QueryParams(),
		&params.PageNumber,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[number]: %s", err),
		)
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[size]",
		ctx.QueryParams(),
		&params.PageSize,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[size]: %s", err),
		)
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentEvents(ctx, incidentId, params)
	return err
}

// CreateIncidentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"incident_id",
		runtime.ParamLocationPath,
		ctx.Param("incident_id"),
		&incidentId,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter incident_id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentEvent(ctx, incidentId)
	return err
}

// ListIncidentTasks converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"incident_id",
		runtime.ParamLocationPath,
		ctx.Param("incident_id"),
		&incidentId,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter incident_id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentTasksParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[number]",
		ctx.QueryParams(),
		&params.PageNumber,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[number]: %s", err),
		)
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[size]",
		ctx.QueryParams(),
		&params.PageSize,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[size]: %s", err),
		)
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentTasks(ctx, incidentId, params)
	return err
}

// CreateIncidentTask converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"incident_id",
		runtime.ParamLocationPath,
		ctx.Param("incident_id"),
		&incidentId,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter incident_id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentTask(ctx, incidentId)
	return err
}

// DeletePlaybookTask converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePlaybookTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePlaybookTask(ctx, id)
	return err
}

// GetPlaybookTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlaybookTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlaybookTasks(ctx, id)
	return err
}

// UpdatePlaybookTask converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePlaybookTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePlaybookTask(ctx, id)
	return err
}

// ListPlaybooks converts echo context to params.
func (w *ServerInterfaceWrapper) ListPlaybooks(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPlaybooksParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[number]",
		ctx.QueryParams(),
		&params.PageNumber,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[number]: %s", err),
		)
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[size]",
		ctx.QueryParams(),
		&params.PageSize,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[size]: %s", err),
		)
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPlaybooks(ctx, params)
	return err
}

// CreatePlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePlaybook(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePlaybook(ctx)
	return err
}

// DeletePlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePlaybook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePlaybook(ctx, id)
	return err
}

// GetPlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlaybook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlaybook(ctx, id)
	return err
}

// UpdatePlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePlaybook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePlaybook(ctx, id)
	return err
}

// ListPlaybookTasks converts echo context to params.
func (w *ServerInterfaceWrapper) ListPlaybookTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "playbook_id" -------------
	var playbookId string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"playbook_id",
		runtime.ParamLocationPath,
		ctx.Param("playbook_id"),
		&playbookId,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter playbook_id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPlaybookTasksParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[number]",
		ctx.QueryParams(),
		&params.PageNumber,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[number]: %s", err),
		)
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[size]",
		ctx.QueryParams(),
		&params.PageSize,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[size]: %s", err),
		)
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPlaybookTasks(ctx, playbookId, params)
	return err
}

// CreatePlaybookTask converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePlaybookTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "playbook_id" -------------
	var playbookId string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"playbook_id",
		runtime.ParamLocationPath,
		ctx.Param("playbook_id"),
		&playbookId,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter playbook_id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePlaybookTask(ctx, playbookId)
	return err
}

// ListPostmortemTemplates converts echo context to params.
func (w *ServerInterfaceWrapper) ListPostmortemTemplates(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPostmortemTemplatesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[number]",
		ctx.QueryParams(),
		&params.PageNumber,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[number]: %s", err),
		)
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[size]",
		ctx.QueryParams(),
		&params.PageSize,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[size]: %s", err),
		)
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPostmortemTemplates(ctx, params)
	return err
}

// CreatePostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePostmortemTemplate(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePostmortemTemplate(ctx)
	return err
}

// DeletePostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePostmortemTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePostmortemTemplate(ctx, id)
	return err
}

// GetPostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostmortemTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPostmortemTemplate(ctx, id)
	return err
}

// UpdatePostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePostmortemTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePostmortemTemplate(ctx, id)
	return err
}

// GetIncidentPostmortem converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentPostmortem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentPostmortem(ctx, id)
	return err
}

// UpdateIncidentPostmortem converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentPostmortem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentPostmortem(ctx, id)
	return err
}

// ListPulses converts echo context to params.
func (w *ServerInterfaceWrapper) ListPulses(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPulsesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[number]",
		ctx.QueryParams(),
		&params.PageNumber,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[number]: %s", err),
		)
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[size]",
		ctx.QueryParams(),
		&params.PageSize,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[size]: %s", err),
		)
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPulses(ctx, params)
	return err
}

// CreatePulse converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePulse(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePulse(ctx)
	return err
}

// GetPulse converts echo context to params.
func (w *ServerInterfaceWrapper) GetPulse(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPulse(ctx, id)
	return err
}

// UpdatePulse converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePulse(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePulse(ctx, id)
	return err
}

// ListServices converts echo context to params.
func (w *ServerInterfaceWrapper) ListServices(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListServicesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[number]",
		ctx.QueryParams(),
		&params.PageNumber,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[number]: %s", err),
		)
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[size]",
		ctx.QueryParams(),
		&params.PageSize,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[size]: %s", err),
		)
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListServices(ctx, params)
	return err
}

// CreateService converts echo context to params.
func (w *ServerInterfaceWrapper) CreateService(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateService(ctx)
	return err
}

// DeleteService converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteService(ctx, id)
	return err
}

// GetService converts echo context to params.
func (w *ServerInterfaceWrapper) GetService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetService(ctx, id)
	return err
}

// UpdateService converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateService(ctx, id)
	return err
}

// ListSeverities converts echo context to params.
func (w *ServerInterfaceWrapper) ListSeverities(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSeveritiesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[number]",
		ctx.QueryParams(),
		&params.PageNumber,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[number]: %s", err),
		)
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[size]",
		ctx.QueryParams(),
		&params.PageSize,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[size]: %s", err),
		)
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListSeverities(ctx, params)
	return err
}

// CreateSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSeverity(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSeverity(ctx)
	return err
}

// DeleteSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSeverity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSeverity(ctx, id)
	return err
}

// GetSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) GetSeverity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSeverity(ctx, id)
	return err
}

// UpdateSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSeverity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateSeverity(ctx, id)
	return err
}

// ListStatusPages converts echo context to params.
func (w *ServerInterfaceWrapper) ListStatusPages(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListStatusPagesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[number]",
		ctx.QueryParams(),
		&params.PageNumber,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[number]: %s", err),
		)
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[size]",
		ctx.QueryParams(),
		&params.PageSize,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[size]: %s", err),
		)
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListStatusPages(ctx, params)
	return err
}

// CreateStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) CreateStatusPage(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateStatusPage(ctx)
	return err
}

// DeleteStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteStatusPage(ctx, id)
	return err
}

// GetStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatusPage(ctx, id)
	return err
}

// UpdateStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateStatusPage(ctx, id)
	return err
}

// ListTeams converts echo context to params.
func (w *ServerInterfaceWrapper) ListTeams(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTeamsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[number]",
		ctx.QueryParams(),
		&params.PageNumber,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[number]: %s", err),
		)
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter(
		"form",
		true,
		false,
		"page[size]",
		ctx.QueryParams(),
		&params.PageSize,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter page[size]: %s", err),
		)
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTeams(ctx, params)
	return err
}

// CreateTeam converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTeam(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTeam(ctx)
	return err
}

// DeleteTeam converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTeam(ctx, id)
	return err
}

// GetTeam converts echo context to params.
func (w *ServerInterfaceWrapper) GetTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTeam(ctx, id)
	return err
}

// UpdateTeam converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation(
		"simple",
		false,
		"id",
		runtime.ParamLocationPath,
		ctx.Param("id"),
		&id,
	)
	if err != nil {
		return echo.NewHTTPError(
			http.StatusBadRequest,
			fmt.Sprintf("Invalid format for parameter id: %s", err),
		)
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTeam(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v1/action_items/:id", wrapper.DeleteIncidentActionItem)
	router.GET(baseURL+"/v1/action_items/:id", wrapper.GetIncidentActionItems)
	router.PUT(baseURL+"/v1/action_items/:id", wrapper.UpdateIncidentActionItem)
	router.GET(baseURL+"/v1/alerts", wrapper.ListAlerts)
	router.GET(baseURL+"/v1/alerts/:id", wrapper.GetAlert)
	router.GET(baseURL+"/v1/causes", wrapper.ListCauses)
	router.POST(baseURL+"/v1/causes", wrapper.CreateCause)
	router.DELETE(baseURL+"/v1/causes/:id", wrapper.DeleteCause)
	router.GET(baseURL+"/v1/causes/:id", wrapper.GetCause)
	router.PUT(baseURL+"/v1/causes/:id", wrapper.UpdateCause)
	router.GET(baseURL+"/v1/environments", wrapper.ListEnvironments)
	router.POST(baseURL+"/v1/environments", wrapper.CreateEnvironment)
	router.DELETE(baseURL+"/v1/environments/:id", wrapper.DeleteEnvironment)
	router.GET(baseURL+"/v1/environments/:id", wrapper.GetEnvironment)
	router.PUT(baseURL+"/v1/environments/:id", wrapper.UpdateEnvironment)
	router.DELETE(baseURL+"/v1/events/:id", wrapper.DeleteIncidentEvent)
	router.GET(baseURL+"/v1/events/:id", wrapper.GetIncidentEvents)
	router.PUT(baseURL+"/v1/events/:id", wrapper.UpdateIncidentEvent)
	router.GET(baseURL+"/v1/functionalities", wrapper.ListFunctionalities)
	router.POST(baseURL+"/v1/functionalities", wrapper.CreateFunctionality)
	router.DELETE(baseURL+"/v1/functionalities/:id", wrapper.DeleteFunctionality)
	router.GET(baseURL+"/v1/functionalities/:id", wrapper.GetFunctionality)
	router.PUT(baseURL+"/v1/functionalities/:id", wrapper.UpdateFunctionality)
	router.GET(baseURL+"/v1/incident_roles", wrapper.ListIncidentRoles)
	router.POST(baseURL+"/v1/incident_roles", wrapper.CreateIncidentRole)
	router.DELETE(baseURL+"/v1/incident_roles/:id", wrapper.DeleteIncidentRole)
	router.GET(baseURL+"/v1/incident_roles/:id", wrapper.GetIncidentRole)
	router.PUT(baseURL+"/v1/incident_roles/:id", wrapper.UpdateIncidentRole)
	router.DELETE(baseURL+"/v1/incident_tasks/:id", wrapper.DeleteIncidentTask)
	router.GET(baseURL+"/v1/incident_tasks/:id", wrapper.GetIncidentTasks)
	router.PUT(baseURL+"/v1/incident_tasks/:id", wrapper.UpdateIncidentTask)
	router.GET(baseURL+"/v1/incident_types", wrapper.ListIncidentTypes)
	router.POST(baseURL+"/v1/incident_types", wrapper.CreateIncidentType)
	router.DELETE(baseURL+"/v1/incident_types/:id", wrapper.DeleteIncidentType)
	router.GET(baseURL+"/v1/incident_types/:id", wrapper.GetIncidentType)
	router.PUT(baseURL+"/v1/incident_types/:id", wrapper.UpdateIncidentType)
	router.GET(baseURL+"/v1/incidents", wrapper.ListIncidents)
	router.POST(baseURL+"/v1/incidents", wrapper.CreateIncident)
	router.DELETE(baseURL+"/v1/incidents/:id", wrapper.DeleteIncident)
	router.GET(baseURL+"/v1/incidents/:id", wrapper.GetIncident)
	router.PUT(baseURL+"/v1/incidents/:id", wrapper.UpdateIncident)
	router.PUT(baseURL+"/v1/incidents/:id/mitigate", wrapper.MitigateIncident)
	router.PUT(baseURL+"/v1/incidents/:id/resolve", wrapper.ResolveIncident)
	router.GET(baseURL+"/v1/incidents/:incident_id/action_items", wrapper.ListIncidentActionItems)
	router.POST(baseURL+"/v1/incidents/:incident_id/action_items", wrapper.CreateIncidentActionItem)
	router.GET(baseURL+"/v1/incidents/:incident_id/alerts", wrapper.ListAlert)
	router.POST(baseURL+"/v1/incidents/:incident_id/alerts", wrapper.AttachAlert)
	router.GET(baseURL+"/v1/incidents/:incident_id/events", wrapper.ListIncidentEvents)
	router.POST(baseURL+"/v1/incidents/:incident_id/events", wrapper.CreateIncidentEvent)
	router.GET(baseURL+"/v1/incidents/:incident_id/incident_tasks", wrapper.ListIncidentTasks)
	router.POST(baseURL+"/v1/incidents/:incident_id/incident_tasks", wrapper.CreateIncidentTask)
	router.DELETE(baseURL+"/v1/playbook_tasks/:id", wrapper.DeletePlaybookTask)
	router.GET(baseURL+"/v1/playbook_tasks/:id", wrapper.GetPlaybookTasks)
	router.PUT(baseURL+"/v1/playbook_tasks/:id", wrapper.UpdatePlaybookTask)
	router.GET(baseURL+"/v1/playbooks", wrapper.ListPlaybooks)
	router.POST(baseURL+"/v1/playbooks", wrapper.CreatePlaybook)
	router.DELETE(baseURL+"/v1/playbooks/:id", wrapper.DeletePlaybook)
	router.GET(baseURL+"/v1/playbooks/:id", wrapper.GetPlaybook)
	router.PUT(baseURL+"/v1/playbooks/:id", wrapper.UpdatePlaybook)
	router.GET(baseURL+"/v1/playbooks/:playbook_id/playbook_tasks", wrapper.ListPlaybookTasks)
	router.POST(baseURL+"/v1/playbooks/:playbook_id/playbook_tasks", wrapper.CreatePlaybookTask)
	router.GET(baseURL+"/v1/post_mortem_templates", wrapper.ListPostmortemTemplates)
	router.POST(baseURL+"/v1/post_mortem_templates", wrapper.CreatePostmortemTemplate)
	router.DELETE(baseURL+"/v1/post_mortem_templates/:id", wrapper.DeletePostmortemTemplate)
	router.GET(baseURL+"/v1/post_mortem_templates/:id", wrapper.GetPostmortemTemplate)
	router.PUT(baseURL+"/v1/post_mortem_templates/:id", wrapper.UpdatePostmortemTemplate)
	router.GET(baseURL+"/v1/post_mortems/:id", wrapper.GetIncidentPostmortem)
	router.PUT(baseURL+"/v1/post_mortems/:id", wrapper.UpdateIncidentPostmortem)
	router.GET(baseURL+"/v1/pulses", wrapper.ListPulses)
	router.POST(baseURL+"/v1/pulses", wrapper.CreatePulse)
	router.GET(baseURL+"/v1/pulses/:id", wrapper.GetPulse)
	router.PUT(baseURL+"/v1/pulses/:id", wrapper.UpdatePulse)
	router.GET(baseURL+"/v1/services", wrapper.ListServices)
	router.POST(baseURL+"/v1/services", wrapper.CreateService)
	router.DELETE(baseURL+"/v1/services/:id", wrapper.DeleteService)
	router.GET(baseURL+"/v1/services/:id", wrapper.GetService)
	router.PUT(baseURL+"/v1/services/:id", wrapper.UpdateService)
	router.GET(baseURL+"/v1/severities", wrapper.ListSeverities)
	router.POST(baseURL+"/v1/severities", wrapper.CreateSeverity)
	router.DELETE(baseURL+"/v1/severities/:id", wrapper.DeleteSeverity)
	router.GET(baseURL+"/v1/severities/:id", wrapper.GetSeverity)
	router.PUT(baseURL+"/v1/severities/:id", wrapper.UpdateSeverity)
	router.GET(baseURL+"/v1/status-pages", wrapper.ListStatusPages)
	router.POST(baseURL+"/v1/status-pages", wrapper.CreateStatusPage)
	router.DELETE(baseURL+"/v1/status-pages/:id", wrapper.DeleteStatusPage)
	router.GET(baseURL+"/v1/status-pages/:id", wrapper.GetStatusPage)
	router.PUT(baseURL+"/v1/status-pages/:id", wrapper.UpdateStatusPage)
	router.GET(baseURL+"/v1/teams", wrapper.ListTeams)
	router.POST(baseURL+"/v1/teams", wrapper.CreateTeam)
	router.DELETE(baseURL+"/v1/teams/:id", wrapper.DeleteTeam)
	router.GET(baseURL+"/v1/teams/:id", wrapper.GetTeam)
	router.PUT(baseURL+"/v1/teams/:id", wrapper.UpdateTeam)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9+ZLbOLIv/Cq4Ot9EL6cgc1/qRMeE2672+J5e/HmZG/e0HAqQBCWOKVLmUnZNh9/9",
	"BgCSIiVSolQkRanwx/S4BJAAEolkLr9M/DWxw9U6DHCQxJPbvyaxvcQrRP+JfBwl5B/rKFzjKPEw/dmO",
	"MEqwM0e0zcGxHXnrxAuDye3kJUowCF1A+5CfbibJwxpPbidxEnnBYvLtZoKDey8Kg1U+YvUNd6VWgJIE",
	"2UvsgCQEyRIDNqObiZfgVTZF/w93cvvnX5P/L8Lu5HbyH882y3mWreVZacTJt4/FlELrX9hOyJSyH1AU",
	"oQfyt48s7NMBipGC1PeR5ePJbRKl+GaLJp/ww+5S/hs/EFqQiSdoUUeKe+SnePfBf5Kf9z767WYS4c+p",
	"F2FncvsnHT5/W5v1xTi692xcQ/53WUtXpM9Gakf2OEwju4Ye75cYsLacKPlscJCuCAHWaIEjJ00IGcJ1",
	"vMCBhwlFPDsJo3AdT24mQWj5Zok6m12I09UKRQ8N47LG7YF3XpKunYOnwkdxAljHg1ua0WIzu5vywauM",
	"V0daOs+578U1B9hBCarwdrUZJUnkWWmCj9hmRpbaTfacXYJ8CLzPKQavXx4kK/vhr2Kjace4Zhu3yOc5",
	"+dtuygtqdfi94NMRS2fda5a+NSNK9fztzVsW4XgdBjFu3ranvFt1NK1bho3SOhI+9tNVeaJOWpR+yYnF",
	"pnKz8wHZeXmAVg2yj7Rsv653AUSnc5zQoXMbTugwUpzOxo2k3GZj2vE6hQ7bsiGEzuXuVluhU1Yzd0VP",
	"6IdRnSK5s55zCKny1DsTVdWXjlFglWY4nNg6aI20Og4HiLt9KCpG1zUKsvJWDiHOrmkXWwu4KAqjuOGk",
	"sMY9Z8UOHdxKADo4QZ7fqmucoCSlb9+lnZf4uKZla7GsW/Gmwyz+raaHmwY22WLke8nDONTO6pQ6k+nb",
	"rx2jVK/McTi5XiXN6TLhIIm3pUL5Ae9K9dTqng4h4K9wO9vKeS+wPadeiz2DJCtm00KIlbWAut0hQ5Q8",
	"zGSbkjDzdeaezmPGq7Kl58T1Q/5S7gZev/wu3jtsIZR2hXT9hIrjuYjCdN08j/cYrfocfuM3r479K/29",
	"edB4CvDiFvw1m6x9lLhhtJpNbmeTMP46m9yA2eQeR7EXBrPJLZhNxKlkzibfmrdnw8iZ97mZIJm7u0+a",
	"xPgeR4w7mubAOjyaGQuNZ3cM2lRzoHr/fOfq1THf73x+c0QPzZzQ/vyiKJ8VYLMCdFYtdmUdeWGUqYW7",
	"g+St23uzNUr+bVh6i+XkZrLCjpeS3/3wS31Io9CLayIatK2yJOrUrR0wXGNCPS+Yr6NwEeE4JpuJAhv7",
	"PibfHScM8KOjKg2r7j/IclJspY4/h1Mza0/H6epJW9Jvayl107hO1bN2u4fQQJ/ITh+rlc7xfS+6afHa",
	"9uKKPdKHoLqZ3HuxZ3l+45dj097y2+EFCY4C5JOfvmb/PLiL+QpPko/04TNIRjbpDk5K4/42nhH6xJXL",
	"Qbatg0rAa9rRo+Xd4AeoA0IfQ+IrPy7rME7mqzDqxYpZeYm3OPiGrBd7x0GLJcJx6N8feCXtlLZ9ZbwM",
	"v8wZGmSeI8tqwGfL8AsDl+ziz3YZywpDH6OgeP2W32zurdbIThrHyTFwIO+3IyvIxmX71jgodbgcHIv1",
	"etxI+XwPjbVFhscNmngr7HsBbhiLyUaQ93rUEFX1soE3NopNDLyA4SM7GXyBAy9tGpY15qvtdNwExZ+a",
	"hqVtHQ8XZZG1uuFIW1eLTFB0SChlfQBq5dxq59FonmP+0XEi5JIB16nlezERQx87cKXV0mOkXrXS92hY",
	"Ja78IexAldtP8kZ9rjSLs2p1Q5L+ghW64+ka+nhcgStAp9RZCH77td14XtvOcQTx/cpWn8G9QEnVgQBr",
	"2r9G0UUeuHJjiW7poF+lq9nNoyUl0S9rJOUS25+YdbGr150t6Ebn2iYGmq2pRm9D8aedTcte27/CxsY5",
	"ScqRZ88g5eiUOzgXTSRuPBfMJLpqKUe3dFApdzW7ebyUy2Z2SXD8DbkZRbrWHLPXjlq5Iy3nEHtkQl0c",
	"lAYSNx+Uh/W1K3d0S4cVe9eym23FXrHHVSK6XsQO0s4KyHGux7Xhr0krAbmO8H07sD723cOAfNrrJptx",
	"9vZsNtls69adx0HmzdjVVuzlOB5znr8p9XKRH++k/G9iKvMVjmO0qBHA/wi/gC8orvJSEbL5+2HJ/q3x",
	"WJ/kdemS0wKcRXR6pzRLjK7FcD4nTeC10wt2c4sSm2l8bLErbVOfu96ShsznjrdkvInQdRpIm/1qmzXa",
	"9X7tTRrteNfaK72XkUN66l4fl0bX9Y4fSBYbwUk9T+7Yqbt5dL5M1xs6mMrB7Kh5GMxRjALEKO6i1E+K",
	"B6o78II+AFDm/ArAc/IcQDH4gn0ffO+5wAsSvIioHgNwQHbZ+aF5y3dcgWQytp9ayzD77LSbUADiJIwe",
	"yJRe5E93Pa1FGC58PF9hnBxBqVf0KUCeov/xgkXXE/uXF6FjSOXFcYoJqf63F3W+eb4XYBSdNJ1f6aNd",
	"T6go39R+zwrVOgzAH9njxbS6mtemxNQxtCrN7A15wcs0eSim5oYRiNfY9lwPO6X2DTTJibuafp4KFYRf",
	"Tl1Aliz1e/il6z2PfWR/Onla5OGuZ5RE2PfDI3jQRpFDZvOePtj1dP6NAwfHn046pv/Dnu18SmG4OoI+",
	"/xOGq24FKs8l5bmkA+aSBmHiuQ9zvEJe3bTu6O/gIUzBFxQkZFbsiUcmj/IE1mMSWGtxch/H7URrl+46",
	"hClRK7iZyUANiH7thtrRN9ZBHzPYaOL131CqcLMPaY9qd/3YmXbdy+hl7aaW7JkW0wfNR6PKPCowy5PA",
	"z5QE3pDBfYyMPzKRtTd535DH2rGk7zKtdUw5qUfteNskvt72uh6VPAJf7xWClE91JB+LzOyNWeqBmV1r",
	"gPtwno8DLQ2J1awDWh612S0Bav1tdi0+7aIif+eBqz36mLfE6HS982sfPVhh2P8JP0bEFpPq0EwvvbMr",
	"Mz1/5Rm3bRjpfP0CuELPc+xnKQ0ywau1j5IhNLTM4t1B17IGEGMf02ztfErgyxIHAJMRggVA1azHw0Zu",
	"O0m7eWkxbnfyto7Q59jv1B8AGIUDpwE//YaMD3DgAAclOPEoMtoNoxXpTKaBYfbjkZGJuE1oos47zCjS",
	"jY/+Ou9JirDb5eoi7J66utpHu7kF6tTgwuPZp/19T3Qs8D1e3IJPRvxDy4IBjSUI2FmkPR5/Go9SszKa",
	"defUom88gzjNL/a6bMslX0VnNsvmhR19PYur2s6wwyysd/FbnC2jwz0u3liT47AhWo00yCOlu28qcMiR",
	"l3g29Yi28/Ofzlh07LMgJln0gUKqBsge8Gn1JBTZyzkOFl6A517g4K912QQ+LQxFugLWlX73vMD2UweD",
	"hzCNAC0cY+cBFLIE4AX5QxGOUz+Jp70FoErDttMUaUCs7ppN2gCegZdeTP7Z/u2lFbhhmOBoXhzg3SXQ",
	"pgIATLtPwd1iCmaT/xB/kX5RxNmkzUKWGDlHjMS6FyMJgib+IrUbie3v7hi/oU87RALItnEce5R+uVZE",
	"H29DPVqaKV1TPaO+JFPWeOTL5j6Kk7mDHuK9rwXhPY7AV0A7FgJIFm404cYUPjYOSgOuODrGE1Tlq66c",
	"QSUpcgYZlmC0GqUbiE6ss49d9raOPjqsEN6wm9Xsb31savd4HazjKDlWuPgGS+MuKHJ6zu8+oj7CHX2B",
	"edvF9g2Rsn0FO3esQGoqwMNr7AxVY6eyE8NLqcGrshwbc7lkoTVYjZ3r283WgqxVCO3x8uxyY2ajKKlT",
	"t00DCrs6JnnER77udW0Oy2lRyEuUgHXbPYggfBo73Vo61gecH31NTbl4QY1fb9O6U0N/J2LX0VXHPCx8",
	"hWHhOudhnpfcEWPlwbJWTNVvsPjxMdyx3E5Hpzfg551S4xFSvomapwa6L/GLTbdskE/0xe5W269udnnN",
	"cEVZNhfhHFkHLr9m57LLwDXiQMZdYXU44McoTMAc6jXYZ2Hvp72VqNlD0NMxMhf4cci3bojPw6XvWnuh",
	"1QRtGrvUum4s00hkZVbvYkBhmZHuMeeueR8fg/y6SIGZ7d8wEvPyt6611NyH2hsvzO4sgprD9DhM77pg",
	"euOAFJVk0IDf55Lge4Sc30/dx6EbL/E7XdrKQT7VV7SLbT/Z9SDVc3wRh0CljsJ8IFMbTjRRQpzOzU10",
	"PBW3e4FiiO7XEPLnUreqraxh54JfQDHSyyay7eH3TTzqvokR3y2RbTC/XqLxeolxXyWR7d9ggUteP5vX",
	"zx6wfjYvZX10Keuxxvy3JNWghat51d4Lrdp7CeV5txmbV+htX6F33MV4t3e2BBLv3wwi1l7zd+8FaT7w",
	"1aumsJz+ASzuHt3rIdtcbdpGSuY4tr2v3KDkWsFxl2F2uWg8z7HGDUES1msHkbz7Xd0Owmzp+nNvtUZ2",
	"0jjO5k6mrN/O+alsUcOgzDlzaCzW63Ej5fM9NNYWGR43aOKtsO8FTXEydvBB3utRQ1S/Eg28sZFoMfAC",
	"5kbrZPAFDry0aVjWmK+203FZpl/9sLSt4+Ei5PlNw5G2rha5p1ZbLkGyPgAlLau/tdCimueYf7ScCLn0",
	"GurU8r2YiKGPHWj7tfQ46Vta+o6d+YvKK9wPWuF+1NXst3mDF7Q/qp7yqIvX7+wtr19/cv36Udeqzzaa",
	"l6tvtVNnqky/tUm8OP3pO3dGYcpr0R9fi/4S6s7n28tLz/PS87zGAC89P87S853VmN8ULOhSevJK80dX",
	"mh9pVfliQ3lh+csoLD/aIvI5J/E68jxBjSeo8QS11vLqbCXjM4n11KvGj7BCPP242in5XL6zl3jFaGhh",
	"FOFojtJkSZ2TtIUcFfr7Zm3LJFlPvpGXeIFbc6X+f4B/hF/IoV7gAEfZhfbP37wG/40fZgEEP/743LbD",
	"NEh+/BHMUkGQMfjxx99QQKQC6fYJP8Tlplf5a37HX/L3/PjjLPgP8L/f/fH7Lfnl3RrbnuvZFMExC96G",
	"YeI/AC8GaewFC/Djj3nPH38E35P5x7fPnv0rDgO09qZhtPgBxOU33AIyz+LtXgxQtQNwwwjQeDuwfY8Y",
	"/fEyTH0HEOLjOAHJErFyR8SuioGFgYsTitYII7AKHc/1sHMDUOBkryHqKY42r4nXYZBBO8IY5++Npzsz",
	"c3DsLQIGA1l5gbfy/o2BFSZLypVBurJwxOAo7A10TAqhW5E9IE2ES0ASoSBeeUmCHWDh5AvGQbY29gib",
	"YDwF75deDLDreraHA5tSGdlLD99jB3zxkmWYJsAOV+soXHmU+hFGDmIIrBvg+virl/8RRsDxYptI06zD",
	"1voyXib7WBy0opEoc4hGGsD3P/6I1ms/251n94EzRWvvP8kO//jjD3S38Fd7iYhisqDrnRL+eZ4mSxwk",
	"+aaSZb7NyDQL/g+mo8YJChwUOeAf79+/2X6CfgdIwztqsafJMowI/am6U+zZLKC8bK8jzJia/WmHTva3",
	"nUY+gDBnnld378FsxjpZEesCIfswg+9ehEGCgwS+f1jjW9C07O/2vOF5Ns+M13+m55udNzteowB4zk+z",
	"SRJ+wsFswh7+v398eDt//8d/3/3Ouj0j/VhT3UhkPfkxI0csogdy6oXP7sW85E6cvWlDhuyHgkyT4jM5",
	"yU402fZ7cXKTQ7IntxP651foh4uQ6axJ0X1yM0kjP5NYdCpxjJO4NBv2wzPy8DP2K9QdBSFF0lXJUERb",
	"c5ChSZosKJIuqoIii0iUEXIwlh0Tq5JhmZLlCK6DHdWxbCTiaXzPRHe4xkS8TG4n8lSYklmuUbKkkpZQ",
	"oQzmefaX53xjgtTHCa7zT5PfS1KoFsMIrAdAc9zIl5Fu7munePh19sBz2v8182DnSYB0VpIgMBOS8hcl",
	"ZgNz0a/XV7RaZypM9i3f+nrHTDDNk3BySz6y1boUE0mQRCgoUFDfC/qtqtyKxlSQBSjot4Iw2dLx2fNF",
	"bNAj6xIMA2kmwlDVEYKK7WBoyTKCpoAMQ1FNy1CVSRnSvDH/cqxMjhguvEqTt3iNfR8RERbE+HOKkjQi",
	"Vso99qfVTNj6FZiGlq0gy3Kc6JKDLVvXoKY4AlSQo0JkGAZElmmahuEiVRMnJRWxDhJMv9g0qZJQdl/K",
	"Zd3zm1xP+tWuslbdA4DxoUPWoAjiaVyBoyiMYpojWpCbvGxzqH8PE+CGaUA/imlQiE9n8u1j6wWzYVj6",
	"cc3yyq/NJXJFAaITrKg+f3789rHMEsXhawJ+owVZ5iQ/YYAdMfA6Ryh9hUTGvaOUYQTxUbCgJgX2ffCf",
	"4AURUxsP7WTre/Dy7te793dEzAYAHBCuFbHyN/1nz/mb/rJ4dP8X4O3dm1+fv7ib/3z3/O1dJu6/m3y7",
	"Keb7NrUewH+C31Hi3ePyhLPvNPgujbzvZkHxZ4CTZ2Sq5d/IkYtj/7tZMAvIUn4CH96+/n42OW5Js8kP",
	"5AXkIfAT+B0nt7fkOzwN8Jfv08ifLsM4uQHkX+swSn5gPadpjOdxTMYkun724z2OPPdhvgodDH4Cf6xx",
	"8O7dr7e39D//vHv7+pf/O//9j9/vyHD5jpRGvL1l/JGP/EPR68/ZpELn2eQj+Al8t4/YbAx2WMFPdJen",
	"2du+z/7/h1mwTpMY5N2mRL2aW6HzUN6p38li6naKiLUEZGTL9iQn/mzyw3+RGbA+IT1CMfgJ/EWYZzZZ",
	"4WQZOiwLirHkbHLDmgi1iTHEGis7WPQh+0DaqSjPfkLJkj2yZ5/zISjrxqQ7nQ/5bYu85EV7qDubkOe+",
	"zYJvpVVG+PM2obOF3xRAYfB9hOMf2LDsKXuZBp8Iaf78SN8FyHZMw+D7Gf0Yziblh2nnH/JZs0en6zRe",
	"Zi3/Raf1w/aLcOBU37N5BZ0D2XLwE/g5dV0cTe0wsFHC3hizV7KOoY+nfrj4nnSfJuE7alt+/0Np1Gzo",
	"CH+e4sD5/of/KjPSq7CWjdbI/kTstRXyAvKwtyLbC76fBbNkNnFXCSE2+WcuAfK/vfCZF6aJ55Mf6BEm",
	"C6TvYQsk3YhYuP0JHC8T2OMR/nwD5uQNdF9/x18yrf77EuMS2XADAs//oXho+g/m+3ruON/vMNfNIeYq",
	"3hOXB8+QBS+oJTV9GZJjnPV0sIsjut8/k7154Ycx/p60JWSvspcwYk3fYuQ89/3v897ZK9xVMn0TeUHi",
	"B5RHt39jngS69z/QR76xT+sC18Tp3uIkImZcXKdnVtSDej3zFU52lcyYa5k9aJmbFVyylkl1P65jPmyd",
	"vXOpmZnbgeuYI9QxX+HkaSmYr+7ec+2Sa5cXpl0yrn3SquUaRWiFE5x9lr2A7meynOSBNFaGaxOlYlG3",
	"zYd4Owj28WayTmvU1Q9USTrRJ8oebvCJ0t0kpDhCKWmnSOwrI/HtG4veXYiuPHleInI5upopr5NBFOny",
	"JHL032YCB/VoXdGvQI/OF8w16bJYOJca/ebDudTonWczNoDJ4VAhfY4Ggr/7K1czbv+aUUan1ZBqWZ3o",
	"TyUhwx7J9oI+xaQ47Vba6e2m/MzT35feYkl/ZXzISjGtcTAjDMNNhYOmwpu03lQoM0NmKTRyxONMjOzZ",
	"aaZDziZ/zWYZT80oi8wyviJ/kf/U89aMcMGswl/F4zmP5W/ImCl/pMxrDV0KnsvbKd/lrRnv5W2U/2aU",
	"A5kaeBE21JsPZ7ehqkzHhq7nuew13PDqwfD6EnkJYaDrOodkff2YlWyK8TmtzDV68EPkkFdks2GWJjli",
	"17eThy1rJsuYZZ3Rpsm6rsqcm70y54cnZp9/u2GCnJaQIsp6bSToVy9OsjJTO5YzaXueN9UZ+59TTBOi",
	"Mmt/jRb4TwZD/DipsfMLTDQ5v40viL1/4wOPf3yU8dzOfKE0abRe4pRi2o80WKrEzs2TjMQ9uPW/axZI",
	"dMy/E4L/Tf2Z7dnf1Jc/vfvjt7v569/f3726ezv/5/NfP9zNUkGQtKwj2Zv6bt9deFCga3rwgMI1BRS6",
	"5w4ejODBiCGkEA9kHKcoFfjs9rgZ+mAzUIZ+3nuGxuz37Qvy1JDlwre/KaXBAgOVSx1u//y4KT9B/l0k",
	"U7O/NkdlgSMnpUm45YoAB0ffaEO/pAsvAU7oh2QlMVj7yMYoAXEa297aSw7DYyqvzt36rmJgLOoKlG0V",
	"Q8U1NWgYtg0NVbVVy7ItR7A3bv1MG2vvx2d64T7HPeMHjnipRbyg7DT0r/wekLLXgmapLoarnVendnIE",
	"C1cawTESgKt8Z8GuZGpkdvvZXn9b1qfO3/Yib3pq/jZ2j0AP/raC2LnK8aK4n244fxubBPe39UYPrvhc",
	"keLTA3dw1YmrTkNIIa58tVG+wrhGNXpBnVgxQCDAX9hnG7hRuALrKLz3HEwLvKIdrYk99iK7r7ZPSG+A",
	"v2QXANcCeMUBPXr6VBDlBrQurdpCC9mUfy+UvqxizxIFjo+BncZJuMIRdJHtBYsCSvn3w8638hxy55um",
	"67KlOAq0LVGFimI70HCQBBXTcQRbQIpilYpbZapZe+cbUxL3Od8Y22TU69n99jq4R77nAFo+pXeX281E",
	"kaTTlsJ2/s+JjYLvEmBhYPko+DTpbMJeRojT3IObc19cOt25pv7mj3ctvYOMJ0eLzWXTqwXjZmpXKyTu",
	"OPC1+WLGA6gN44tD1GZE3Af4opxxEtrrwlCwf7zrxRLhuNerwb32f1ouHauas3wn4NQByN0CUMrEAkeU",
	"dgOUYHt6QiE7ppvvq1y3seLOhpXQpqakNOVBpglAaYJX4HMaApR8TvF0Y1i9j5AXeMGijeWk69uWk2Eh",
	"xdIlCeqCaUJF0FSIXEGCuoZV7Ji6ayvWAJYTLwdXVw6uP8PkmIJv2cG7DuDC1mJ4kberK/K2s8PcB899",
	"8IflAC/s1nVht3161yucPBGlqzzGyJQujhWtxYr2p3W1xopylYtDJi4IMsGVLa5sdaxscbjCOeuc7VPd",
	"WO8hgA9ZLbM92IexKItHYR9yreQ40IOqSOPUInltsLraYD1iCj4Mr0RybMHlK7sXWLWLYwz6q7R1jObO",
	"sQYca3B9WIOuK2KNA3TAq1h1iDmo1ijYl1tX6VmXYXdX7fDU8uxK9Okj226L/LnWXSH6oJl35Qnx/Lue",
	"qcJdylfkUu6NR7hrmrumh5NI3MXdUUZeaYfa5+WVPvwDZOeVpjhEjl7ohxGZzi8/3ynPhcmhOzYEc2oY",
	"TVl7dyhOwIuQ/PclSpCNg4TexJ+pkGkMMYoTKB52UZdHyV3UjoRMVcEWtB0sQEWXbWhKKoaiItuCKTi6",
	"rqGNi7qixLV3VJdVy33u6jIj8Uy9i8zUw5Vj3ZeW3z5rr8yxo/Wvlyf5aC/7zYzJnxG63qvr5Ml9j3C8",
	"V0jZj0OLdmGsxPP/9tlA3DN/NZ75URyrS3feV89GJ577cewLzyg8o3f/hLzCsj2xL7tw2xbtEcGUW4YC",
	"slVFbWMZ6kYTpoleX5cGCXC8ReDFsbcKY+Ct43QF7kM/XScoLgHiHXyP/XCdLfLAtYjCVBPMLVNRNE3X",
	"VUQDioIsQEU1ZGg6kgod29IV3UKi6+hnMRV5amJdauIwltgxaYqV03wdyPnaJfGUxatLWWzYZx6w4AGL",
	"tjKBpy92nb54WL17hROu2+0bdvS6Hc+ArM2AHEa5a50NyTU7DmO5aBgL1+m4TteLTschJOfMkjysIbJn",
	"hgOjZBmTB/Eo49VMa/Eo4C1eEKEhngJMEYWpbFyMt5FnU9ZlUw6E+/hwLoWU4z+egE59gQmYHAdy1hzN",
	"420IjgfheJAnjAfpOqXzYoAhPOuzS1zI/YmIkLygC6Bv2AsKeZ11vbsfIHSw1xyT5Kmhq5truumEbidv",
	"cZSugI9SBwWJl67A59RDeXQgwavp5GaSr3dObSrkCrKriApEmoahIssyRBIyoaO4mipJSMCicdBak9Sp",
	"LGjFbO692LM8n1oLNGM1CpBfWHG2aZu6YxhQM20NKoKsQiSqArRk03WxIFi2Y2ysuGK2bH+PMOSqT+61",
	"5apdOXikFjxSPScliy4/FeDu/iwQkvtrCjHcc9jIlcNG7nlwgQcXDurH9xwq0jNUZOuj34gWqSh9Mdf6",
	"mmZz6Vofh5XUwkqGVPvag0u4zscBJRcBKOHaHtf2+tD2OIjknCCSVj5D9tiuz7B3JElVsTl7Ee4GrZUS",
	"pIBO9KOhKlOzBFq5dA2Vw0zqYCZDKqjtwSb3lwEz2WLjWqQJbdrGk2zOUvYedppGAyu554CSzgAl20yy",
	"L6bKmKUhYlpims27M8bhwJFjbAUOGbkkyMigB+jioSH3fYBCht0CDv4YFvyRn3rke4mHD1T93u5cV/j7",
	"l50+T632d5lKD31U/97dhlxx3yb+oDXAt6bFy4D3Txju8b4ij3efbMKd59x5Pqhc4n74juqBV7SJ9hXB",
	"y5rAwwA1wSvTHLIq+Av1F+HF4argojSVFaMhC/NDjKMYxMsw9R1gYYAsH4MkBMhxgJfgVUz+sFGUbBTO",
	"5zVN69TyPXteeTeV9pPYT4kcQI4D6UMwCSF5CEqOgJEjuBDrmgEV3TGgobkYmobqaKYpGLKiH075LK8t",
	"d8orFkKSaChQMy0FKqYmQFPVZCjrCBkC0mzTLaV8bquU7Z3yVW13n0++ysm8JPlFliR3t+RKj5ZH+7rk",
	"W9w72pjB1jyv5A7QnVXxWuSPCBlsU5PfBtpHxfGak8gjBlcRMRjw/Fx6vGDnEHQSLxhyA3gN8fOGC05I",
	"Gq1aAftyRndN2AGK+rQ3JyVNaDAnX3p2goCdrj3HS1CCwecUkeWBlRd4K1QqNfkSxzhihSnjxKPLBRFe",
	"Y9/HgZPGW5kIB+1LJ3sd3LwOll4HN687bFPKU8Hcvt8K20jGCnYhwpYNFVfVoUH+VDVLt3XBsC1FO6dN",
	"ydNP69JPBzTZjsk+3RYl15GS0LQqno96dfmozVvNoy082nKEZOAZql1nqLZRMl/hhGuY59Qwywu8FA2T",
	"p7rWproOqGK2znTl+iVHAl0HEohrllyz7Euz5Cicc2bDttFT2VND4nmyZNgWkJ7xashNkB57ie1PYVpC",
	"8rzY/DKw+mtoxoWpvzyPti6PdkhMzIczar8cG3ON6voFptVyjMwASbUnGSEcK8OxMk8BK9N1ku3IQDM8",
	"xbZDzEyRQB2F/qEM26IkC+tbl2CbF2d5m/V4aum1FXL2kV67swc7ZXEY6QdNrq0yEc+t7Z0u3KF+RQ71",
	"HrmEe+S5R35IqcRd+h0l1lY+8+0Ta8vq1wB5tRVOGiKvdq/LXRanhtmURfvbA6hoSKDcfDPBAbL8Tfgk",
	"0yy3H5qU1bGdN+ZNh5zrlXnmznXNdnVddTUoYtWEiiqr0NQkDUqCJFuipYmKVFemkmmBJ1SppPppqyKV",
	"lAN5QuxFJsRWxEivxkL7fNgq746/hCadZmuPf7YLlxUI2F4rz5HtoqwmI+apzrKckXgG7aNNKh4UuL6S",
	"m+c+XJceMtg+Id1W4zz77vDc27PGER5xXyuzN9pc11oYuee6AYEYcqJUb3AyZFa9Wfku9NMEgaVHju1X",
	"b4UBUTDKxiV7+oAZKU01Vd8yI11XckVLl6EjaSpUHFOHpol1KJuGoiqWJjiqekYzkufA7r2CtXcr7ZgU",
	"2K0TfR0ZCg2L4gmwV5cA27jTPCbCYyLt5QJPf+3tgtY9il7pftanruWR0eXL0vJ4Hur+K1d7V/Nap6Fy",
	"HY9jZq4AM8O1O67d9aTdcbzKGC5k3acrVu9jHQD5sn0dazP4ZSRa6i5U5eWmGXwormptB4IpPbAHDPOO",
	"NZU6H/RmKqJ2WXouTzjde3Fr/5iTD+dTczn25Mlo65d8tSvHoJwrQ/UUC4VjUTgW5cljUXq7IvYSQCk8",
	"t7UPTEqC4k+PwaQA8oJWmJT3KP7Ud7Riie1PxEpzkR/jQ3WIZH0qNtYhuosT8DlFK4ATEHsBjU6QpU5u",
	"CXOUym+CcBV4MUAp7XLAkjOmgrltyWmybYmupUJBxhgqmq1DpCEXyrqj6qqqWwqSaiw5unGnWHLkwXaW",
	"HN1ajkvZi0tJGFfvWHLv6facC5fCTvWVxSyqi+K4lOvFpWzvNI9c8MhFe7nAcSm94VL2KHslXAr79j1x",
	"Va884oWoehycsh+c0ruudzw4hSt6HJxykeAUruJxFa9PFY+DU8YATtnnHayCUwrv4HDgFPo5HwCc0p2m",
	"+p455DYAlbSAkGQKK+2RtgWW6FNjJ01u5DoqB5bsBZb0rqIeDyzpTkUdBlhC51sLLCEtbREkN7P84M+Y",
	"YB0ZpGS0OvYlQ0oY6+wLo1IWOilOSrvkLDXbMBUHkhxnTXAgyUUCSc5ztK4GPlJvQHUFHznT5nDQyLlA",
	"Iw/rtgXRs777CqK/z3o82YLoZPQ+C6IXe7BrFtCG8xREp5PiBdF7pwv3n1+l/7xzLuEeeO6BH1IqcR9+",
	"xwXR6R4dXxCd6ABDFkSnutYABdHzW0kFRf/5F+PgraSyOdVVpcHx/nO6ADZKY+wA6wEgsExXKNholT+n",
	"C/JHmJCvI14hzyc6FFHIfGR/mttLFAQ4/+2AT748jdwnjxQV6a5tQ10zNKgImg4NjByo2Vg3RFe0VUup",
	"88lT7e4UnzxRSNv55AnL8QroF10BnZ3IPq2DEyqgU969gGABmeaj7zy9mTFxNeYc1GylvP55J4ECSsx+",
	"LgtkDjPKTrz6+X77iQcKrjBQcNajdT0BA3Y+Oo4TnHdveOXzswYMHlP5nNoZrbJMc2u2R0DX8ZalpqlN",
	"9YdY/UuU5RbYYRSl68SbbozLu682Xidp5IHPqQcSTAQEAjiMp13ZnIowVaXtW7cMydAdRTChKskGVHRd",
	"hoZj2xA7pmhLrqRhRz6jzcnTUvelpfZv0p2WlkrFwLVlK1QWxdNSrzgtdWunecSER0zaywWeltpfWmqz",
	"dlhOS+Wq4SnhiM0EL0Q15Gmse9NY+9cNT0hj5Yohh+FcLAyHq4RcJexJJeQQmFHUWN+jYG6lsfYPptlJ",
	"Y23E04xYtcWOl67Am8gLqSJTbOUbsUOnpizIl6W58uTWfcmtA+BUPpxPceV4lSeifV90givHrZw50bW9",
	"vcHxKxy/8sTxK/0lvI4eyMITX3vAsbTMed2f7vqkU117zHKtS3A9U24rT2vtlSTclX6FrnSezMr98AMp",
	"hzyPddR5rMensA6YvjpE5upev7qiTE1Tb/Cr/58lSoAdpr4DvARY+O/06tJ7LwqDVTa1wo+vWo5lHPbj",
	"K8rU0MXSeBR3SzuzS/qrM3iDIxdHOHC8GASspvrn1EPTSZ7K6oiqJCoaVBVRhYomidAyNQPqquti21Fs",
	"TSIyoziqcztMycSFQq918D32w/WK7XvLWEHsp4vqs1A0McKuakCHFrrUFQSRqFpQFHRLRoaliQ4trInR",
	"ak6mrqgHQw5lUn27mfjIohP4a7L2UeKG0WpyO/niBU74hSir9ziKGdHEqSiRB1Ze4i0o18xXOI7RAudE",
	"XqeW79nzCq0rLZlzn/0W4Tj007r3xJhoPMnDKREdujy9NSe8SFefU0wYwE79NQKr0Mdx4iFc8IJhaKJl",
	"KgjKlqxAxTIkiBwJQxPLqmppsm0bzn5eeHf3z6aAUbHQyYoGmyZ7GSPG9yKUZNM2DVGDmixiqIgWhqbu",
	"ihDJpu7KuoMwMk7giFKF1Wy0cAmDEMYhUay8YAG9GFoRTWu+2QRt4gRFWW3XLHDzxxIE4f8C7/LngBeD",
	"4jlm17GNODipsgRJYxzR5cjqpgasYcsKlqHl6i5UXMGEhu3oUFIUZGJJN0zZoDLXp8waL701ZXNElY65",
	"l+BVvJFvf5IPAL7P7efsx7/YUA6WVcd2ySiaAxVHNCEyRBvarqxZriMiW6qLyGWvo9+WXNlBvpd4eHvg",
	"RRSm6+0fi/eQ79J8FUYJXm26ECJSOzS69+ytF37bmUs8YS/0Uwc7dGGPEOd0XeTwoOgBvEtQ9AlkfACS",
	"pRcX38jSsZgfs2UHOEOdCuJmMvde7Fmez04R/prgKEB+EUvtYOeOvYO6RSCVFyOoLiWb8OVUI+jLi3N8",
	"DYLxlx9oKFNMtvyIUG5JQZx7zs7N2dmHtKap8tmdTW7/3LR+pE9S+Tn3nJrGstB+qO/C1Ceypm83MybH",
	"6zuyIz8Pgzn9ws/yUuvlFmLIRU6aPNS2hut4gQMP1zb+y4tQbQOKUVDfkkTY98PaJt8LMIpqm2w/tZZh",
	"GtdP4984cHBcv7qc1EH4pf7ZMFzVNizCcOHj+QrjJG8fVxyfl5zoJnR/oDwrFRmnh6u2REjTPcElUdLQ",
	"pSpSZvSsV3p9zN60ES2NnXZFTGPXTNTMMmEzK4ubxoe2xc5sc8Jm9aKnqUchfpo6UBHU1MjEUFNrJoqa",
	"mjNx1NS8EUlNPXKx1NReFk2N7yDiqamxLKJmJSHF65jkGgCHgFwVBISLai6qr01UXwuuqOuSOPys87N+",
	"dWed11k6Fz7tESWWWlVX6jt9fr+rXC5l9Gy7IX9HSRoDnPkR0yABPrLCiAabmiKgSFdUUTwc95Knkmm0",
	"jns9t0BMLAUQhEE19qlKqoMNS4KqJOlQwa4JkYw0KEmmrDmCrLimVRfvEjuPfcqKjLHgYCgZrggVrBjQ",
	"IDPRXck0TFFRNFeqRLqMg6GDMpHKsc/xhzWlqa5Krbf3tQMcMkK6Yv+PaZTz3ktKgU1ZUmRHkTSIVVWD",
	"imsr0BJ0CxqyalqmiTXdOLDR7+7+KXUV2JQg1gQsaboKRUU2oKKqJjQM1YSaJruiZlmaoiiV7dYPbneZ",
	"aJvAJkbQDqN1GHkxJHYS/pymQZJGMEhXn1O02h/fvEMgfxqUnwbZ09Pjwpzq1FDMmjCnnkewTAu7kmgJ",
	"ULElGyo6MiByHAwd11B1w1SQRZ98VJhzHAHKnmJtvAjbviJsfUWyTim9dm3FNXjBtSdQcI0X1uCA3nZe",
	"GV5mbYAya4crrHHzkJuH3Dzk5uFFmIdVcXEm8zBDwcquaWiKqEDJsh2oaIICDdFwoeTKLrYsWxSwvQdL",
	"eZO9xtUdGZuKBrGGBahgLEJLFx2ombqkmciUNGxeNZi2uqc5mLYdgrbldh/mKt1oiaB9/K4fSRxFFneI",
	"8y4jDi22s0QxsDAOQIwTkIQAPF9Hng9UAAF5B3j+W29kK8+tQjYv2CJbB1zehzOElx3dW3Z0qOxs7grh",
	"edFXlRfNnSDcCdK9E4TnJI+hsGirmqLD1hMdopTo6X6c7QRngBbIC/7OvTjci8O9OBfhxWlOYmZn+dgY",
	"vyaI3InDnTjcicOdOB04cXgF7n0VuHvLzf5wFh/OU8jRHiYJe2Q5w7zs91PMHT539gmvUX6Mw5LnpvLc",
	"1OsWBVeT89hXGXXOTEcwE6/5fs6cumeZe5MaeIMFDn7LBj0idJA/MlDwICfLhYQPOAz0sgIIk7eY+v1o",
	"EWALxRi43lfsAC/5XxMeWHjKgYVc8PQIENWmosRjC+OLLfTk+t1wFHf+VnSPYMz+30IDuVBH8O5Xb8SX",
	"KtaQnXtY+/ew1vAIvyHxoPexxKLcDfmk3JDtz8v1uehKXD+gr+4IinM/1ln9WNQKvh/WjfWWjXmEFyt7",
	"YiAnVkYT7sPiPqwRg2D3+8K4D+vyfFiZ3OnVhSVrAndh9e3CyqZma8gVDdmCuuwYULEcA1quY0Jd0LBm",
	"m6JlW27N1EqvzC/APbMrrGBM7gkrqy/jdoRlm3ahfrDdL95l+MEyqnM3WP9usBoW4W6ww26wgkO5F+xJ",
	"ecHaH5cr9IIVTD+gE+wIgnMn2PmcYJvEp2/Pts2Y2qJ4v3pxsnFYsUcAe2Tbb0W65grhc9rxddavztn2",
	"OcXRw8bbtkYL/Ce7kvzjpMbP5gUJXuCIaK97XhB7/8YHHv/4KN/WkQZHicSNSnqc2jaO4yP18r37sq2e",
	"A7YdgO1HD3VnvmspnjbsR+RUmQE7vJX+u2sqbTMIxXjtnKutnTMQ//DiPLw4zzgkGa/+0031n1KK/LFh",
	"0DCuUSQ3l10H+EtZYQFuFK7AOgrvPYdl8aMd1ZI9vKtc9hwbDfCXeZ0uVx8jFbuMkaI49hYBduZJmIc7",
	"9sexRGMqakZT2HSL5OXW7XIIgmEgzUQYqjpCULEdDC1ZRtAUkGEoqmkZqkJ0+sgLdwJRuaubKD2Tsrq6",
	"PYG85VAQp7KqPG6jSVixRRdDZFoaVGwZQ4QEA0qGKgm2q9lYqbt8v2LvnBA9KCvzbSIJ5Qf4zfzVpRSc",
	"cTl385f5dwgb64Q7+w98Z0cfHakc0dpISbZBRxSPyOUU/X3pLZasMgQ9P/Q3IqvobzuX3tNvXd2d9zsN",
	"xZX3Oy3Fjfc7LeUL73cat+67H2MEqJnP+K31nQSEqqdhn/M1PxWn5wsXpyRvpyelSAJmpyVvoycmb6u5",
	"EJRxc8N9oDWNpetAa1pLt4HWtFYvA63psHMXKL89ve0p5jGzK4uZcYnSn0S5rjjiPrHQaVSRs2SPLMnv",
	"oh5LqNXHUXIgyJr1qYuqPidNTzCOSknSR+C0oHVuxT9nP4wnNErnw4OiZ6EVD4c+lXBo95zDA6E8EHpu",
	"6cVDoOMMgT5PEmQvM+UDJGE5qaJNFJQ9nyuDfQc+6TR7yAY9siK+IE8NuVQRP3Aq2XmlpM8s8y1PSWTZ",
	"cnkyEf1rIw8WOHLS5IHFLKPWo2/UyF/ShZewFEDPSmOw9pGNUQLiNLa9tZdMD4Y2K68uKsMrBsairkDZ",
	"VjFUXFODhmHb0FBVW7Us23KEUp5YpsYSjvO94BOlputFhPeoMLp99uzLly/TbAumdriqSiNTskTBMkzo",
	"2gKCimY40DJlAyLsmBJSNCwIeqOAEmvlkUjI5KOzTyHAXwseWUf4flPuzHfPOrX2gef91g9tvcqw8lHm",
	"3D6Z2ot911FYls13rAFZNr3aCCzjysuogl9Hcx6cfFRwMiPiPkfthkOuoFD8sOG34tjxwNtVBN66OS1X",
	"HVrKWL6ToFJH5OZhk5GETTbVNFrkpmWd92Wl3eVdnmxCGiVSr6loxTbsACQz6o8mxsJmymMsZ6EVj7E8",
	"kRhLD5zDYyw8xnJu6cVjLJeQZkY3/vgEM6qpDJlbxq6y7T+rbH+oRVKmsqju3K/7O/4CcopUU8WQK8iu",
	"IioQaRqGiizLEEnIhI7iaqokIQGLxsE4yNao+y8ctrFuyyrC0FQsDBXdcaGhKQrEumRqomRZuqbsKYB3",
	"fNIXU5hbpXsxZuOJXtWlMCa6oDQvfF9f465D+6WbGAJj6vEndbF51gYTaNN2xtZGAmTvYTJgnHXw6raE",
	"hxi6yX/KqLnPnccYqAHvXWKkzbszZrq8anmDRiI2Z5ZHIq4rBWiIQ3XNAYv8ZHSbBTPIrvC4xkjiGsUf",
	"CYo/tY1vsL77whvvsx5PNrpBSNRrcCPfgx3bgJF+NKGNKoPxEMdZacZDHU8k1NEjB/GQBw95jEWa8dDH",
	"JYQ+yL4fH/kgesyQgQ8yyyHiHktsfyLEpcnxh0rpyfpUMqU9pfQobas19OhCNq0Hox6VMfLohiiJMhJN",
	"CUquIEJFtVxoSUiCWBEcSXaxqFpiTXSDaaUnBDeovtwqtkFXzEMblaWwLb+gyEbGmP0ZL93ENap8Pf74",
	"Bp1mbXiDtBxRqi6TUlmJj/FHO7YpwKMeXUQ9GDH3eQIpW51eBidns9mG0XgcpCWL83jItcVDznPcrjlC",
	"sn1muo2UnGm/eOxk4NjJ2kcPVhh+YhtO7+9mJq+PE7xr/L6kv5dv2c5fwKy1+qu22VNvsp6F8Xu2q6/1",
	"qWGoDYbnP70EYfA59WIQe0FCjmxICL4xPl8HwPP9ECALJDjASRodrkKgGFPd2K5CYOmy4EqqALFjGlAx",
	"NAEagoEgkhRJMHQsOAba2KHVnTrCDq08uNcOrfQE2R3N/ILWhzLjV/i9ZObl3N2dmffy7te793ftDL2t",
	"Y5zfUXfZYaSGRY3IAmJc8bRiPYwtu7UNGneaB2R4QKa9XDisPRbM+6SjJrUwmLc4iTx8T32ZO9rdfI92",
	"9wonZdUufnK6XXnIC9HtqMbFNbuHLb4fTrnbBiBxzW5cmh2H8HCdjut0F6HTcRhMGxjM8eiXtEZJ/EA1",
	"oWP9f+ypHf9ff+AXprDNK0zVQ43VDlXT91tYF5DpnBvVlPbY/HrQ36iqF+ZvzNfGtdLyQRtOJX3z4Xwq",
	"aa8Qkup8Hw0hGQdiZPwq9Jv04tAhW5zST/jzwoAgH0ZgF3DQxyWBPoY7RZeO7zhg9TwSzDHgPrTAbXzg",
	"sI3uYRsHslo33eoSWt+UWp9aMmtxNnrIYy1TfVtdHzh7tZgKT07tkyTccX2FjmueWsq93gPpfzxzdHiX",
	"eYvkzsL31jrBM//MD5DcmU/u7PUsVWGqqlrN5V3vl14MPIonyX7buGH/EX4BSQiWKHB8DOw0TsIVjqCL",
	"bC9YFLl0fz/o6K4MXiR4qq6pyliBgquZUNEFASLFcKCsK4IliIqqiXjX0X2Sj7uNe5tndG5ldLIJjz+l",
	"c705zb3o8e0TOQseHb2TvcG/TrZ828GeXzU/Xuc6z7bsxp9+wPlEmaPB+5QzycX70TtPqKycOO46vyrX",
	"eX8H5lpc5nHHTvIeKc6TGs/lHX9MPmObVMazQt1VYaroNXYXu4E3twruUJSuANEmUJqVWEyDFvcmV96e",
	"G1aqYSmuIdlQkxGGiina0ECyA13BsRTkaLpmKEMaVjxFcV+KYl9myymJideGXOfpiE8gHZGj1rn/vp0y",
	"ypMQB0hCPJx/yPWx8+pjPK1wb1rhUHgQro1xJMZVITG4Hsb1sO71MI6CGEXiYJucwWHzBc+eKtikSh4B",
	"qcg1lWOwFOJU0JSRq5g8S3BflmBvSIUPZ9EwOWLhKjThC84E5MiF/jIAefIfRzA8ZQRDX/l+54Uy8Dy/",
	"fpAMhZrsOd+2EkfbJQHuudpyu37fk80G7Otqy509GK6y3HftBFGJvf6mv9xiMJ49eFaacaf2tTq1h+Mg",
	"7jfnfvOxSDPumu/ENV/asPNfbTlgdb9y9uNgV1vuL+1nTAXR7Pcqy8oYuXfeFETFEiUNCoLqQMXCIjSQ",
	"LUDXcTVH1JFjGuoZS/rxxMeLvMpywJqDx2dAHvxU8TqE4zSIeC4lr014MTmVLbiZhyx4vcInWq+wzfG4",
	"whKGPEuz09hGGCfzVRgleDVP8Grto8zWag5lkO82ewK8L56oDWgUHcv9nlxYo4bCfUQ3GralMBvqmoeN",
	"dNSxGg9qDEUeHr+4pvhF78zCQxU8VHEGGcWjEh2VTaz53h8RR9jR3IaIJtQw1/nrKkpT01RKQQXKD5Nb",
	"F/kxLvTN3x7q6H0Y619+eR5NUAxNtG1Jgroo2VARsQNNQzOhYmma5sqOLlp6KZpQq78fEVSo0073xhZq",
	"HuAhhupSGFdcQIhhw7PJhmf7thiOCDfUMfd4Iwt1s60NMGTq31aAgUqWGYscjySsUL8iHkF4TAShlqb7",
	"fGqUWxp9aoxrZhu+edqhg6YzyKME1xEl6P/0XHx4oP4IdBMJGID8PAQwhhDACUUb6yzOvfUb643Ms6V7",
	"S1NTVA9Zes/jNY68MMIx+JyiGCDHW3ux7QEUx+kKBw5qUUVInpqisGX2yQ5CNtIxdJHkQEV3dGjKpgst",
	"3dJ01dQl2xTOaPbVbS4v/FhX+LHeEdC3UXVUOcjaA38lxYj2ro2Xiby+MpEHNpzHMXgc42gpwctHdl0+",
	"sr1y+AonT1czLI90wZohL0FZW4LyPKph+8KUXC/k2JgrxcZwjZBrhP1qhByXcs5Clu31y6ym5dAIl7y6",
	"ZWuQy+gU3HqQC/iQ1YJs4fXUhCvQbXnty7ral+dRbdtXxOxNteWQkuvUwy+xXCaHlvRYL/N0q4JDTDjE",
	"5PohJp0X0hwH1oRX0uwHarJBmLQPIuRV9MtWVHMU4XXWe6N8njWKIJlTw9hcJ1CshdpBoo4E2RUEKMo6",
	"hoqsO9BEhgQVwTIlxdFsw1QnN5OVl3iLYgx2p1WE49C/r/wUL8Mv81y4It9LPBzPvdUa2UnJ6iadFlGY",
	"rhvaYhzde3bTk4m3wr4X4Nof54gOPffIRtf3WODASxva4gRFEXbmYeA/FFZotUtWcrXu6SRCnl80JSiq",
	"0qu4AywBAY5tLw0SsEaRh5I0Aj5KHRQkXro6HKypbGhu0DqKZmiqgCHWVAcqti5ApLgYKpJqq8i1FcF0",
	"NgZtHUMfY9DWPb/XoK09QTxaUxutyWlVSpMombS5dClZvmeL1lxhkIbHZq49NsNDMjwk09bK4JGYy4nE",
	"VD6b+5V09nCDnt57KKZOFzp7KOZqrYRaLf4CzIRS6CJtGemShaloyldgGPBQV12o6zx2wSmhrguIcNUy",
	"+hF3wVGWor86EXKT/MfsMG93L0vG7baShNwZpSw4Mgfi9s9MnjQ1MjHW+Cgr1lffWJaRW312ZO9We5Nw",
	"3+q2Jd63WpGPoySeoyRB9rLcaiNiZHkOmdWfG3p9HF2gkccXu4kv1p/V06+5Ymc3b2Xnt9SYn+GGxytn",
	"uaFP+Uw3zaJytmcFe8/qz/eeDtkZ3/eKvH5mU4fKWd/tt3ved/s0nvndrtvnfrfH9tmv9Nic/xmVABXa",
	"fuTh4iMdHTxKfElRYi4LuSw8ThZeUdC/81g/P038NB15mjh0Y2DoRurHhyqDZ31qa4HnTU+u/DdZeC+3",
	"meYULUDW7Idha3rTMXkR797owaPf1xT97p47eOScR86HkEI86t5RXW66N0dU4ibdhyi+Tcc5e7VtdaoJ",
	"RhH9xoHT0FW+VfWpIAilrvdeFAYrsjCq8dihH0Zkxdg1DM2d3BweWjHLOZC0tlkpIFzd1NfrGIE1jlwc",
	"4cDxYoCTouLHdJJnN0qyYamyCWVVQVARTQFamoygJpmyIgsOVmy7FOSP53aYEhoLG002Cp3Uzi4rDcKE",
	"fMDxCnk+WSTRCX1kf5rbSxQEePNbuqg8CmXLEkVXwlCVDBsq2DQgUkUbKg4WRcvUbVMiBEowWlGggaof",
	"TOYsU4sopz6y2AT+mnzCDxQ5QoO9N5N75Kc4V3WxQ8O6hMfcSu8lKnW1HU0SFcO2bBVbiiRqhotN03Us",
	"VUCypmBRsiRBQzYVxewF3gotcOkVEV54cRI9lAQj+9ez1QPMrN1bNg6dT24AV3lHUPSffzFa8Y5htued",
	"AKxCH8eJh+g3gtaM8YJ7HCRhhAn3LLxkmVrzCK/D2EvC6GFuRSiwl5PbyQrFCY5q+zCeYSMuvMRHh9+w",
	"1af8hiWOwk/pHK3XlZ8pY+uW7CLTkKDmCgZUbEWHpqMaUECu4GiuJQhIbmDsT6mFowAnOJ47eO2HD+TI",
	"VkbI043RIkArYKerzykGax/ZGCVgiSKGza45DOE6XuDAw5SH2bvIly1y0uSh/Ftq+Z49r+xJhohpPk0r",
	"OhvIZgOz2UA6m+NPTsErlPNyreGTQY5LGYmy/bS4LfXK5QcJLQF7x8EZbIRsDk8RMFJkxxShYctEMGgm",
	"NLCrQ0tGmu4asmPLWikRm5maR2ReUyt4770C9LvILxKoLKXY3wu4SyBTVLr3RhxxXwAdc7zZ3HR6teAW",
	"tvYd3Amj887P7FtVA724mZUVofoOW+gYid5nbkBJeS8qt6J6K0n/Q0fJla/9vdh3n4zy14x8irfnSr/H",
	"1RuTP1KwjXvkQyNBlWRbyK9AeEyeOiPivvBOdh6aIivZuWhqLp2PugAC7bR9Tho71sSLak9DPnpxblr1",
	"zs7PjB2GGTsODetix6Lm6tSPWUjKffSLnvz9EYWI5jiN68jm57Jm1LLm4lERmcDopuQBZ9ZxMyu/m+Qs",
	"qIMTSkUwd0JzhenCrX62mnvqVFHNGlc3c0Vt+bPLHtaN97Tqtyz7ktLgUxB+CQ74k3ZmsTHs/4l9LwFp",
	"Aj6nHrgP/XSdoHjaxre0eV/uWxINwbA0bEHNsWSoqKoIDdFFUBA1pLuibkqOM4BviZc5qC1z0J/jpn0p",
	"A3bKr6SIQXUxHMBxdQAOXriAwy/AMRKAgyfGXbJgn7KYlYseAIaRV4huRmKMVj0thcwlRRJFuU3IXBX0",
	"1iHzd6GfJgjgBGAEkG2nMVqlcQG0kBQsGYYpQQ27GCqGJELTNiQomIqlCYoqWrqxH2gRJ2hB2OZYlEX2",
	"HDQkJCNV1KCr2jpUbKRBhGUdKhLSVcVAgoutowPFGwp9a2MAnARcUAWx9S68KeFdHGx5iUe+8GQzAgfh",
	"HM8UJJcAYXCQ6OiCqEJbsRFUsOpAZLoOtGRZES1XF1TsPhbC8HtoeXFuRH1OPXQG4EJA5gDTBH5OPfI/",
	"dAIXinVwhUebmMdAFrSptHMv0kjMSl4ko65IRo9wgA/DW5UcFsBhAZdp819iGXseBeHwgHEWdTjC/cNh",
	"AhwmwGUOhwnsdQlyvMCTxwvwIgUdwgU2zrB9ZQqKXnWFCt5tGp9aqYL8uPdQrKBE8twjUBB60IIF+UR4",
	"yYIeKcJj3lcU8+6FP3jcnMfNh5FEPPbeUeGCbHfaly7IPvADFC/IpjZE+YJjA6z61NS0UoC1TN8/37z9",
	"4+WHF+9f//H7R3DnozjxYowiezmS8GmmomI6M5tNDa6j0Jnsj0XSuOPuU1A3Tdu1NQOKtqVCxVF0iBzN",
	"grriWppsIAW7+uFQYJmixTXSqoksU1GgK4suVJAqQ8syNWi6gm24popM292EAgtltH0wMFeN94UD8wPC",
	"c5grS2FcNP4E5rgQV31YKO2TmHPuHG28Mp/gEfdQF/u13UTlaTWkN4qA3maNPNP3EaG8goynX9u6YZ2G",
	"LoyFanxwTzyVtXxMeZTqKqJUZz9Olx6G2ZyJTuIv598PnpB4pghDkZLIMLO7xvNL+nsZZZ7bB/U4c9a/",
	"bDP3CP0+3oo1dKnBiv3/05DiW2OPiPWsOteIzNc731vgwPGA4y0CL469VRiD2AsS4DnTdpYsewEsvQCS",
	"F0Dv8F1wqjHVJWEbuYocbGAFQWQLClREA0HLtF0o6o5p6KaimKI2mLmagb45fvWhcmp7tQZf3v169/7u",
	"OHvwStIjd5YzIhOL7f7TihcxVuzH9OCJkjzgA46TBYcV2oJhn3TEpn0ljP1q5yuccJ3z2nTOMulGqXPy",
	"Uhy1pTj6VTpbl+PgGieHJ10cPInrmlzX7FzX5NCgc5bl2K+5sv7DgIyy0hx7cUbj1Zb/fPf++avXv7+6",
	"HJDRphpH797Z0jUmY9SUeXWBuuoCPWN1PpxDUeaYnSvW8y8wDZ9jd86WZ36cTcMxPBzD8wQxPF0nU18E",
	"mIdnC3eK5SGf9cQ7nC9c9KvPGC41P72cYbr4h36ShkuE3Sj6xY8DJw7n4/LU4V5pwr3zV+Wd74VDuIef",
	"e/iHkkY8StBZAjFTFY7JIGZPDJJCnA113ivQ1VtBmCqa3uDJ/4e3WII3kRdmVMkUwje0sG6+gtvJCjse",
	"vZc4vwpcOOAJ3xo294QjEbuiJCvQxY4MFVM0IBJ1DB0NmxYyBBOpStkTXmhmx/jCM/1xvzM84xyeWnuh",
	"qbXFOe5HjT8muzYfd8S++nyKXXjrc9rT323yXhv5I/fjb9bPs28f5cEvCNmjT6tgsLy9YDKeodvWOOL+",
	"/Svy71/Aobv8GMDm5HTk/L+EXePZvmeLEJyU75tZLfsTfksm7nkue6LGn2yIDTbnc99D5Nu7Ajhdgc+p",
	"R69dyizPd3f/lPbbnjG+lyAWHdvQFR3qko2hItsSNCxBhbLkGDo2bFlX1MMmqjgltmjVRJVswTUsU4NY",
	"VTWouI4FLdfQoaxbgmPYgimazqAmKk+nrU+n7dkCPC6jtjjV15LhsLMgnlV7hVm1NbvMIyE8EtJOHvDM",
	"2u4za/cqeDS1lmt3bbW78ixHq93xxNWGxNWe1bsjcle5bscRMheJkOFaHdfqetDqODrlvDmse3XEPIl1",
	"EJxLkcW6D+oyFsX0N6pp1oFdxANgF7GNrmmao/ck8tTP+tTPvrEkH86janJMyZPVoi8yO5RjS0adQXqc",
	"VcExJhxjwjEmbc0tDjbh2ajdY02ofg7XaHEoH5XVxAHsgTl7oDYxlXZ4k7U/uczUDXn6SE6tbALIN6Ew",
	"SdjPjPbD5qmW2IhnqvZMFe6JvyZPfF88wr353Js/nETiEYGu8lU3CsQRKauFzjVE0upmhgPkrSLfD7/M",
	"WYXGOQ4WXoDnXuDgr3m85IC3X5qaalOJyt8eQEllAuXGmwkOkOVvwjJuGCY4mhclMsVfpF8UcXKTCdhN",
	"gyBo4i9SUURycusiP8Yb13d10MNRg/ICimKRku64hipAyTEsqBi6AS3ZVqDtiqJjOkhErlqKGpRV9iPi",
	"BiVVdm/ooMSxPFW2spRswuPPld21K3o0K47Imy19rsYb5Sgdr9o4B+WCIwIdZYmy3VYWQ9ttjaJylgmx",
	"2SRehl/m6TrxqNa6++PcR3Eyd9ADmbos3MwyKbbpnInF7IeRxFlKbMKzdx8XYSkz8z4/IWPq0x2FFSZv",
	"6FNh9oY+zUw/K5h2VmX8poYS888y9p8VB6DyUH4IZptj8LRziisHkEd8riXiw4XBqcLg4uNQlRPdTQCK",
	"c9PJ3MRzsM8YFzslC7tkE+9NxK46bvrDRD7ejWI01QdjF2P05S75w3U920Pgc4pikCYApcn0sNNEnmqG",
	"vOU0MXVLUBRLgoasOlBxZRUiW7WgJRiK5SBF1w10FqcJT96uS94e1CVxVCJ3WTRcSbpP3ZJ4Mvf1JXPX",
	"7zMPFfJQYVuZwBO6O0/oPqgrvsIJVxT7URTL0x29osjzwGvzwAfVFNvnhHM1kaPRLhmNxhVEriD2oiBy",
	"JNhZc8MPqptZevhQmLI8QfwQrOxS1NxtWNnLTSP4kGVXDwUvKw140GOqaNKlKMI8Sb0uSX1YENeHc+nB",
	"HMz1ZMBcPG2eg7o4qOtMyfxHm4Ic3MXBXRzcdWHgrs7LDHC26hPlxYsfdAjySjBaHah6wLrU1Tl4n7U8",
	"tQoHhCJ9lDbIKZ0brIy+g1YxoFPg5Qv6IgePFF1RpKh75uBBJh5kGkAG8fhUR5UKyNa0L1FAPucDFCcg",
	"kxriNu08HHOnqZIqTQ7Gi9SpJJsN8aK7exw9JEsvWAAvcCMUJ1FqJ2mEQYT9LHqTKYKvK+2HozrlYYv7",
	"tZGCFOSoULccDBXLMKHluhbEhiEommi6IsKbqM4iCtP1MfEcqh/uC+RQvuGFAi7yTu2EneLOdfT2JQHo",
	"B2G04SN2Wh5d7XgckRhKap5P/6jQS8YQ/VTcfOpp5xmD8pDElYQk+j8sl+65zzi+E0/9ANTmacvn8Gif",
	"kK9MdfJ9icqF+dbjtS3H21SiIuxLNcmMpt/QV2+F6VWDq9DHceIhYlpF6WraxoIy9e1MYlk0ZEs1baip",
	"tgoVVReghUUMdQ1rumTJgmKJvVtQPGu4Lmu4LwPlmARhdgivI+WjuhaeEnx1KcHbG8y98NwLf1AK8CTg",
	"rpOA9yhgr3DyhLWvzSCj0r54Km5tKm5f6lfrrFuue3H0xKWgJ7jWxbWubrUujlw4Z2btHh2OdR4AA5El",
	"0zbDIEarNJZhELnysQuAeJerJS1UR10xxqg68uTVuuTV3pAFHwbXHDnC4OI13AtM8uRIg/5yIY9Q1zni",
	"gCMOrg5x0HWS4DigBzyXrhPkAdX3ovvc4iLq2G09P5Hu/y8AAP//xb5V1BZmBQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
