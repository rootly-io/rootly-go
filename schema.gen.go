// Package rootly provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package rootly

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Bearer_authScopes = "bearer_auth.Scopes"
)

// Alert defines model for alert.
type Alert struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Environments attached to the alert
	Environments *[]struct {
		// Embedded struct due to allOf(#/components/schemas/environment)
		Environment `yaml:",inline"`
	} `json:"environments,omitempty"`
	Labels *[]struct {

		// Key of the tag
		Key string `json:"key"`

		// Value of the tag
		Value string `json:"value"`
	} `json:"labels,omitempty"`

	// Services attached to the alert
	Services *[]struct {
		// Embedded struct due to allOf(#/components/schemas/service)
		Service `yaml:",inline"`
	} `json:"services,omitempty"`

	// The source of the alert
	Source string `json:"source"`

	// The summary of the alert
	Summary string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// AlertList defines model for alert_list.
type AlertList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/alert)
			Alert `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the alert
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// AlertResponse defines model for alert_response.
type AlertResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/alert)
			Alert `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the alert
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Cause defines model for cause.
type Cause struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the cause
	Description *string `json:"description"`

	// The name of the cause
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// CauseList defines model for cause_list.
type CauseList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/cause)
			Cause `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the cause
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// CauseResponse defines model for cause_response.
type CauseResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/cause)
			Cause `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the cause
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Environment defines model for environment.
type Environment struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the environment
	Description *string `json:"description"`

	// The name of the environment
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// EnvironmentList defines model for environment_list.
type EnvironmentList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/environment)
			Environment `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the environment
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// EnvironmentResponse defines model for environment_response.
type EnvironmentResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/environment)
			Environment `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the environment
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// ErrorsList defines model for errors_list.
type ErrorsList struct {
	Errors *[]struct {
		Code   *string `json:"code"`
		Detail *string `json:"detail"`
		Status string  `json:"status"`
		Title  string  `json:"title"`
	} `json:"errors,omitempty"`
}

// Functionality defines model for functionality.
type Functionality struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the functionality
	Description *string `json:"description"`

	// The name of the functionality
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// FunctionalityList defines model for functionality_list.
type FunctionalityList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/functionality)
			Functionality `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the functionality
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// FunctionalityResponse defines model for functionality_response.
type FunctionalityResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/functionality)
			Functionality `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the functionality
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Incident defines model for incident.
type Incident struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the incident
	Description *string `json:"description"`

	// The Environment ID to attach to the incident
	EnvironmentId *string `json:"environment_id"`

	// The Functionality ID's to attach to the incident
	FunctionalityIds *[]string `json:"functionality_ids"`

	// The Team ID's to attach to the incident
	GroupIds *[]string `json:"group_ids"`

	// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
	Labels *map[string]interface{} `json:"labels"`

	// The Service ID's to attach to the incident
	ServiceIds *[]string `json:"service_ids"`

	// The Severity ID to attach to the incident
	SeverityId *string `json:"severity_id"`

	// The title of the incident
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentActionItem defines model for incident_action_item.
type IncidentActionItem struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of incident action item
	Description *string `json:"description"`

	// The priority of the incident action item
	Priority *string `json:"priority,omitempty"`

	// The status of incident the action item
	Status *string `json:"status,omitempty"`

	// The summary of the incident action item
	Summary string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentActionItemList defines model for incident_action_item_list.
type IncidentActionItemList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_action_item)
			IncidentActionItem `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident action item
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentActionItemResponse defines model for incident_action_item_response.
type IncidentActionItemResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_action_item)
			IncidentActionItem `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident action item
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// IncidentEvent defines model for incident_event.
type IncidentEvent struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The summary of the incident event
	Event string `json:"event"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// The visibility of the incident action item
	Visibility *string `json:"visibility,omitempty"`
}

// IncidentEventList defines model for incident_event_list.
type IncidentEventList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_event)
			IncidentEvent `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident event
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentEventResponse defines model for incident_event_response.
type IncidentEventResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_event)
			IncidentEvent `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident event
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// IncidentList defines model for incident_list.
type IncidentList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident)
			Incident `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentPostMortem defines model for incident_post_mortem.
type IncidentPostMortem struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Date of mitigation
	MitigatedAt *string `json:"mitigated_at"`

	// Date of resolution
	ResolvedAt *string `json:"resolved_at"`

	// Show alerts attached to the incident
	ShowAlertsAttached *bool `json:"show_alerts_attached,omitempty"`

	// Show services impacted of the incident postmortem
	ShowFunctionalitiesImpacted *bool `json:"show_functionalities_impacted,omitempty"`

	// Show groups impacted of the incident postmortem
	ShowGroupsImpacted *bool `json:"show_groups_impacted,omitempty"`

	// Show functionalities impacted of the incident postmortem
	ShowServicesImpacted *bool `json:"show_services_impacted,omitempty"`

	// Show events timeline of the incident postmortem
	ShowTimeline *bool `json:"show_timeline,omitempty"`

	// Show action items in the timeline of the incident postmortem
	ShowTimelineActionItems *bool `json:"show_timeline_action_items,omitempty"`

	// Show genius events in the timeline of the incident postmortem
	ShowTimelineGenius *bool `json:"show_timeline_genius,omitempty"`

	// Show tasks in the timeline of the incident postmortem
	ShowTimelineTasks *bool `json:"show_timeline_tasks,omitempty"`

	// Show trail events in the timeline of the incident postmortem
	ShowTimelineTrail *bool `json:"show_timeline_trail,omitempty"`

	// Date of started at
	StartedAt *string `json:"started_at"`

	// The status of the incident postmortem
	Status *string `json:"status,omitempty"`

	// The title of the incident postmortem
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentPostMortemResponse defines model for incident_post_mortem_response.
type IncidentPostMortemResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_post_mortem)
			IncidentPostMortem `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident postmortem
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// IncidentResponse defines model for incident_response.
type IncidentResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident)
			Incident `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// IncidentRole defines model for incident_role.
type IncidentRole struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the incident role
	Description *string `json:"description"`

	// The name of the incident role
	Name string `json:"name"`

	// The summary of the incident role
	Summary *string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentRoleList defines model for incident_role_list.
type IncidentRoleList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_role)
			IncidentRole `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident role
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentRoleResponse defines model for incident_role_response.
type IncidentRoleResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_role)
			IncidentRole `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident role
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// IncidentTask defines model for incident_task.
type IncidentTask struct {
	Checked *bool `json:"checked,omitempty"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of incident task
	Description *string `json:"description"`

	// The task of the incident task
	Task string `json:"task"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentTaskList defines model for incident_task_list.
type IncidentTaskList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_task)
			IncidentTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentTaskResponse defines model for incident_task_response.
type IncidentTaskResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_task)
			IncidentTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// IncidentType defines model for incident_type.
type IncidentType struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the incident type
	Description *string `json:"description"`

	// The name of the incident type
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentTypeList defines model for incident_type_list.
type IncidentTypeList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_type)
			IncidentType `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident type
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentTypeResponse defines model for incident_type_response.
type IncidentTypeResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_type)
			IncidentType `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident type
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Links defines model for links.
type Links struct {
	First string  `json:"first"`
	Last  string  `json:"last"`
	Next  *string `json:"next"`
	Prev  *string `json:"prev"`
	Self  string  `json:"self"`
}

// MitigateIncident defines model for mitigate_incident.
type MitigateIncident struct {
	Data struct {
		Attributes struct {

			// How you mitigated the incident
			MitigationMessage *string `json:"mitigation_message"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewAlert defines model for new_alert.
type NewAlert struct {
	Data struct {
		Attributes struct {

			// Alert Id to attach to the incident
			AlertIds *[]string `json:"alert_ids"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewCause defines model for new_cause.
type NewCause struct {
	Data struct {
		Attributes struct {

			// The description of the cause
			Description *string `json:"description"`

			// The name of the cause
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewEnvironment defines model for new_environment.
type NewEnvironment struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the environment
			Description *string `json:"description"`

			// The name of the environment
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewFunctionality defines model for new_functionality.
type NewFunctionality struct {
	Data struct {
		Attributes struct {

			// The description of the functionality
			Description *string `json:"description"`

			// The name of the functionality
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewIncident defines model for new_incident.
type NewIncident struct {
	Data struct {
		Attributes struct {

			// Create a task on Asana as well (if integration enabled)
			CreateOnAsana *bool `json:"create_on_asana"`

			// Create an story on Clubhouse as well (if integration enabled)
			CreateOnClubhouse *bool `json:"create_on_clubhouse"`

			// Create a Google meet meeting as well (if integration enabled)
			CreateOnGoogleMeet *bool `json:"create_on_google_meet"`

			// Create an issue on Jira as well (if integration enabled)
			CreateOnJira *bool `json:"create_on_jira"`

			// Create an issue on Linear as well (if integration enabled)
			CreateOnLinear *bool `json:"create_on_linear"`

			// Create a incident on Opsgenie as well  (if integration enabled)
			CreateOnOpsgenie *bool `json:"create_on_opsgenie"`

			// Create an incident on PagerDuty as well for specified PagerDuty services ids (if integration enabled)
			CreateOnPagerduty *bool `json:"create_on_pagerduty"`

			// Create an incident on ServiceNow as well (if integration enabled)
			CreateOnServiceNow *bool `json:"create_on_service_now"`

			// Create an incident on Slack as well (if integration enabled)
			CreateOnSlack *bool `json:"create_on_slack"`

			// Create a card on Trello as well (if integration enabled)
			CreateOnTrello *bool `json:"create_on_trello"`

			// Create an issue on Zendesk as well (if integration enabled)
			CreateOnZendesk *bool `json:"create_on_zendesk"`

			// Create a Zoom meeting as well (if integration enabled)
			CreateOnZoom *bool `json:"create_on_zoom"`

			// The description of the incident
			Description *string `json:"description"`

			// The Environment ID to attach to the incident
			EnvironmentId *string `json:"environment_id"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
			Labels *map[string]interface{} `json:"labels"`

			// Emails you want to notify
			NotifyEmails *[]string `json:"notify_emails"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID to attach to the incident
			SeverityId *string `json:"severity_id"`

			// The title of the incident
			Title string `json:"title"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewIncidentActionItem defines model for new_incident_action_item.
type NewIncidentActionItem struct {
	Data struct {
		Attributes struct {

			// Create a Asana task as well (if integration enabled)
			CreateOnAsana *bool `json:"create_on_asana"`

			// Create a Clubhouse task as well (if integration enabled)
			CreateOnClubhouse *bool `json:"create_on_clubhouse"`

			// Create an Jira issue as well (if integration enabled)
			CreateOnJira *bool `json:"create_on_jira"`

			// Create an Linear issue as well (if integration enabled)
			CreateOnLinear *bool `json:"create_on_linear"`

			// Create a Trello task as well (if integration enabled)
			CreateOnTrello *bool `json:"create_on_trello"`

			// Create an issue on Zendesk as well (if integration enabled)
			CreateOnZendesk *bool `json:"create_on_zendesk"`

			// The description of the incident action item
			Description *string `json:"description"`

			// The priority of the incident action item
			Priority *string `json:"priority,omitempty"`

			// The status of incident the action item
			Status *string `json:"status,omitempty"`

			// The summary of the incident action item
			Summary string `json:"summary"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewIncidentEvent defines model for new_incident_event.
type NewIncidentEvent struct {
	Data struct {
		Attributes struct {

			// The summary of the incident event
			Event string `json:"event"`

			// The visibility of the incident action item
			Visibility *string `json:"visibility,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewIncidentRole defines model for new_incident_role.
type NewIncidentRole struct {
	Data struct {
		Attributes struct {

			// The description of the incident role
			Description *string `json:"description"`

			// The name of the incident role
			Name string `json:"name"`

			// The summary of the incident role
			Summary *string `json:"summary"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewIncidentTask defines model for new_incident_task.
type NewIncidentTask struct {
	Data struct {
		Attributes struct {
			Checked *bool `json:"checked,omitempty"`

			// The description of the incident task
			Description *string `json:"description"`

			// The task of the incident task
			Task string `json:"task"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewIncidentType defines model for new_incident_type.
type NewIncidentType struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the incident type
			Description *string `json:"description"`

			// The name of the incident type
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewPlaybook defines model for new_playbook.
type NewPlaybook struct {
	Data struct {
		Attributes struct {

			// The summary of the playbook
			Summary *string `json:"summary"`

			// The title of the playbook
			Title string `json:"title"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewPlaybookTask defines model for new_playbook_task.
type NewPlaybookTask struct {
	Data struct {
		Attributes struct {

			// The description of the incident task
			Description *string `json:"description"`

			// The task of the incident task
			Task string `json:"task"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewPostMortemTemplate defines model for new_post_mortem_template.
type NewPostMortemTemplate struct {
	Data struct {
		Attributes struct {

			// Default selected template when editing a postmortem
			Default *bool `json:"default"`

			// The name of the postmortem template
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewPulse defines model for new_pulse.
type NewPulse struct {
	Data struct {
		Attributes struct {

			// Pulse end datetime
			EndedAt *time.Time `json:"ended_at"`

			// The Environment ID's to attach to the pulse
			EnvironmentIds *[]string `json:"environment_ids"`
			Labels         *[]struct {

				// Key of the tag
				Key string `json:"key"`

				// Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`

			// The Service ID's to attach to the pulse
			ServiceIds *[]string `json:"service_ids"`

			// Pulse start datetime
			StartedAt *time.Time `json:"started_at"`

			// The summary of the pulse
			Summary string `json:"summary"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewService defines model for new_service.
type NewService struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the service
			Description *string `json:"description"`

			// The name of the service
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewSeverity defines model for new_severity.
type NewSeverity struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the severity
			Description *string `json:"description"`

			// The name of the severity
			Name string `json:"name"`

			// The severity of the severity
			Severity *string `json:"severity,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewStatusPage defines model for new_status_page.
type NewStatusPage struct {
	Data struct {
		Attributes struct {

			// Allow search engines to include your public status page in search results.
			AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

			// The description of the status page
			Description *string `json:"description"`

			// Enabled / Disable the status page
			Enabled *bool `json:"enabled"`

			// The color of the footer. Eg. "#1F2F41"
			FooterColor *string `json:"footer_color"`

			// The color of the header. Eg. "#0061F2"
			HeaderColor *string `json:"header_color"`

			// Make the status page accessible to the public
			Public *bool `json:"public"`

			// Show uptime
			ShowUptime *bool `json:"show_uptime"`

			// Show uptime over x days
			ShowUptimeLastDays *int `json:"show_uptime_last_days"`

			// The title of the status page
			Title string `json:"title"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewTeam defines model for new_team.
type NewTeam struct {
	Data struct {
		Attributes struct {

			// The description of the team
			Description *string `json:"description"`

			// The name of the team
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// Playbook defines model for playbook.
type Playbook struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The summary of the playbook
	Summary *string `json:"summary"`

	// The title of the playbook
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PlaybookList defines model for playbook_list.
type PlaybookList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook)
			Playbook `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the playbook
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PlaybookResponse defines model for playbook_response.
type PlaybookResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook)
			Playbook `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the playbook
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// PlaybookTask defines model for playbook_task.
type PlaybookTask struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of incident task
	Description *string `json:"description"`

	// The task of the incident task
	Task string `json:"task"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PlaybookTaskList defines model for playbook_task_list.
type PlaybookTaskList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook_task)
			PlaybookTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PlaybookTaskResponse defines model for playbook_task_response.
type PlaybookTaskResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook_task)
			PlaybookTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// PostMortemTemplate defines model for post_mortem_template.
type PostMortemTemplate struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Default selected template when editing a postmortem
	Default *bool `json:"default"`

	// The name of the postmortem template
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PostMortemTemplateList defines model for post_mortem_template_list.
type PostMortemTemplateList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/post_mortem_template)
			PostMortemTemplate `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the post_mortem_template
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PostMortemTemplateResponse defines model for post_mortem_template_response.
type PostMortemTemplateResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/post_mortem_template)
			PostMortemTemplate `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the post_mortem_template
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Pulse defines model for pulse.
type Pulse struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Environments attached to the pulse
	Environments *[]struct {
		// Embedded struct due to allOf(#/components/schemas/environment)
		Environment `yaml:",inline"`
	} `json:"environments,omitempty"`
	Labels *[]struct {

		// Key of the tag
		Key string `json:"key"`

		// Value of the tag
		Value string `json:"value"`
	} `json:"labels,omitempty"`

	// Services attached to the pulse
	Services *[]struct {
		// Embedded struct due to allOf(#/components/schemas/service)
		Service `yaml:",inline"`
	} `json:"services,omitempty"`

	// The summary of the pulse
	Summary string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PulseList defines model for pulse_list.
type PulseList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/pulse)
			Pulse `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the pulse
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PulseResponse defines model for pulse_response.
type PulseResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/pulse)
			Pulse `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the pulse
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// ResolveIncident defines model for resolve_incident.
type ResolveIncident struct {
	Data struct {
		Attributes struct {

			// How you resolved the incident
			ResolutionMessage *string `json:"resolution_message"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// Service defines model for service.
type Service struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the service
	Description *string `json:"description"`

	// The name of the service
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// ServiceList defines model for service_list.
type ServiceList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/service)
			Service `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the service
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// ServiceResponse defines model for service_response.
type ServiceResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/service)
			Service `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the service
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Severity defines model for severity.
type Severity struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the severity
	Description *string `json:"description"`

	// The name of the severity
	Name string `json:"name"`

	// The severity of the severity
	Severity *string `json:"severity,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// SeverityList defines model for severity_list.
type SeverityList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/severity)
			Severity `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the severity
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// SeverityResponse defines model for severity_response.
type SeverityResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/severity)
			Severity `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the severity
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// StatusPage defines model for status_page.
type StatusPage struct {

	// Allow search engines to include your public status page in search results.
	AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the status page
	Description *string `json:"description"`

	// Enabled / Disable the status page
	Enabled *bool `json:"enabled"`

	// The color of the footer. Eg. "#1F2F41"
	FooterColor *string `json:"footer_color"`

	// The color of the header. Eg. "#0061F2"
	HeaderColor *string `json:"header_color"`

	// Make the status page accessible to the public
	Public *bool `json:"public"`

	// Show uptime
	ShowUptime *bool `json:"show_uptime"`

	// Show uptime over x days
	ShowUptimeLastDays *int `json:"show_uptime_last_days"`

	// The title of the status page
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// StatusPageList defines model for status_page_list.
type StatusPageList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/status_page)
			StatusPage `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the status page
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// StatusPageResponse defines model for status_page_response.
type StatusPageResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/status_page)
			StatusPage `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the status page
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Team defines model for team.
type Team struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the team
	Description *string `json:"description"`

	// The name of the team
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// TeamList defines model for team_list.
type TeamList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/team)
			Team `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the team
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// TeamResponse defines model for team_response.
type TeamResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/team)
			Team `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the team
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateCause defines model for update_cause.
type UpdateCause struct {
	Data struct {
		Attributes struct {

			// The description of the cause
			Description *string `json:"description"`

			// The name of the cause
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateEnvironment defines model for update_environment.
type UpdateEnvironment struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the environment
			Description *string `json:"description"`

			// The name of the environment
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateFunctionality defines model for update_functionality.
type UpdateFunctionality struct {
	Data struct {
		Attributes struct {

			// The description of the functionality
			Description *string `json:"description"`

			// The name of the functionality
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncident defines model for update_incident.
type UpdateIncident struct {
	Data struct {
		Attributes struct {

			// The description of the incident
			Description *string `json:"description"`

			// The Environment ID to attach to the incident
			EnvironmentId *string `json:"environment_id"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
			Labels *map[string]interface{} `json:"labels"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID to attach to the incident
			SeverityId *string `json:"severity_id"`

			// The title of the incident
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncidentActionItem defines model for update_incident_action_item.
type UpdateIncidentActionItem struct {
	Data struct {
		Attributes struct {

			// The description of the incident action item
			Description *string `json:"description"`

			// The priority of the incident action item
			Priority *string `json:"priority,omitempty"`

			// The status of incident the action item
			Status *string `json:"status,omitempty"`

			// The summary of the incident action item
			Summary *string `json:"summary,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncidentEvent defines model for update_incident_event.
type UpdateIncidentEvent struct {
	Data struct {
		Attributes struct {

			// The summary of the incident event
			Event *string `json:"event,omitempty"`

			// The visibility of the incident action item
			Visibility *string `json:"visibility,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncidentPostMortem defines model for update_incident_post_mortem.
type UpdateIncidentPostMortem struct {
	Data struct {
		Attributes struct {

			// The Cause ID's to attach to the incident postmortem
			CauseIds *[]string `json:"cause_ids"`

			// Date of mitigation
			MitigatedAt *string `json:"mitigated_at"`

			// Date of resolution
			ResolvedAt *string `json:"resolved_at"`

			// Show alerts attached to the incident
			ShowAlertsAttached *bool `json:"show_alerts_attached,omitempty"`

			// Show services impacted of the incident postmortem
			ShowFunctionalitiesImpacted *bool `json:"show_functionalities_impacted,omitempty"`

			// Show groups impacted of the incident postmortem
			ShowGroupsImpacted *bool `json:"show_groups_impacted,omitempty"`

			// Show functionalities impacted of the incident postmortem
			ShowServicesImpacted *bool `json:"show_services_impacted,omitempty"`

			// Show events timeline of the incident postmortem
			ShowTimeline *bool `json:"show_timeline,omitempty"`

			// Show action items in the timeline of the incident postmortem
			ShowTimelineActionItems *bool `json:"show_timeline_action_items,omitempty"`

			// Show genius events in the timeline of the incident postmortem
			ShowTimelineGenius *bool `json:"show_timeline_genius,omitempty"`

			// Show tasks in the timeline of the incident postmortem
			ShowTimelineTasks *bool `json:"show_timeline_tasks,omitempty"`

			// Show trail events in the timeline of the incident postmortem
			ShowTimelineTrail *bool `json:"show_timeline_trail,omitempty"`

			// Date of started at
			StartedAt *string `json:"started_at"`

			// The status of the incident postmortem
			Status *string `json:"status,omitempty"`

			// The title of the incident postmortem
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncidentRole defines model for update_incident_role.
type UpdateIncidentRole struct {
	Data struct {
		Attributes struct {

			// The description of the incident role
			Description *string `json:"description"`

			// The name of the incident role
			Name *string `json:"name,omitempty"`

			// The summary of the incident role
			Summary *string `json:"summary"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncidentTask defines model for update_incident_task.
type UpdateIncidentTask struct {
	Data struct {
		Attributes struct {
			Checked *bool `json:"checked,omitempty"`

			// The description of the incident task
			Description *string `json:"description"`

			// The task of the incident task
			Task *string `json:"task,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncidentType defines model for update_incident_type.
type UpdateIncidentType struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the incident type
			Description *string `json:"description"`

			// The name of the incident type
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdatePlaybook defines model for update_playbook.
type UpdatePlaybook struct {
	Data struct {
		Attributes struct {

			// The summary of the playbook
			Summary *string `json:"summary"`

			// The title of the playbook
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdatePlaybookTask defines model for update_playbook_task.
type UpdatePlaybookTask struct {
	Data struct {
		Attributes struct {

			// The description of the incident task
			Description *string `json:"description"`

			// The task of the incident task
			Task *string `json:"task,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdatePostMortemTemplate defines model for update_post_mortem_template.
type UpdatePostMortemTemplate struct {
	Data struct {
		Attributes struct {

			// Default selected template when editing a postmortem
			Default *bool `json:"default"`

			// The name of the postmortem template
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdatePulse defines model for update_pulse.
type UpdatePulse struct {
	Data struct {
		Attributes struct {

			// Pulse end datetime
			EndedAt *time.Time `json:"ended_at"`

			// The Environment ID's to attach to the pulse
			EnvironmentIds *[]string `json:"environment_ids"`
			Labels         *[]struct {

				// Key of the tag
				Key string `json:"key"`

				// Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`

			// The Service ID's to attach to the pulse
			ServiceIds *[]string `json:"service_ids"`

			// Pulse start datetime
			StartedAt *time.Time `json:"started_at"`

			// The summary of the pulse
			Summary *string `json:"summary,omitempty"`
		} `json:"attributes"`
		Type *string `json:"type,omitempty"`
	} `json:"data"`
}

// UpdateService defines model for update_service.
type UpdateService struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the service
			Description *string `json:"description"`

			// The name of the service
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateSeverity defines model for update_severity.
type UpdateSeverity struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the severity
			Description *string `json:"description"`

			// The name of the severity
			Name *string `json:"name,omitempty"`

			// The severity of the severity
			Severity *string `json:"severity,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateStatusPage defines model for update_status_page.
type UpdateStatusPage struct {
	Data struct {
		Attributes struct {

			// Allow search engines to include your public status page in search results.
			AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

			// The description of the status page
			Description *string `json:"description"`

			// Enabled / Disable the status page
			Enabled *bool `json:"enabled"`

			// The color of the footer. Eg. "#1F2F41"
			FooterColor *string `json:"footer_color"`

			// The color of the header. Eg. "#0061F2"
			HeaderColor *string `json:"header_color"`

			// Make the status page accessible to the public
			Public *bool `json:"public"`

			// Show uptime
			ShowUptime *bool `json:"show_uptime"`

			// Show uptime over x days
			ShowUptimeLastDays *int `json:"show_uptime_last_days"`

			// The title of the status page
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateTeam defines model for update_team.
type UpdateTeam struct {
	Data struct {
		Attributes struct {

			// The description of the team
			Description *string `json:"description"`

			// The name of the team
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// ListAlertsParams defines parameters for ListAlerts.
type ListAlertsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListCausesParams defines parameters for ListCauses.
type ListCausesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListEnvironmentsParams defines parameters for ListEnvironments.
type ListEnvironmentsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListFunctionalitiesParams defines parameters for ListFunctionalities.
type ListFunctionalitiesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentRolesParams defines parameters for ListIncidentRoles.
type ListIncidentRolesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentTypesParams defines parameters for ListIncidentTypes.
type ListIncidentTypesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentsParams defines parameters for ListIncidents.
type ListIncidentsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentActionItemsParams defines parameters for ListIncidentActionItems.
type ListIncidentActionItemsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListAlertParams defines parameters for ListAlert.
type ListAlertParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentEventsParams defines parameters for ListIncidentEvents.
type ListIncidentEventsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentTasksParams defines parameters for ListIncidentTasks.
type ListIncidentTasksParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListPlaybooksParams defines parameters for ListPlaybooks.
type ListPlaybooksParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListPlaybookTasksParams defines parameters for ListPlaybookTasks.
type ListPlaybookTasksParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListPostmortemTemplatesParams defines parameters for ListPostmortemTemplates.
type ListPostmortemTemplatesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListPulsesParams defines parameters for ListPulses.
type ListPulsesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListServicesParams defines parameters for ListServices.
type ListServicesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListSeveritiesParams defines parameters for ListSeverities.
type ListSeveritiesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListStatusPagesParams defines parameters for ListStatusPages.
type ListStatusPagesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListTeamsParams defines parameters for ListTeams.
type ListTeamsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteIncidentActionItem request
	DeleteIncidentActionItem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentActionItems request
	GetIncidentActionItems(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentActionItem request  with any body
	UpdateIncidentActionItemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAlerts request
	ListAlerts(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlert request
	GetAlert(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCauses request
	ListCauses(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCause request  with any body
	CreateCauseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCause request
	DeleteCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCause request
	GetCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCause request  with any body
	UpdateCauseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEnvironments request
	ListEnvironments(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEnvironment request  with any body
	CreateEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnvironment request
	DeleteEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironment request
	GetEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEnvironment request  with any body
	UpdateEnvironmentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentEvent request
	DeleteIncidentEvent(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentEvents request
	GetIncidentEvents(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentEvent request  with any body
	UpdateIncidentEventWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFunctionalities request
	ListFunctionalities(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFunctionality request  with any body
	CreateFunctionalityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFunctionality request
	DeleteFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionality request
	GetFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFunctionality request  with any body
	UpdateFunctionalityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentRoles request
	ListIncidentRoles(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentRole request  with any body
	CreateIncidentRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentRole request
	DeleteIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentRole request
	GetIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentRole request  with any body
	UpdateIncidentRoleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentTask request
	DeleteIncidentTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentTasks request
	GetIncidentTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentTask request  with any body
	UpdateIncidentTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentTypes request
	ListIncidentTypes(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentType request  with any body
	CreateIncidentTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentType request
	DeleteIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentType request
	GetIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentType request  with any body
	UpdateIncidentTypeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidents request
	ListIncidents(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncident request  with any body
	CreateIncidentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncident request
	DeleteIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncident request
	GetIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncident request  with any body
	UpdateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MitigateIncident request  with any body
	MitigateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResolveIncident request  with any body
	ResolveIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentActionItems request
	ListIncidentActionItems(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentActionItem request  with any body
	CreateIncidentActionItemWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAlert request
	ListAlert(ctx context.Context, incidentId string, params *ListAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AttachAlert request  with any body
	AttachAlertWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentEvents request
	ListIncidentEvents(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentEvent request  with any body
	CreateIncidentEventWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentTasks request
	ListIncidentTasks(ctx context.Context, incidentId string, params *ListIncidentTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentTask request  with any body
	CreateIncidentTaskWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePlaybookTask request
	DeletePlaybookTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaybookTasks request
	GetPlaybookTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlaybookTask request  with any body
	UpdatePlaybookTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPlaybooks request
	ListPlaybooks(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlaybook request  with any body
	CreatePlaybookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePlaybook request
	DeletePlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaybook request
	GetPlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlaybook request  with any body
	UpdatePlaybookWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPlaybookTasks request
	ListPlaybookTasks(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlaybookTask request  with any body
	CreatePlaybookTaskWithBody(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPostmortemTemplates request
	ListPostmortemTemplates(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePostmortemTemplate request  with any body
	CreatePostmortemTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePostmortemTemplate request
	DeletePostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPostmortemTemplate request
	GetPostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePostmortemTemplate request  with any body
	UpdatePostmortemTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentPostmortem request
	GetIncidentPostmortem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentPostmortem request  with any body
	UpdateIncidentPostmortemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPulses request
	ListPulses(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePulse request  with any body
	CreatePulseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPulse request
	GetPulse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePulse request  with any body
	UpdatePulseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListServices request
	ListServices(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateService request  with any body
	CreateServiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteService request
	DeleteService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetService request
	GetService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateService request  with any body
	UpdateServiceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSeverities request
	ListSeverities(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSeverity request  with any body
	CreateSeverityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSeverity request
	DeleteSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSeverity request
	GetSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSeverity request  with any body
	UpdateSeverityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListStatusPages request
	ListStatusPages(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStatusPage request  with any body
	CreateStatusPageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStatusPage request
	DeleteStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusPage request
	GetStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateStatusPage request  with any body
	UpdateStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTeams request
	ListTeams(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTeam request  with any body
	CreateTeamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTeam request
	DeleteTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeam request
	GetTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTeam request  with any body
	UpdateTeamWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteIncidentActionItem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentActionItemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentActionItems(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentActionItemsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentActionItemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentActionItemRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAlerts(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAlertsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlert(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCauses(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCausesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCauseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCauseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCauseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCauseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCauseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCauseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEnvironments(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEnvironmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvironmentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnvironmentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEnvironmentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentEvent(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentEventRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentEvents(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentEventsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentEventWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentEventRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFunctionalities(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFunctionalitiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFunctionalityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFunctionalityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFunctionalityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionalityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFunctionalityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFunctionalityRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentRoles(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentRoleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRoleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentTasksRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentTaskRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentTypes(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentTypeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentTypeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentTypeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentTypeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidents(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MitigateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMitigateIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResolveIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResolveIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentActionItems(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentActionItemsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentActionItemWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentActionItemRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAlert(ctx context.Context, incidentId string, params *ListAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAlertRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AttachAlertWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAttachAlertRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentEvents(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentEventsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentEventWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentEventRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentTasks(ctx context.Context, incidentId string, params *ListIncidentTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentTasksRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentTaskWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentTaskRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePlaybookTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePlaybookTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaybookTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaybookTasksRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlaybookTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlaybookTaskRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPlaybooks(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPlaybooksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlaybookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlaybookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePlaybookRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaybookRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlaybookWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlaybookRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPlaybookTasks(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPlaybookTasksRequest(c.Server, playbookId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlaybookTaskWithBody(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlaybookTaskRequestWithBody(c.Server, playbookId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPostmortemTemplates(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPostmortemTemplatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePostmortemTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePostmortemTemplateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePostmortemTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPostmortemTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePostmortemTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePostmortemTemplateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentPostmortem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentPostmortemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentPostmortemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentPostmortemRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPulses(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPulsesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePulseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePulseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPulse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPulseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePulseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePulseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListServices(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListServicesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateServiceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateServiceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSeverities(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSeveritiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSeverityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSeverityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSeverityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSeverityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSeverityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSeverityRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListStatusPages(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListStatusPagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStatusPageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStatusPageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStatusPageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusPageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStatusPageRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTeams(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTeamsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTeamRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteIncidentActionItemRequest generates requests for DeleteIncidentActionItem
func NewDeleteIncidentActionItemRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentActionItemsRequest generates requests for GetIncidentActionItems
func NewGetIncidentActionItemsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentActionItemRequestWithBody generates requests for UpdateIncidentActionItem with any type of body
func NewUpdateIncidentActionItemRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAlertsRequest generates requests for ListAlerts
func NewListAlertsRequest(server string, params *ListAlertsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alerts")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlertRequest generates requests for GetAlert
func NewGetAlertRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alerts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListCausesRequest generates requests for ListCauses
func NewListCausesRequest(server string, params *ListCausesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCauseRequestWithBody generates requests for CreateCause with any type of body
func NewCreateCauseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCauseRequest generates requests for DeleteCause
func NewDeleteCauseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCauseRequest generates requests for GetCause
func NewGetCauseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCauseRequestWithBody generates requests for UpdateCause with any type of body
func NewUpdateCauseRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListEnvironmentsRequest generates requests for ListEnvironments
func NewListEnvironmentsRequest(server string, params *ListEnvironmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEnvironmentRequestWithBody generates requests for CreateEnvironment with any type of body
func NewCreateEnvironmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEnvironmentRequest generates requests for DeleteEnvironment
func NewDeleteEnvironmentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvironmentRequest generates requests for GetEnvironment
func NewGetEnvironmentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEnvironmentRequestWithBody generates requests for UpdateEnvironment with any type of body
func NewUpdateEnvironmentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentEventRequest generates requests for DeleteIncidentEvent
func NewDeleteIncidentEventRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentEventsRequest generates requests for GetIncidentEvents
func NewGetIncidentEventsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentEventRequestWithBody generates requests for UpdateIncidentEvent with any type of body
func NewUpdateIncidentEventRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListFunctionalitiesRequest generates requests for ListFunctionalities
func NewListFunctionalitiesRequest(server string, params *ListFunctionalitiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFunctionalityRequestWithBody generates requests for CreateFunctionality with any type of body
func NewCreateFunctionalityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFunctionalityRequest generates requests for DeleteFunctionality
func NewDeleteFunctionalityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFunctionalityRequest generates requests for GetFunctionality
func NewGetFunctionalityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFunctionalityRequestWithBody generates requests for UpdateFunctionality with any type of body
func NewUpdateFunctionalityRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentRolesRequest generates requests for ListIncidentRoles
func NewListIncidentRolesRequest(server string, params *ListIncidentRolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentRoleRequestWithBody generates requests for CreateIncidentRole with any type of body
func NewCreateIncidentRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentRoleRequest generates requests for DeleteIncidentRole
func NewDeleteIncidentRoleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentRoleRequest generates requests for GetIncidentRole
func NewGetIncidentRoleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentRoleRequestWithBody generates requests for UpdateIncidentRole with any type of body
func NewUpdateIncidentRoleRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentTaskRequest generates requests for DeleteIncidentTask
func NewDeleteIncidentTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentTasksRequest generates requests for GetIncidentTasks
func NewGetIncidentTasksRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentTaskRequestWithBody generates requests for UpdateIncidentTask with any type of body
func NewUpdateIncidentTaskRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentTypesRequest generates requests for ListIncidentTypes
func NewListIncidentTypesRequest(server string, params *ListIncidentTypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentTypeRequestWithBody generates requests for CreateIncidentType with any type of body
func NewCreateIncidentTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentTypeRequest generates requests for DeleteIncidentType
func NewDeleteIncidentTypeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentTypeRequest generates requests for GetIncidentType
func NewGetIncidentTypeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentTypeRequestWithBody generates requests for UpdateIncidentType with any type of body
func NewUpdateIncidentTypeRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentsRequest generates requests for ListIncidents
func NewListIncidentsRequest(server string, params *ListIncidentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentRequestWithBody generates requests for CreateIncident with any type of body
func NewCreateIncidentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentRequest generates requests for DeleteIncident
func NewDeleteIncidentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentRequest generates requests for GetIncident
func NewGetIncidentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentRequestWithBody generates requests for UpdateIncident with any type of body
func NewUpdateIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMitigateIncidentRequestWithBody generates requests for MitigateIncident with any type of body
func NewMitigateIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/mitigate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResolveIncidentRequestWithBody generates requests for ResolveIncident with any type of body
func NewResolveIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/resolve", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentActionItemsRequest generates requests for ListIncidentActionItems
func NewListIncidentActionItemsRequest(server string, incidentId string, params *ListIncidentActionItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/action_items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentActionItemRequestWithBody generates requests for CreateIncidentActionItem with any type of body
func NewCreateIncidentActionItemRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/action_items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAlertRequest generates requests for ListAlert
func NewListAlertRequest(server string, incidentId string, params *ListAlertParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/alerts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAttachAlertRequestWithBody generates requests for AttachAlert with any type of body
func NewAttachAlertRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/alerts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentEventsRequest generates requests for ListIncidentEvents
func NewListIncidentEventsRequest(server string, incidentId string, params *ListIncidentEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentEventRequestWithBody generates requests for CreateIncidentEvent with any type of body
func NewCreateIncidentEventRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentTasksRequest generates requests for ListIncidentTasks
func NewListIncidentTasksRequest(server string, incidentId string, params *ListIncidentTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/incident_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentTaskRequestWithBody generates requests for CreateIncidentTask with any type of body
func NewCreateIncidentTaskRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/incident_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePlaybookTaskRequest generates requests for DeletePlaybookTask
func NewDeletePlaybookTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlaybookTasksRequest generates requests for GetPlaybookTasks
func NewGetPlaybookTasksRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlaybookTaskRequestWithBody generates requests for UpdatePlaybookTask with any type of body
func NewUpdatePlaybookTaskRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPlaybooksRequest generates requests for ListPlaybooks
func NewListPlaybooksRequest(server string, params *ListPlaybooksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlaybookRequestWithBody generates requests for CreatePlaybook with any type of body
func NewCreatePlaybookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePlaybookRequest generates requests for DeletePlaybook
func NewDeletePlaybookRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlaybookRequest generates requests for GetPlaybook
func NewGetPlaybookRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlaybookRequestWithBody generates requests for UpdatePlaybook with any type of body
func NewUpdatePlaybookRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPlaybookTasksRequest generates requests for ListPlaybookTasks
func NewListPlaybookTasksRequest(server string, playbookId string, params *ListPlaybookTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "playbook_id", runtime.ParamLocationPath, playbookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s/playbook_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlaybookTaskRequestWithBody generates requests for CreatePlaybookTask with any type of body
func NewCreatePlaybookTaskRequestWithBody(server string, playbookId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "playbook_id", runtime.ParamLocationPath, playbookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s/playbook_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPostmortemTemplatesRequest generates requests for ListPostmortemTemplates
func NewListPostmortemTemplatesRequest(server string, params *ListPostmortemTemplatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePostmortemTemplateRequestWithBody generates requests for CreatePostmortemTemplate with any type of body
func NewCreatePostmortemTemplateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePostmortemTemplateRequest generates requests for DeletePostmortemTemplate
func NewDeletePostmortemTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPostmortemTemplateRequest generates requests for GetPostmortemTemplate
func NewGetPostmortemTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePostmortemTemplateRequestWithBody generates requests for UpdatePostmortemTemplate with any type of body
func NewUpdatePostmortemTemplateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIncidentPostmortemRequest generates requests for GetIncidentPostmortem
func NewGetIncidentPostmortemRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentPostmortemRequestWithBody generates requests for UpdateIncidentPostmortem with any type of body
func NewUpdateIncidentPostmortemRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPulsesRequest generates requests for ListPulses
func NewListPulsesRequest(server string, params *ListPulsesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePulseRequestWithBody generates requests for CreatePulse with any type of body
func NewCreatePulseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPulseRequest generates requests for GetPulse
func NewGetPulseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePulseRequestWithBody generates requests for UpdatePulse with any type of body
func NewUpdatePulseRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListServicesRequest generates requests for ListServices
func NewListServicesRequest(server string, params *ListServicesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateServiceRequestWithBody generates requests for CreateService with any type of body
func NewCreateServiceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServiceRequest generates requests for DeleteService
func NewDeleteServiceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceRequest generates requests for GetService
func NewGetServiceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateServiceRequestWithBody generates requests for UpdateService with any type of body
func NewUpdateServiceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSeveritiesRequest generates requests for ListSeverities
func NewListSeveritiesRequest(server string, params *ListSeveritiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSeverityRequestWithBody generates requests for CreateSeverity with any type of body
func NewCreateSeverityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSeverityRequest generates requests for DeleteSeverity
func NewDeleteSeverityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSeverityRequest generates requests for GetSeverity
func NewGetSeverityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSeverityRequestWithBody generates requests for UpdateSeverity with any type of body
func NewUpdateSeverityRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListStatusPagesRequest generates requests for ListStatusPages
func NewListStatusPagesRequest(server string, params *ListStatusPagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateStatusPageRequestWithBody generates requests for CreateStatusPage with any type of body
func NewCreateStatusPageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStatusPageRequest generates requests for DeleteStatusPage
func NewDeleteStatusPageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusPageRequest generates requests for GetStatusPage
func NewGetStatusPageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateStatusPageRequestWithBody generates requests for UpdateStatusPage with any type of body
func NewUpdateStatusPageRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListTeamsRequest generates requests for ListTeams
func NewListTeamsRequest(server string, params *ListTeamsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTeamRequestWithBody generates requests for CreateTeam with any type of body
func NewCreateTeamRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTeamRequest generates requests for DeleteTeam
func NewDeleteTeamRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamRequest generates requests for GetTeam
func NewGetTeamRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTeamRequestWithBody generates requests for UpdateTeam with any type of body
func NewUpdateTeamRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteIncidentActionItem request
	DeleteIncidentActionItemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentActionItemResponse, error)

	// GetIncidentActionItems request
	GetIncidentActionItemsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentActionItemsResponse, error)

	// UpdateIncidentActionItem request  with any body
	UpdateIncidentActionItemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentActionItemResponse, error)

	// ListAlerts request
	ListAlertsWithResponse(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*ListAlertsResponse, error)

	// GetAlert request
	GetAlertWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAlertResponse, error)

	// ListCauses request
	ListCausesWithResponse(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*ListCausesResponse, error)

	// CreateCause request  with any body
	CreateCauseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCauseResponse, error)

	// DeleteCause request
	DeleteCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCauseResponse, error)

	// GetCause request
	GetCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCauseResponse, error)

	// UpdateCause request  with any body
	UpdateCauseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCauseResponse, error)

	// ListEnvironments request
	ListEnvironmentsWithResponse(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error)

	// CreateEnvironment request  with any body
	CreateEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error)

	// DeleteEnvironment request
	DeleteEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error)

	// GetEnvironment request
	GetEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error)

	// UpdateEnvironment request  with any body
	UpdateEnvironmentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error)

	// DeleteIncidentEvent request
	DeleteIncidentEventWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentEventResponse, error)

	// GetIncidentEvents request
	GetIncidentEventsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentEventsResponse, error)

	// UpdateIncidentEvent request  with any body
	UpdateIncidentEventWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentEventResponse, error)

	// ListFunctionalities request
	ListFunctionalitiesWithResponse(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*ListFunctionalitiesResponse, error)

	// CreateFunctionality request  with any body
	CreateFunctionalityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFunctionalityResponse, error)

	// DeleteFunctionality request
	DeleteFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFunctionalityResponse, error)

	// GetFunctionality request
	GetFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFunctionalityResponse, error)

	// UpdateFunctionality request  with any body
	UpdateFunctionalityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFunctionalityResponse, error)

	// ListIncidentRoles request
	ListIncidentRolesWithResponse(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*ListIncidentRolesResponse, error)

	// CreateIncidentRole request  with any body
	CreateIncidentRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentRoleResponse, error)

	// DeleteIncidentRole request
	DeleteIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentRoleResponse, error)

	// GetIncidentRole request
	GetIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRoleResponse, error)

	// UpdateIncidentRole request  with any body
	UpdateIncidentRoleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleResponse, error)

	// DeleteIncidentTask request
	DeleteIncidentTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentTaskResponse, error)

	// GetIncidentTasks request
	GetIncidentTasksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentTasksResponse, error)

	// UpdateIncidentTask request  with any body
	UpdateIncidentTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentTaskResponse, error)

	// ListIncidentTypes request
	ListIncidentTypesWithResponse(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*ListIncidentTypesResponse, error)

	// CreateIncidentType request  with any body
	CreateIncidentTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentTypeResponse, error)

	// DeleteIncidentType request
	DeleteIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentTypeResponse, error)

	// GetIncidentType request
	GetIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentTypeResponse, error)

	// UpdateIncidentType request  with any body
	UpdateIncidentTypeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentTypeResponse, error)

	// ListIncidents request
	ListIncidentsWithResponse(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*ListIncidentsResponse, error)

	// CreateIncident request  with any body
	CreateIncidentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentResponse, error)

	// DeleteIncident request
	DeleteIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentResponse, error)

	// GetIncident request
	GetIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentResponse, error)

	// UpdateIncident request  with any body
	UpdateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentResponse, error)

	// MitigateIncident request  with any body
	MitigateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MitigateIncidentResponse, error)

	// ResolveIncident request  with any body
	ResolveIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResolveIncidentResponse, error)

	// ListIncidentActionItems request
	ListIncidentActionItemsWithResponse(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*ListIncidentActionItemsResponse, error)

	// CreateIncidentActionItem request  with any body
	CreateIncidentActionItemWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentActionItemResponse, error)

	// ListAlert request
	ListAlertWithResponse(ctx context.Context, incidentId string, params *ListAlertParams, reqEditors ...RequestEditorFn) (*ListAlertResponse, error)

	// AttachAlert request  with any body
	AttachAlertWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachAlertResponse, error)

	// ListIncidentEvents request
	ListIncidentEventsWithResponse(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*ListIncidentEventsResponse, error)

	// CreateIncidentEvent request  with any body
	CreateIncidentEventWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentEventResponse, error)

	// ListIncidentTasks request
	ListIncidentTasksWithResponse(ctx context.Context, incidentId string, params *ListIncidentTasksParams, reqEditors ...RequestEditorFn) (*ListIncidentTasksResponse, error)

	// CreateIncidentTask request  with any body
	CreateIncidentTaskWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentTaskResponse, error)

	// DeletePlaybookTask request
	DeletePlaybookTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookTaskResponse, error)

	// GetPlaybookTasks request
	GetPlaybookTasksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookTasksResponse, error)

	// UpdatePlaybookTask request  with any body
	UpdatePlaybookTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookTaskResponse, error)

	// ListPlaybooks request
	ListPlaybooksWithResponse(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*ListPlaybooksResponse, error)

	// CreatePlaybook request  with any body
	CreatePlaybookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookResponse, error)

	// DeletePlaybook request
	DeletePlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookResponse, error)

	// GetPlaybook request
	GetPlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookResponse, error)

	// UpdatePlaybook request  with any body
	UpdatePlaybookWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookResponse, error)

	// ListPlaybookTasks request
	ListPlaybookTasksWithResponse(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*ListPlaybookTasksResponse, error)

	// CreatePlaybookTask request  with any body
	CreatePlaybookTaskWithBodyWithResponse(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookTaskResponse, error)

	// ListPostmortemTemplates request
	ListPostmortemTemplatesWithResponse(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*ListPostmortemTemplatesResponse, error)

	// CreatePostmortemTemplate request  with any body
	CreatePostmortemTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePostmortemTemplateResponse, error)

	// DeletePostmortemTemplate request
	DeletePostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePostmortemTemplateResponse, error)

	// GetPostmortemTemplate request
	GetPostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPostmortemTemplateResponse, error)

	// UpdatePostmortemTemplate request  with any body
	UpdatePostmortemTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePostmortemTemplateResponse, error)

	// GetIncidentPostmortem request
	GetIncidentPostmortemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentPostmortemResponse, error)

	// UpdateIncidentPostmortem request  with any body
	UpdateIncidentPostmortemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPostmortemResponse, error)

	// ListPulses request
	ListPulsesWithResponse(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*ListPulsesResponse, error)

	// CreatePulse request  with any body
	CreatePulseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePulseResponse, error)

	// GetPulse request
	GetPulseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPulseResponse, error)

	// UpdatePulse request  with any body
	UpdatePulseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePulseResponse, error)

	// ListServices request
	ListServicesWithResponse(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*ListServicesResponse, error)

	// CreateService request  with any body
	CreateServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceResponse, error)

	// DeleteService request
	DeleteServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteServiceResponse, error)

	// GetService request
	GetServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceResponse, error)

	// UpdateService request  with any body
	UpdateServiceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceResponse, error)

	// ListSeverities request
	ListSeveritiesWithResponse(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*ListSeveritiesResponse, error)

	// CreateSeverity request  with any body
	CreateSeverityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSeverityResponse, error)

	// DeleteSeverity request
	DeleteSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSeverityResponse, error)

	// GetSeverity request
	GetSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSeverityResponse, error)

	// UpdateSeverity request  with any body
	UpdateSeverityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSeverityResponse, error)

	// ListStatusPages request
	ListStatusPagesWithResponse(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*ListStatusPagesResponse, error)

	// CreateStatusPage request  with any body
	CreateStatusPageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStatusPageResponse, error)

	// DeleteStatusPage request
	DeleteStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteStatusPageResponse, error)

	// GetStatusPage request
	GetStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStatusPageResponse, error)

	// UpdateStatusPage request  with any body
	UpdateStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStatusPageResponse, error)

	// ListTeams request
	ListTeamsWithResponse(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*ListTeamsResponse, error)

	// CreateTeam request  with any body
	CreateTeamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error)

	// DeleteTeam request
	DeleteTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error)

	// GetTeam request
	GetTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTeamResponse, error)

	// UpdateTeam request  with any body
	UpdateTeamWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error)
}

type DeleteIncidentActionItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentActionItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentActionItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentActionItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentActionItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCausesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListCausesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCausesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFunctionalitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListFunctionalitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFunctionalitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MitigateIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MitigateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MitigateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResolveIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResolveIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResolveIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentActionItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentActionItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentActionItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentActionItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AttachAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AttachAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AttachAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaybookTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlaybookTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaybookTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPlaybooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPlaybooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPlaybooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPlaybookTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPlaybookTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPlaybookTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPostmortemTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPostmortemTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPostmortemTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentPostmortemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentPostmortemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentPostmortemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentPostmortemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentPostmortemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentPostmortemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPulsesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPulsesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPulsesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSeveritiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListSeveritiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSeveritiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListStatusPagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListStatusPagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListStatusPagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteIncidentActionItemWithResponse request returning *DeleteIncidentActionItemResponse
func (c *ClientWithResponses) DeleteIncidentActionItemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentActionItemResponse, error) {
	rsp, err := c.DeleteIncidentActionItem(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentActionItemResponse(rsp)
}

// GetIncidentActionItemsWithResponse request returning *GetIncidentActionItemsResponse
func (c *ClientWithResponses) GetIncidentActionItemsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentActionItemsResponse, error) {
	rsp, err := c.GetIncidentActionItems(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentActionItemsResponse(rsp)
}

// UpdateIncidentActionItemWithBodyWithResponse request with arbitrary body returning *UpdateIncidentActionItemResponse
func (c *ClientWithResponses) UpdateIncidentActionItemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentActionItemResponse, error) {
	rsp, err := c.UpdateIncidentActionItemWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentActionItemResponse(rsp)
}

// ListAlertsWithResponse request returning *ListAlertsResponse
func (c *ClientWithResponses) ListAlertsWithResponse(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*ListAlertsResponse, error) {
	rsp, err := c.ListAlerts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAlertsResponse(rsp)
}

// GetAlertWithResponse request returning *GetAlertResponse
func (c *ClientWithResponses) GetAlertWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAlertResponse, error) {
	rsp, err := c.GetAlert(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertResponse(rsp)
}

// ListCausesWithResponse request returning *ListCausesResponse
func (c *ClientWithResponses) ListCausesWithResponse(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*ListCausesResponse, error) {
	rsp, err := c.ListCauses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCausesResponse(rsp)
}

// CreateCauseWithBodyWithResponse request with arbitrary body returning *CreateCauseResponse
func (c *ClientWithResponses) CreateCauseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCauseResponse, error) {
	rsp, err := c.CreateCauseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCauseResponse(rsp)
}

// DeleteCauseWithResponse request returning *DeleteCauseResponse
func (c *ClientWithResponses) DeleteCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCauseResponse, error) {
	rsp, err := c.DeleteCause(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCauseResponse(rsp)
}

// GetCauseWithResponse request returning *GetCauseResponse
func (c *ClientWithResponses) GetCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCauseResponse, error) {
	rsp, err := c.GetCause(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCauseResponse(rsp)
}

// UpdateCauseWithBodyWithResponse request with arbitrary body returning *UpdateCauseResponse
func (c *ClientWithResponses) UpdateCauseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCauseResponse, error) {
	rsp, err := c.UpdateCauseWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCauseResponse(rsp)
}

// ListEnvironmentsWithResponse request returning *ListEnvironmentsResponse
func (c *ClientWithResponses) ListEnvironmentsWithResponse(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error) {
	rsp, err := c.ListEnvironments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEnvironmentsResponse(rsp)
}

// CreateEnvironmentWithBodyWithResponse request with arbitrary body returning *CreateEnvironmentResponse
func (c *ClientWithResponses) CreateEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

// DeleteEnvironmentWithResponse request returning *DeleteEnvironmentResponse
func (c *ClientWithResponses) DeleteEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error) {
	rsp, err := c.DeleteEnvironment(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentResponse(rsp)
}

// GetEnvironmentWithResponse request returning *GetEnvironmentResponse
func (c *ClientWithResponses) GetEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error) {
	rsp, err := c.GetEnvironment(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentResponse(rsp)
}

// UpdateEnvironmentWithBodyWithResponse request with arbitrary body returning *UpdateEnvironmentResponse
func (c *ClientWithResponses) UpdateEnvironmentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error) {
	rsp, err := c.UpdateEnvironmentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnvironmentResponse(rsp)
}

// DeleteIncidentEventWithResponse request returning *DeleteIncidentEventResponse
func (c *ClientWithResponses) DeleteIncidentEventWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentEventResponse, error) {
	rsp, err := c.DeleteIncidentEvent(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentEventResponse(rsp)
}

// GetIncidentEventsWithResponse request returning *GetIncidentEventsResponse
func (c *ClientWithResponses) GetIncidentEventsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentEventsResponse, error) {
	rsp, err := c.GetIncidentEvents(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentEventsResponse(rsp)
}

// UpdateIncidentEventWithBodyWithResponse request with arbitrary body returning *UpdateIncidentEventResponse
func (c *ClientWithResponses) UpdateIncidentEventWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentEventResponse, error) {
	rsp, err := c.UpdateIncidentEventWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentEventResponse(rsp)
}

// ListFunctionalitiesWithResponse request returning *ListFunctionalitiesResponse
func (c *ClientWithResponses) ListFunctionalitiesWithResponse(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*ListFunctionalitiesResponse, error) {
	rsp, err := c.ListFunctionalities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFunctionalitiesResponse(rsp)
}

// CreateFunctionalityWithBodyWithResponse request with arbitrary body returning *CreateFunctionalityResponse
func (c *ClientWithResponses) CreateFunctionalityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFunctionalityResponse, error) {
	rsp, err := c.CreateFunctionalityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFunctionalityResponse(rsp)
}

// DeleteFunctionalityWithResponse request returning *DeleteFunctionalityResponse
func (c *ClientWithResponses) DeleteFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFunctionalityResponse, error) {
	rsp, err := c.DeleteFunctionality(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFunctionalityResponse(rsp)
}

// GetFunctionalityWithResponse request returning *GetFunctionalityResponse
func (c *ClientWithResponses) GetFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFunctionalityResponse, error) {
	rsp, err := c.GetFunctionality(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionalityResponse(rsp)
}

// UpdateFunctionalityWithBodyWithResponse request with arbitrary body returning *UpdateFunctionalityResponse
func (c *ClientWithResponses) UpdateFunctionalityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFunctionalityResponse, error) {
	rsp, err := c.UpdateFunctionalityWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFunctionalityResponse(rsp)
}

// ListIncidentRolesWithResponse request returning *ListIncidentRolesResponse
func (c *ClientWithResponses) ListIncidentRolesWithResponse(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*ListIncidentRolesResponse, error) {
	rsp, err := c.ListIncidentRoles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentRolesResponse(rsp)
}

// CreateIncidentRoleWithBodyWithResponse request with arbitrary body returning *CreateIncidentRoleResponse
func (c *ClientWithResponses) CreateIncidentRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentRoleResponse, error) {
	rsp, err := c.CreateIncidentRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentRoleResponse(rsp)
}

// DeleteIncidentRoleWithResponse request returning *DeleteIncidentRoleResponse
func (c *ClientWithResponses) DeleteIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentRoleResponse, error) {
	rsp, err := c.DeleteIncidentRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentRoleResponse(rsp)
}

// GetIncidentRoleWithResponse request returning *GetIncidentRoleResponse
func (c *ClientWithResponses) GetIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRoleResponse, error) {
	rsp, err := c.GetIncidentRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentRoleResponse(rsp)
}

// UpdateIncidentRoleWithBodyWithResponse request with arbitrary body returning *UpdateIncidentRoleResponse
func (c *ClientWithResponses) UpdateIncidentRoleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleResponse, error) {
	rsp, err := c.UpdateIncidentRoleWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentRoleResponse(rsp)
}

// DeleteIncidentTaskWithResponse request returning *DeleteIncidentTaskResponse
func (c *ClientWithResponses) DeleteIncidentTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentTaskResponse, error) {
	rsp, err := c.DeleteIncidentTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentTaskResponse(rsp)
}

// GetIncidentTasksWithResponse request returning *GetIncidentTasksResponse
func (c *ClientWithResponses) GetIncidentTasksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentTasksResponse, error) {
	rsp, err := c.GetIncidentTasks(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentTasksResponse(rsp)
}

// UpdateIncidentTaskWithBodyWithResponse request with arbitrary body returning *UpdateIncidentTaskResponse
func (c *ClientWithResponses) UpdateIncidentTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentTaskResponse, error) {
	rsp, err := c.UpdateIncidentTaskWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentTaskResponse(rsp)
}

// ListIncidentTypesWithResponse request returning *ListIncidentTypesResponse
func (c *ClientWithResponses) ListIncidentTypesWithResponse(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*ListIncidentTypesResponse, error) {
	rsp, err := c.ListIncidentTypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentTypesResponse(rsp)
}

// CreateIncidentTypeWithBodyWithResponse request with arbitrary body returning *CreateIncidentTypeResponse
func (c *ClientWithResponses) CreateIncidentTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentTypeResponse, error) {
	rsp, err := c.CreateIncidentTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentTypeResponse(rsp)
}

// DeleteIncidentTypeWithResponse request returning *DeleteIncidentTypeResponse
func (c *ClientWithResponses) DeleteIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentTypeResponse, error) {
	rsp, err := c.DeleteIncidentType(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentTypeResponse(rsp)
}

// GetIncidentTypeWithResponse request returning *GetIncidentTypeResponse
func (c *ClientWithResponses) GetIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentTypeResponse, error) {
	rsp, err := c.GetIncidentType(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentTypeResponse(rsp)
}

// UpdateIncidentTypeWithBodyWithResponse request with arbitrary body returning *UpdateIncidentTypeResponse
func (c *ClientWithResponses) UpdateIncidentTypeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentTypeResponse, error) {
	rsp, err := c.UpdateIncidentTypeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentTypeResponse(rsp)
}

// ListIncidentsWithResponse request returning *ListIncidentsResponse
func (c *ClientWithResponses) ListIncidentsWithResponse(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*ListIncidentsResponse, error) {
	rsp, err := c.ListIncidents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentsResponse(rsp)
}

// CreateIncidentWithBodyWithResponse request with arbitrary body returning *CreateIncidentResponse
func (c *ClientWithResponses) CreateIncidentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentResponse, error) {
	rsp, err := c.CreateIncidentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentResponse(rsp)
}

// DeleteIncidentWithResponse request returning *DeleteIncidentResponse
func (c *ClientWithResponses) DeleteIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentResponse, error) {
	rsp, err := c.DeleteIncident(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentResponse(rsp)
}

// GetIncidentWithResponse request returning *GetIncidentResponse
func (c *ClientWithResponses) GetIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentResponse, error) {
	rsp, err := c.GetIncident(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentResponse(rsp)
}

// UpdateIncidentWithBodyWithResponse request with arbitrary body returning *UpdateIncidentResponse
func (c *ClientWithResponses) UpdateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentResponse, error) {
	rsp, err := c.UpdateIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentResponse(rsp)
}

// MitigateIncidentWithBodyWithResponse request with arbitrary body returning *MitigateIncidentResponse
func (c *ClientWithResponses) MitigateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MitigateIncidentResponse, error) {
	rsp, err := c.MitigateIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMitigateIncidentResponse(rsp)
}

// ResolveIncidentWithBodyWithResponse request with arbitrary body returning *ResolveIncidentResponse
func (c *ClientWithResponses) ResolveIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResolveIncidentResponse, error) {
	rsp, err := c.ResolveIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResolveIncidentResponse(rsp)
}

// ListIncidentActionItemsWithResponse request returning *ListIncidentActionItemsResponse
func (c *ClientWithResponses) ListIncidentActionItemsWithResponse(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*ListIncidentActionItemsResponse, error) {
	rsp, err := c.ListIncidentActionItems(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentActionItemsResponse(rsp)
}

// CreateIncidentActionItemWithBodyWithResponse request with arbitrary body returning *CreateIncidentActionItemResponse
func (c *ClientWithResponses) CreateIncidentActionItemWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentActionItemResponse, error) {
	rsp, err := c.CreateIncidentActionItemWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentActionItemResponse(rsp)
}

// ListAlertWithResponse request returning *ListAlertResponse
func (c *ClientWithResponses) ListAlertWithResponse(ctx context.Context, incidentId string, params *ListAlertParams, reqEditors ...RequestEditorFn) (*ListAlertResponse, error) {
	rsp, err := c.ListAlert(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAlertResponse(rsp)
}

// AttachAlertWithBodyWithResponse request with arbitrary body returning *AttachAlertResponse
func (c *ClientWithResponses) AttachAlertWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachAlertResponse, error) {
	rsp, err := c.AttachAlertWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAttachAlertResponse(rsp)
}

// ListIncidentEventsWithResponse request returning *ListIncidentEventsResponse
func (c *ClientWithResponses) ListIncidentEventsWithResponse(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*ListIncidentEventsResponse, error) {
	rsp, err := c.ListIncidentEvents(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentEventsResponse(rsp)
}

// CreateIncidentEventWithBodyWithResponse request with arbitrary body returning *CreateIncidentEventResponse
func (c *ClientWithResponses) CreateIncidentEventWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentEventResponse, error) {
	rsp, err := c.CreateIncidentEventWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentEventResponse(rsp)
}

// ListIncidentTasksWithResponse request returning *ListIncidentTasksResponse
func (c *ClientWithResponses) ListIncidentTasksWithResponse(ctx context.Context, incidentId string, params *ListIncidentTasksParams, reqEditors ...RequestEditorFn) (*ListIncidentTasksResponse, error) {
	rsp, err := c.ListIncidentTasks(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentTasksResponse(rsp)
}

// CreateIncidentTaskWithBodyWithResponse request with arbitrary body returning *CreateIncidentTaskResponse
func (c *ClientWithResponses) CreateIncidentTaskWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentTaskResponse, error) {
	rsp, err := c.CreateIncidentTaskWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentTaskResponse(rsp)
}

// DeletePlaybookTaskWithResponse request returning *DeletePlaybookTaskResponse
func (c *ClientWithResponses) DeletePlaybookTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookTaskResponse, error) {
	rsp, err := c.DeletePlaybookTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePlaybookTaskResponse(rsp)
}

// GetPlaybookTasksWithResponse request returning *GetPlaybookTasksResponse
func (c *ClientWithResponses) GetPlaybookTasksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookTasksResponse, error) {
	rsp, err := c.GetPlaybookTasks(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaybookTasksResponse(rsp)
}

// UpdatePlaybookTaskWithBodyWithResponse request with arbitrary body returning *UpdatePlaybookTaskResponse
func (c *ClientWithResponses) UpdatePlaybookTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookTaskResponse, error) {
	rsp, err := c.UpdatePlaybookTaskWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlaybookTaskResponse(rsp)
}

// ListPlaybooksWithResponse request returning *ListPlaybooksResponse
func (c *ClientWithResponses) ListPlaybooksWithResponse(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*ListPlaybooksResponse, error) {
	rsp, err := c.ListPlaybooks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPlaybooksResponse(rsp)
}

// CreatePlaybookWithBodyWithResponse request with arbitrary body returning *CreatePlaybookResponse
func (c *ClientWithResponses) CreatePlaybookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookResponse, error) {
	rsp, err := c.CreatePlaybookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlaybookResponse(rsp)
}

// DeletePlaybookWithResponse request returning *DeletePlaybookResponse
func (c *ClientWithResponses) DeletePlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookResponse, error) {
	rsp, err := c.DeletePlaybook(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePlaybookResponse(rsp)
}

// GetPlaybookWithResponse request returning *GetPlaybookResponse
func (c *ClientWithResponses) GetPlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookResponse, error) {
	rsp, err := c.GetPlaybook(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaybookResponse(rsp)
}

// UpdatePlaybookWithBodyWithResponse request with arbitrary body returning *UpdatePlaybookResponse
func (c *ClientWithResponses) UpdatePlaybookWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookResponse, error) {
	rsp, err := c.UpdatePlaybookWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlaybookResponse(rsp)
}

// ListPlaybookTasksWithResponse request returning *ListPlaybookTasksResponse
func (c *ClientWithResponses) ListPlaybookTasksWithResponse(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*ListPlaybookTasksResponse, error) {
	rsp, err := c.ListPlaybookTasks(ctx, playbookId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPlaybookTasksResponse(rsp)
}

// CreatePlaybookTaskWithBodyWithResponse request with arbitrary body returning *CreatePlaybookTaskResponse
func (c *ClientWithResponses) CreatePlaybookTaskWithBodyWithResponse(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookTaskResponse, error) {
	rsp, err := c.CreatePlaybookTaskWithBody(ctx, playbookId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlaybookTaskResponse(rsp)
}

// ListPostmortemTemplatesWithResponse request returning *ListPostmortemTemplatesResponse
func (c *ClientWithResponses) ListPostmortemTemplatesWithResponse(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*ListPostmortemTemplatesResponse, error) {
	rsp, err := c.ListPostmortemTemplates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPostmortemTemplatesResponse(rsp)
}

// CreatePostmortemTemplateWithBodyWithResponse request with arbitrary body returning *CreatePostmortemTemplateResponse
func (c *ClientWithResponses) CreatePostmortemTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePostmortemTemplateResponse, error) {
	rsp, err := c.CreatePostmortemTemplateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePostmortemTemplateResponse(rsp)
}

// DeletePostmortemTemplateWithResponse request returning *DeletePostmortemTemplateResponse
func (c *ClientWithResponses) DeletePostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePostmortemTemplateResponse, error) {
	rsp, err := c.DeletePostmortemTemplate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePostmortemTemplateResponse(rsp)
}

// GetPostmortemTemplateWithResponse request returning *GetPostmortemTemplateResponse
func (c *ClientWithResponses) GetPostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPostmortemTemplateResponse, error) {
	rsp, err := c.GetPostmortemTemplate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPostmortemTemplateResponse(rsp)
}

// UpdatePostmortemTemplateWithBodyWithResponse request with arbitrary body returning *UpdatePostmortemTemplateResponse
func (c *ClientWithResponses) UpdatePostmortemTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePostmortemTemplateResponse, error) {
	rsp, err := c.UpdatePostmortemTemplateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePostmortemTemplateResponse(rsp)
}

// GetIncidentPostmortemWithResponse request returning *GetIncidentPostmortemResponse
func (c *ClientWithResponses) GetIncidentPostmortemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentPostmortemResponse, error) {
	rsp, err := c.GetIncidentPostmortem(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentPostmortemResponse(rsp)
}

// UpdateIncidentPostmortemWithBodyWithResponse request with arbitrary body returning *UpdateIncidentPostmortemResponse
func (c *ClientWithResponses) UpdateIncidentPostmortemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPostmortemResponse, error) {
	rsp, err := c.UpdateIncidentPostmortemWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentPostmortemResponse(rsp)
}

// ListPulsesWithResponse request returning *ListPulsesResponse
func (c *ClientWithResponses) ListPulsesWithResponse(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*ListPulsesResponse, error) {
	rsp, err := c.ListPulses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPulsesResponse(rsp)
}

// CreatePulseWithBodyWithResponse request with arbitrary body returning *CreatePulseResponse
func (c *ClientWithResponses) CreatePulseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePulseResponse, error) {
	rsp, err := c.CreatePulseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePulseResponse(rsp)
}

// GetPulseWithResponse request returning *GetPulseResponse
func (c *ClientWithResponses) GetPulseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPulseResponse, error) {
	rsp, err := c.GetPulse(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPulseResponse(rsp)
}

// UpdatePulseWithBodyWithResponse request with arbitrary body returning *UpdatePulseResponse
func (c *ClientWithResponses) UpdatePulseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePulseResponse, error) {
	rsp, err := c.UpdatePulseWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePulseResponse(rsp)
}

// ListServicesWithResponse request returning *ListServicesResponse
func (c *ClientWithResponses) ListServicesWithResponse(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*ListServicesResponse, error) {
	rsp, err := c.ListServices(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListServicesResponse(rsp)
}

// CreateServiceWithBodyWithResponse request with arbitrary body returning *CreateServiceResponse
func (c *ClientWithResponses) CreateServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceResponse, error) {
	rsp, err := c.CreateServiceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceResponse(rsp)
}

// DeleteServiceWithResponse request returning *DeleteServiceResponse
func (c *ClientWithResponses) DeleteServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteServiceResponse, error) {
	rsp, err := c.DeleteService(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceResponse(rsp)
}

// GetServiceWithResponse request returning *GetServiceResponse
func (c *ClientWithResponses) GetServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceResponse, error) {
	rsp, err := c.GetService(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceResponse(rsp)
}

// UpdateServiceWithBodyWithResponse request with arbitrary body returning *UpdateServiceResponse
func (c *ClientWithResponses) UpdateServiceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceResponse, error) {
	rsp, err := c.UpdateServiceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateServiceResponse(rsp)
}

// ListSeveritiesWithResponse request returning *ListSeveritiesResponse
func (c *ClientWithResponses) ListSeveritiesWithResponse(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*ListSeveritiesResponse, error) {
	rsp, err := c.ListSeverities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSeveritiesResponse(rsp)
}

// CreateSeverityWithBodyWithResponse request with arbitrary body returning *CreateSeverityResponse
func (c *ClientWithResponses) CreateSeverityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSeverityResponse, error) {
	rsp, err := c.CreateSeverityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSeverityResponse(rsp)
}

// DeleteSeverityWithResponse request returning *DeleteSeverityResponse
func (c *ClientWithResponses) DeleteSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSeverityResponse, error) {
	rsp, err := c.DeleteSeverity(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSeverityResponse(rsp)
}

// GetSeverityWithResponse request returning *GetSeverityResponse
func (c *ClientWithResponses) GetSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSeverityResponse, error) {
	rsp, err := c.GetSeverity(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSeverityResponse(rsp)
}

// UpdateSeverityWithBodyWithResponse request with arbitrary body returning *UpdateSeverityResponse
func (c *ClientWithResponses) UpdateSeverityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSeverityResponse, error) {
	rsp, err := c.UpdateSeverityWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSeverityResponse(rsp)
}

// ListStatusPagesWithResponse request returning *ListStatusPagesResponse
func (c *ClientWithResponses) ListStatusPagesWithResponse(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*ListStatusPagesResponse, error) {
	rsp, err := c.ListStatusPages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListStatusPagesResponse(rsp)
}

// CreateStatusPageWithBodyWithResponse request with arbitrary body returning *CreateStatusPageResponse
func (c *ClientWithResponses) CreateStatusPageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStatusPageResponse, error) {
	rsp, err := c.CreateStatusPageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStatusPageResponse(rsp)
}

// DeleteStatusPageWithResponse request returning *DeleteStatusPageResponse
func (c *ClientWithResponses) DeleteStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteStatusPageResponse, error) {
	rsp, err := c.DeleteStatusPage(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStatusPageResponse(rsp)
}

// GetStatusPageWithResponse request returning *GetStatusPageResponse
func (c *ClientWithResponses) GetStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStatusPageResponse, error) {
	rsp, err := c.GetStatusPage(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusPageResponse(rsp)
}

// UpdateStatusPageWithBodyWithResponse request with arbitrary body returning *UpdateStatusPageResponse
func (c *ClientWithResponses) UpdateStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStatusPageResponse, error) {
	rsp, err := c.UpdateStatusPageWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStatusPageResponse(rsp)
}

// ListTeamsWithResponse request returning *ListTeamsResponse
func (c *ClientWithResponses) ListTeamsWithResponse(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*ListTeamsResponse, error) {
	rsp, err := c.ListTeams(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTeamsResponse(rsp)
}

// CreateTeamWithBodyWithResponse request with arbitrary body returning *CreateTeamResponse
func (c *ClientWithResponses) CreateTeamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error) {
	rsp, err := c.CreateTeamWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamResponse(rsp)
}

// DeleteTeamWithResponse request returning *DeleteTeamResponse
func (c *ClientWithResponses) DeleteTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error) {
	rsp, err := c.DeleteTeam(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamResponse(rsp)
}

// GetTeamWithResponse request returning *GetTeamResponse
func (c *ClientWithResponses) GetTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTeamResponse, error) {
	rsp, err := c.GetTeam(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamResponse(rsp)
}

// UpdateTeamWithBodyWithResponse request with arbitrary body returning *UpdateTeamResponse
func (c *ClientWithResponses) UpdateTeamWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error) {
	rsp, err := c.UpdateTeamWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamResponse(rsp)
}

// ParseDeleteIncidentActionItemResponse parses an HTTP response from a DeleteIncidentActionItemWithResponse call
func ParseDeleteIncidentActionItemResponse(rsp *http.Response) (*DeleteIncidentActionItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentActionItemsResponse parses an HTTP response from a GetIncidentActionItemsWithResponse call
func ParseGetIncidentActionItemsResponse(rsp *http.Response) (*GetIncidentActionItemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentActionItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentActionItemResponse parses an HTTP response from a UpdateIncidentActionItemWithResponse call
func ParseUpdateIncidentActionItemResponse(rsp *http.Response) (*UpdateIncidentActionItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListAlertsResponse parses an HTTP response from a ListAlertsWithResponse call
func ParseListAlertsResponse(rsp *http.Response) (*ListAlertsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetAlertResponse parses an HTTP response from a GetAlertWithResponse call
func ParseGetAlertResponse(rsp *http.Response) (*GetAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListCausesResponse parses an HTTP response from a ListCausesWithResponse call
func ParseListCausesResponse(rsp *http.Response) (*ListCausesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListCausesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateCauseResponse parses an HTTP response from a CreateCauseWithResponse call
func ParseCreateCauseResponse(rsp *http.Response) (*CreateCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteCauseResponse parses an HTTP response from a DeleteCauseWithResponse call
func ParseDeleteCauseResponse(rsp *http.Response) (*DeleteCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCauseResponse parses an HTTP response from a GetCauseWithResponse call
func ParseGetCauseResponse(rsp *http.Response) (*GetCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateCauseResponse parses an HTTP response from a UpdateCauseWithResponse call
func ParseUpdateCauseResponse(rsp *http.Response) (*UpdateCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListEnvironmentsResponse parses an HTTP response from a ListEnvironmentsWithResponse call
func ParseListEnvironmentsResponse(rsp *http.Response) (*ListEnvironmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateEnvironmentResponse parses an HTTP response from a CreateEnvironmentWithResponse call
func ParseCreateEnvironmentResponse(rsp *http.Response) (*CreateEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteEnvironmentResponse parses an HTTP response from a DeleteEnvironmentWithResponse call
func ParseDeleteEnvironmentResponse(rsp *http.Response) (*DeleteEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetEnvironmentResponse parses an HTTP response from a GetEnvironmentWithResponse call
func ParseGetEnvironmentResponse(rsp *http.Response) (*GetEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateEnvironmentResponse parses an HTTP response from a UpdateEnvironmentWithResponse call
func ParseUpdateEnvironmentResponse(rsp *http.Response) (*UpdateEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIncidentEventResponse parses an HTTP response from a DeleteIncidentEventWithResponse call
func ParseDeleteIncidentEventResponse(rsp *http.Response) (*DeleteIncidentEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentEventsResponse parses an HTTP response from a GetIncidentEventsWithResponse call
func ParseGetIncidentEventsResponse(rsp *http.Response) (*GetIncidentEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentEventResponse parses an HTTP response from a UpdateIncidentEventWithResponse call
func ParseUpdateIncidentEventResponse(rsp *http.Response) (*UpdateIncidentEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListFunctionalitiesResponse parses an HTTP response from a ListFunctionalitiesWithResponse call
func ParseListFunctionalitiesResponse(rsp *http.Response) (*ListFunctionalitiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListFunctionalitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateFunctionalityResponse parses an HTTP response from a CreateFunctionalityWithResponse call
func ParseCreateFunctionalityResponse(rsp *http.Response) (*CreateFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteFunctionalityResponse parses an HTTP response from a DeleteFunctionalityWithResponse call
func ParseDeleteFunctionalityResponse(rsp *http.Response) (*DeleteFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetFunctionalityResponse parses an HTTP response from a GetFunctionalityWithResponse call
func ParseGetFunctionalityResponse(rsp *http.Response) (*GetFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateFunctionalityResponse parses an HTTP response from a UpdateFunctionalityWithResponse call
func ParseUpdateFunctionalityResponse(rsp *http.Response) (*UpdateFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentRolesResponse parses an HTTP response from a ListIncidentRolesWithResponse call
func ParseListIncidentRolesResponse(rsp *http.Response) (*ListIncidentRolesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentRoleResponse parses an HTTP response from a CreateIncidentRoleWithResponse call
func ParseCreateIncidentRoleResponse(rsp *http.Response) (*CreateIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIncidentRoleResponse parses an HTTP response from a DeleteIncidentRoleWithResponse call
func ParseDeleteIncidentRoleResponse(rsp *http.Response) (*DeleteIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentRoleResponse parses an HTTP response from a GetIncidentRoleWithResponse call
func ParseGetIncidentRoleResponse(rsp *http.Response) (*GetIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentRoleResponse parses an HTTP response from a UpdateIncidentRoleWithResponse call
func ParseUpdateIncidentRoleResponse(rsp *http.Response) (*UpdateIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIncidentTaskResponse parses an HTTP response from a DeleteIncidentTaskWithResponse call
func ParseDeleteIncidentTaskResponse(rsp *http.Response) (*DeleteIncidentTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentTasksResponse parses an HTTP response from a GetIncidentTasksWithResponse call
func ParseGetIncidentTasksResponse(rsp *http.Response) (*GetIncidentTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentTaskResponse parses an HTTP response from a UpdateIncidentTaskWithResponse call
func ParseUpdateIncidentTaskResponse(rsp *http.Response) (*UpdateIncidentTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentTypesResponse parses an HTTP response from a ListIncidentTypesWithResponse call
func ParseListIncidentTypesResponse(rsp *http.Response) (*ListIncidentTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentTypeResponse parses an HTTP response from a CreateIncidentTypeWithResponse call
func ParseCreateIncidentTypeResponse(rsp *http.Response) (*CreateIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIncidentTypeResponse parses an HTTP response from a DeleteIncidentTypeWithResponse call
func ParseDeleteIncidentTypeResponse(rsp *http.Response) (*DeleteIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentTypeResponse parses an HTTP response from a GetIncidentTypeWithResponse call
func ParseGetIncidentTypeResponse(rsp *http.Response) (*GetIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentTypeResponse parses an HTTP response from a UpdateIncidentTypeWithResponse call
func ParseUpdateIncidentTypeResponse(rsp *http.Response) (*UpdateIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentsResponse parses an HTTP response from a ListIncidentsWithResponse call
func ParseListIncidentsResponse(rsp *http.Response) (*ListIncidentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentResponse parses an HTTP response from a CreateIncidentWithResponse call
func ParseCreateIncidentResponse(rsp *http.Response) (*CreateIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIncidentResponse parses an HTTP response from a DeleteIncidentWithResponse call
func ParseDeleteIncidentResponse(rsp *http.Response) (*DeleteIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentResponse parses an HTTP response from a GetIncidentWithResponse call
func ParseGetIncidentResponse(rsp *http.Response) (*GetIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentResponse parses an HTTP response from a UpdateIncidentWithResponse call
func ParseUpdateIncidentResponse(rsp *http.Response) (*UpdateIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseMitigateIncidentResponse parses an HTTP response from a MitigateIncidentWithResponse call
func ParseMitigateIncidentResponse(rsp *http.Response) (*MitigateIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &MitigateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseResolveIncidentResponse parses an HTTP response from a ResolveIncidentWithResponse call
func ParseResolveIncidentResponse(rsp *http.Response) (*ResolveIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ResolveIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentActionItemsResponse parses an HTTP response from a ListIncidentActionItemsWithResponse call
func ParseListIncidentActionItemsResponse(rsp *http.Response) (*ListIncidentActionItemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentActionItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentActionItemResponse parses an HTTP response from a CreateIncidentActionItemWithResponse call
func ParseCreateIncidentActionItemResponse(rsp *http.Response) (*CreateIncidentActionItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListAlertResponse parses an HTTP response from a ListAlertWithResponse call
func ParseListAlertResponse(rsp *http.Response) (*ListAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseAttachAlertResponse parses an HTTP response from a AttachAlertWithResponse call
func ParseAttachAlertResponse(rsp *http.Response) (*AttachAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AttachAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentEventsResponse parses an HTTP response from a ListIncidentEventsWithResponse call
func ParseListIncidentEventsResponse(rsp *http.Response) (*ListIncidentEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentEventResponse parses an HTTP response from a CreateIncidentEventWithResponse call
func ParseCreateIncidentEventResponse(rsp *http.Response) (*CreateIncidentEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentTasksResponse parses an HTTP response from a ListIncidentTasksWithResponse call
func ParseListIncidentTasksResponse(rsp *http.Response) (*ListIncidentTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentTaskResponse parses an HTTP response from a CreateIncidentTaskWithResponse call
func ParseCreateIncidentTaskResponse(rsp *http.Response) (*CreateIncidentTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeletePlaybookTaskResponse parses an HTTP response from a DeletePlaybookTaskWithResponse call
func ParseDeletePlaybookTaskResponse(rsp *http.Response) (*DeletePlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPlaybookTasksResponse parses an HTTP response from a GetPlaybookTasksWithResponse call
func ParseGetPlaybookTasksResponse(rsp *http.Response) (*GetPlaybookTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPlaybookTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdatePlaybookTaskResponse parses an HTTP response from a UpdatePlaybookTaskWithResponse call
func ParseUpdatePlaybookTaskResponse(rsp *http.Response) (*UpdatePlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListPlaybooksResponse parses an HTTP response from a ListPlaybooksWithResponse call
func ParseListPlaybooksResponse(rsp *http.Response) (*ListPlaybooksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListPlaybooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreatePlaybookResponse parses an HTTP response from a CreatePlaybookWithResponse call
func ParseCreatePlaybookResponse(rsp *http.Response) (*CreatePlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeletePlaybookResponse parses an HTTP response from a DeletePlaybookWithResponse call
func ParseDeletePlaybookResponse(rsp *http.Response) (*DeletePlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPlaybookResponse parses an HTTP response from a GetPlaybookWithResponse call
func ParseGetPlaybookResponse(rsp *http.Response) (*GetPlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdatePlaybookResponse parses an HTTP response from a UpdatePlaybookWithResponse call
func ParseUpdatePlaybookResponse(rsp *http.Response) (*UpdatePlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListPlaybookTasksResponse parses an HTTP response from a ListPlaybookTasksWithResponse call
func ParseListPlaybookTasksResponse(rsp *http.Response) (*ListPlaybookTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListPlaybookTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreatePlaybookTaskResponse parses an HTTP response from a CreatePlaybookTaskWithResponse call
func ParseCreatePlaybookTaskResponse(rsp *http.Response) (*CreatePlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListPostmortemTemplatesResponse parses an HTTP response from a ListPostmortemTemplatesWithResponse call
func ParseListPostmortemTemplatesResponse(rsp *http.Response) (*ListPostmortemTemplatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListPostmortemTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreatePostmortemTemplateResponse parses an HTTP response from a CreatePostmortemTemplateWithResponse call
func ParseCreatePostmortemTemplateResponse(rsp *http.Response) (*CreatePostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeletePostmortemTemplateResponse parses an HTTP response from a DeletePostmortemTemplateWithResponse call
func ParseDeletePostmortemTemplateResponse(rsp *http.Response) (*DeletePostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPostmortemTemplateResponse parses an HTTP response from a GetPostmortemTemplateWithResponse call
func ParseGetPostmortemTemplateResponse(rsp *http.Response) (*GetPostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdatePostmortemTemplateResponse parses an HTTP response from a UpdatePostmortemTemplateWithResponse call
func ParseUpdatePostmortemTemplateResponse(rsp *http.Response) (*UpdatePostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdatePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentPostmortemResponse parses an HTTP response from a GetIncidentPostmortemWithResponse call
func ParseGetIncidentPostmortemResponse(rsp *http.Response) (*GetIncidentPostmortemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentPostmortemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentPostmortemResponse parses an HTTP response from a UpdateIncidentPostmortemWithResponse call
func ParseUpdateIncidentPostmortemResponse(rsp *http.Response) (*UpdateIncidentPostmortemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentPostmortemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListPulsesResponse parses an HTTP response from a ListPulsesWithResponse call
func ParseListPulsesResponse(rsp *http.Response) (*ListPulsesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListPulsesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreatePulseResponse parses an HTTP response from a CreatePulseWithResponse call
func ParseCreatePulseResponse(rsp *http.Response) (*CreatePulseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatePulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPulseResponse parses an HTTP response from a GetPulseWithResponse call
func ParseGetPulseResponse(rsp *http.Response) (*GetPulseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdatePulseResponse parses an HTTP response from a UpdatePulseWithResponse call
func ParseUpdatePulseResponse(rsp *http.Response) (*UpdatePulseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdatePulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListServicesResponse parses an HTTP response from a ListServicesWithResponse call
func ParseListServicesResponse(rsp *http.Response) (*ListServicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateServiceResponse parses an HTTP response from a CreateServiceWithResponse call
func ParseCreateServiceResponse(rsp *http.Response) (*CreateServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteServiceResponse parses an HTTP response from a DeleteServiceWithResponse call
func ParseDeleteServiceResponse(rsp *http.Response) (*DeleteServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetServiceResponse parses an HTTP response from a GetServiceWithResponse call
func ParseGetServiceResponse(rsp *http.Response) (*GetServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateServiceResponse parses an HTTP response from a UpdateServiceWithResponse call
func ParseUpdateServiceResponse(rsp *http.Response) (*UpdateServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListSeveritiesResponse parses an HTTP response from a ListSeveritiesWithResponse call
func ParseListSeveritiesResponse(rsp *http.Response) (*ListSeveritiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSeveritiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateSeverityResponse parses an HTTP response from a CreateSeverityWithResponse call
func ParseCreateSeverityResponse(rsp *http.Response) (*CreateSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteSeverityResponse parses an HTTP response from a DeleteSeverityWithResponse call
func ParseDeleteSeverityResponse(rsp *http.Response) (*DeleteSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSeverityResponse parses an HTTP response from a GetSeverityWithResponse call
func ParseGetSeverityResponse(rsp *http.Response) (*GetSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateSeverityResponse parses an HTTP response from a UpdateSeverityWithResponse call
func ParseUpdateSeverityResponse(rsp *http.Response) (*UpdateSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListStatusPagesResponse parses an HTTP response from a ListStatusPagesWithResponse call
func ParseListStatusPagesResponse(rsp *http.Response) (*ListStatusPagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListStatusPagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateStatusPageResponse parses an HTTP response from a CreateStatusPageWithResponse call
func ParseCreateStatusPageResponse(rsp *http.Response) (*CreateStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteStatusPageResponse parses an HTTP response from a DeleteStatusPageWithResponse call
func ParseDeleteStatusPageResponse(rsp *http.Response) (*DeleteStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetStatusPageResponse parses an HTTP response from a GetStatusPageWithResponse call
func ParseGetStatusPageResponse(rsp *http.Response) (*GetStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateStatusPageResponse parses an HTTP response from a UpdateStatusPageWithResponse call
func ParseUpdateStatusPageResponse(rsp *http.Response) (*UpdateStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListTeamsResponse parses an HTTP response from a ListTeamsWithResponse call
func ParseListTeamsResponse(rsp *http.Response) (*ListTeamsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateTeamResponse parses an HTTP response from a CreateTeamWithResponse call
func ParseCreateTeamResponse(rsp *http.Response) (*CreateTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteTeamResponse parses an HTTP response from a DeleteTeamWithResponse call
func ParseDeleteTeamResponse(rsp *http.Response) (*DeleteTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetTeamResponse parses an HTTP response from a GetTeamWithResponse call
func ParseGetTeamResponse(rsp *http.Response) (*GetTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateTeamResponse parses an HTTP response from a UpdateTeamWithResponse call
func ParseUpdateTeamResponse(rsp *http.Response) (*UpdateTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete a incident action item
	// (DELETE /v1/action_items/{id})
	DeleteIncidentActionItem(ctx echo.Context, id string) error
	// Retrieves a incident action item
	// (GET /v1/action_items/{id})
	GetIncidentActionItems(ctx echo.Context, id string) error
	// Update a incident action item
	// (PUT /v1/action_items/{id})
	UpdateIncidentActionItem(ctx echo.Context, id string) error
	// List alerts
	// (GET /v1/alerts)
	ListAlerts(ctx echo.Context, params ListAlertsParams) error
	// Retrieves a alert
	// (GET /v1/alerts/{id})
	GetAlert(ctx echo.Context, id string) error
	// List causes
	// (GET /v1/causes)
	ListCauses(ctx echo.Context, params ListCausesParams) error
	// Creates a cause
	// (POST /v1/causes)
	CreateCause(ctx echo.Context) error
	// Delete a cause
	// (DELETE /v1/causes/{id})
	DeleteCause(ctx echo.Context, id string) error
	// Retrieves a cause
	// (GET /v1/causes/{id})
	GetCause(ctx echo.Context, id string) error
	// Update a cause
	// (PUT /v1/causes/{id})
	UpdateCause(ctx echo.Context, id string) error
	// List environments
	// (GET /v1/environments)
	ListEnvironments(ctx echo.Context, params ListEnvironmentsParams) error
	// Creates a environment
	// (POST /v1/environments)
	CreateEnvironment(ctx echo.Context) error
	// Delete a environment
	// (DELETE /v1/environments/{id})
	DeleteEnvironment(ctx echo.Context, id string) error
	// Retrieves a environment
	// (GET /v1/environments/{id})
	GetEnvironment(ctx echo.Context, id string) error
	// Update a environment
	// (PUT /v1/environments/{id})
	UpdateEnvironment(ctx echo.Context, id string) error
	// Delete a incident event
	// (DELETE /v1/events/{id})
	DeleteIncidentEvent(ctx echo.Context, id string) error
	// Retrieves a incident event
	// (GET /v1/events/{id})
	GetIncidentEvents(ctx echo.Context, id string) error
	// Update a incident event
	// (PUT /v1/events/{id})
	UpdateIncidentEvent(ctx echo.Context, id string) error
	// List functionalities
	// (GET /v1/functionalities)
	ListFunctionalities(ctx echo.Context, params ListFunctionalitiesParams) error
	// Creates a functionality
	// (POST /v1/functionalities)
	CreateFunctionality(ctx echo.Context) error
	// Delete a functionality
	// (DELETE /v1/functionalities/{id})
	DeleteFunctionality(ctx echo.Context, id string) error
	// Retrieves a functionality
	// (GET /v1/functionalities/{id})
	GetFunctionality(ctx echo.Context, id string) error
	// Update a functionality
	// (PUT /v1/functionalities/{id})
	UpdateFunctionality(ctx echo.Context, id string) error
	// List incident roles
	// (GET /v1/incident_roles)
	ListIncidentRoles(ctx echo.Context, params ListIncidentRolesParams) error
	// Creates a incident role
	// (POST /v1/incident_roles)
	CreateIncidentRole(ctx echo.Context) error
	// Delete a incident role
	// (DELETE /v1/incident_roles/{id})
	DeleteIncidentRole(ctx echo.Context, id string) error
	// Retrieves a incident role
	// (GET /v1/incident_roles/{id})
	GetIncidentRole(ctx echo.Context, id string) error
	// Update a incident role
	// (PUT /v1/incident_roles/{id})
	UpdateIncidentRole(ctx echo.Context, id string) error
	// Delete a incident task
	// (DELETE /v1/incident_tasks/{id})
	DeleteIncidentTask(ctx echo.Context, id string) error
	// Retrieves a incident task
	// (GET /v1/incident_tasks/{id})
	GetIncidentTasks(ctx echo.Context, id string) error
	// Update a incident task
	// (PUT /v1/incident_tasks/{id})
	UpdateIncidentTask(ctx echo.Context, id string) error
	// List incident_types
	// (GET /v1/incident_types)
	ListIncidentTypes(ctx echo.Context, params ListIncidentTypesParams) error
	// Creates a incident_type
	// (POST /v1/incident_types)
	CreateIncidentType(ctx echo.Context) error
	// Delete a incident_type
	// (DELETE /v1/incident_types/{id})
	DeleteIncidentType(ctx echo.Context, id string) error
	// Retrieves a incident_type
	// (GET /v1/incident_types/{id})
	GetIncidentType(ctx echo.Context, id string) error
	// Update a incident_type
	// (PUT /v1/incident_types/{id})
	UpdateIncidentType(ctx echo.Context, id string) error
	// List incidents
	// (GET /v1/incidents)
	ListIncidents(ctx echo.Context, params ListIncidentsParams) error
	// Creates a incident
	// (POST /v1/incidents)
	CreateIncident(ctx echo.Context) error
	// Delete a incident
	// (DELETE /v1/incidents/{id})
	DeleteIncident(ctx echo.Context, id string) error
	// Retrieves a incident
	// (GET /v1/incidents/{id})
	GetIncident(ctx echo.Context, id string) error
	// Update a incident
	// (PUT /v1/incidents/{id})
	UpdateIncident(ctx echo.Context, id string) error
	// Mitigate an incident
	// (PUT /v1/incidents/{id}/mitigate)
	MitigateIncident(ctx echo.Context, id string) error
	// Resolve an incident
	// (PUT /v1/incidents/{id}/resolve)
	ResolveIncident(ctx echo.Context, id string) error
	// List incident action items
	// (GET /v1/incidents/{incident_id}/action_items)
	ListIncidentActionItems(ctx echo.Context, incidentId string, params ListIncidentActionItemsParams) error
	// Creates a incident action item
	// (POST /v1/incidents/{incident_id}/action_items)
	CreateIncidentActionItem(ctx echo.Context, incidentId string) error
	// List alerts
	// (GET /v1/incidents/{incident_id}/alerts)
	ListAlert(ctx echo.Context, incidentId string, params ListAlertParams) error
	// Attach alerts to an incident
	// (POST /v1/incidents/{incident_id}/alerts)
	AttachAlert(ctx echo.Context, incidentId string) error
	// List incident events
	// (GET /v1/incidents/{incident_id}/events)
	ListIncidentEvents(ctx echo.Context, incidentId string, params ListIncidentEventsParams) error
	// Creates a incident event
	// (POST /v1/incidents/{incident_id}/events)
	CreateIncidentEvent(ctx echo.Context, incidentId string) error
	// List incident tasks
	// (GET /v1/incidents/{incident_id}/incident_tasks)
	ListIncidentTasks(ctx echo.Context, incidentId string, params ListIncidentTasksParams) error
	// Creates a incident task
	// (POST /v1/incidents/{incident_id}/incident_tasks)
	CreateIncidentTask(ctx echo.Context, incidentId string) error
	// Delete a playbook task
	// (DELETE /v1/playbook_tasks/{id})
	DeletePlaybookTask(ctx echo.Context, id string) error
	// Retrieves a playbook task
	// (GET /v1/playbook_tasks/{id})
	GetPlaybookTasks(ctx echo.Context, id string) error
	// Update a playbook task
	// (PUT /v1/playbook_tasks/{id})
	UpdatePlaybookTask(ctx echo.Context, id string) error
	// List playbooks
	// (GET /v1/playbooks)
	ListPlaybooks(ctx echo.Context, params ListPlaybooksParams) error
	// Creates a playbook
	// (POST /v1/playbooks)
	CreatePlaybook(ctx echo.Context) error
	// Delete a playbook
	// (DELETE /v1/playbooks/{id})
	DeletePlaybook(ctx echo.Context, id string) error
	// Retrieves a playbook
	// (GET /v1/playbooks/{id})
	GetPlaybook(ctx echo.Context, id string) error
	// Update a playbook
	// (PUT /v1/playbooks/{id})
	UpdatePlaybook(ctx echo.Context, id string) error
	// List playbook tasks
	// (GET /v1/playbooks/{playbook_id}/playbook_tasks)
	ListPlaybookTasks(ctx echo.Context, playbookId string, params ListPlaybookTasksParams) error
	// Creates a playbook task
	// (POST /v1/playbooks/{playbook_id}/playbook_tasks)
	CreatePlaybookTask(ctx echo.Context, playbookId string) error
	// List Postmortem Templates
	// (GET /v1/post_mortem_templates)
	ListPostmortemTemplates(ctx echo.Context, params ListPostmortemTemplatesParams) error
	// Creates a postmortem template
	// (POST /v1/post_mortem_templates)
	CreatePostmortemTemplate(ctx echo.Context) error
	// Delete a Postmortem Template
	// (DELETE /v1/post_mortem_templates/{id})
	DeletePostmortemTemplate(ctx echo.Context, id string) error
	// Retrieves a Postmortem Template
	// (GET /v1/post_mortem_templates/{id})
	GetPostmortemTemplate(ctx echo.Context, id string) error
	// Update a Postmortem Template
	// (PUT /v1/post_mortem_templates/{id})
	UpdatePostmortemTemplate(ctx echo.Context, id string) error
	// Retrieves a incident postmortem
	// (GET /v1/post_mortems/{id})
	GetIncidentPostmortem(ctx echo.Context, id string) error
	// Update a incident postmortem
	// (PUT /v1/post_mortems/{id})
	UpdateIncidentPostmortem(ctx echo.Context, id string) error
	// List pulses
	// (GET /v1/pulses)
	ListPulses(ctx echo.Context, params ListPulsesParams) error
	// Creates a pulse
	// (POST /v1/pulses)
	CreatePulse(ctx echo.Context) error
	// Retrieves a pulse
	// (GET /v1/pulses/{id})
	GetPulse(ctx echo.Context, id string) error
	// Update a pulse
	// (PUT /v1/pulses/{id})
	UpdatePulse(ctx echo.Context, id string) error
	// List services
	// (GET /v1/services)
	ListServices(ctx echo.Context, params ListServicesParams) error
	// Creates a service
	// (POST /v1/services)
	CreateService(ctx echo.Context) error
	// Delete a service
	// (DELETE /v1/services/{id})
	DeleteService(ctx echo.Context, id string) error
	// Retrieves a service
	// (GET /v1/services/{id})
	GetService(ctx echo.Context, id string) error
	// Update a service
	// (PUT /v1/services/{id})
	UpdateService(ctx echo.Context, id string) error
	// List severities
	// (GET /v1/severities)
	ListSeverities(ctx echo.Context, params ListSeveritiesParams) error
	// Creates a severity
	// (POST /v1/severities)
	CreateSeverity(ctx echo.Context) error
	// Delete a severity
	// (DELETE /v1/severities/{id})
	DeleteSeverity(ctx echo.Context, id string) error
	// Retrieves a severity
	// (GET /v1/severities/{id})
	GetSeverity(ctx echo.Context, id string) error
	// Update a severity
	// (PUT /v1/severities/{id})
	UpdateSeverity(ctx echo.Context, id string) error
	// List public status pages
	// (GET /v1/status-pages)
	ListStatusPages(ctx echo.Context, params ListStatusPagesParams) error
	// Creates a public status page
	// (POST /v1/status-pages)
	CreateStatusPage(ctx echo.Context) error
	// Delete a public status page
	// (DELETE /v1/status-pages/{id})
	DeleteStatusPage(ctx echo.Context, id string) error
	// Retrieves a public status page
	// (GET /v1/status-pages/{id})
	GetStatusPage(ctx echo.Context, id string) error
	// Update a public status page
	// (PUT /v1/status-pages/{id})
	UpdateStatusPage(ctx echo.Context, id string) error
	// List teams
	// (GET /v1/teams)
	ListTeams(ctx echo.Context, params ListTeamsParams) error
	// Creates a team
	// (POST /v1/teams)
	CreateTeam(ctx echo.Context) error
	// Delete a team
	// (DELETE /v1/teams/{id})
	DeleteTeam(ctx echo.Context, id string) error
	// Retrieves a team
	// (GET /v1/teams/{id})
	GetTeam(ctx echo.Context, id string) error
	// Update a team
	// (PUT /v1/teams/{id})
	UpdateTeam(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteIncidentActionItem converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentActionItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentActionItem(ctx, id)
	return err
}

// GetIncidentActionItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentActionItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentActionItems(ctx, id)
	return err
}

// UpdateIncidentActionItem converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentActionItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentActionItem(ctx, id)
	return err
}

// ListAlerts converts echo context to params.
func (w *ServerInterfaceWrapper) ListAlerts(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAlertsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAlerts(ctx, params)
	return err
}

// GetAlert converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlert(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAlert(ctx, id)
	return err
}

// ListCauses converts echo context to params.
func (w *ServerInterfaceWrapper) ListCauses(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCausesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListCauses(ctx, params)
	return err
}

// CreateCause converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCause(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCause(ctx)
	return err
}

// DeleteCause converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCause(ctx, id)
	return err
}

// GetCause converts echo context to params.
func (w *ServerInterfaceWrapper) GetCause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCause(ctx, id)
	return err
}

// UpdateCause converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCause(ctx, id)
	return err
}

// ListEnvironments converts echo context to params.
func (w *ServerInterfaceWrapper) ListEnvironments(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEnvironmentsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListEnvironments(ctx, params)
	return err
}

// CreateEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) CreateEnvironment(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateEnvironment(ctx)
	return err
}

// DeleteEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEnvironment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteEnvironment(ctx, id)
	return err
}

// GetEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnvironment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnvironment(ctx, id)
	return err
}

// UpdateEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateEnvironment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateEnvironment(ctx, id)
	return err
}

// DeleteIncidentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentEvent(ctx, id)
	return err
}

// GetIncidentEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentEvents(ctx, id)
	return err
}

// UpdateIncidentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentEvent(ctx, id)
	return err
}

// ListFunctionalities converts echo context to params.
func (w *ServerInterfaceWrapper) ListFunctionalities(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFunctionalitiesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListFunctionalities(ctx, params)
	return err
}

// CreateFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFunctionality(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateFunctionality(ctx)
	return err
}

// DeleteFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFunctionality(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteFunctionality(ctx, id)
	return err
}

// GetFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) GetFunctionality(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFunctionality(ctx, id)
	return err
}

// UpdateFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateFunctionality(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateFunctionality(ctx, id)
	return err
}

// ListIncidentRoles converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentRoles(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentRolesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentRoles(ctx, params)
	return err
}

// CreateIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentRole(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentRole(ctx)
	return err
}

// DeleteIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentRole(ctx, id)
	return err
}

// GetIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentRole(ctx, id)
	return err
}

// UpdateIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentRole(ctx, id)
	return err
}

// DeleteIncidentTask converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentTask(ctx, id)
	return err
}

// GetIncidentTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentTasks(ctx, id)
	return err
}

// UpdateIncidentTask converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentTask(ctx, id)
	return err
}

// ListIncidentTypes converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentTypes(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentTypesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentTypes(ctx, params)
	return err
}

// CreateIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentType(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentType(ctx)
	return err
}

// DeleteIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentType(ctx, id)
	return err
}

// GetIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentType(ctx, id)
	return err
}

// UpdateIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentType(ctx, id)
	return err
}

// ListIncidents converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidents(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidents(ctx, params)
	return err
}

// CreateIncident converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncident(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncident(ctx)
	return err
}

// DeleteIncident converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncident(ctx, id)
	return err
}

// GetIncident converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncident(ctx, id)
	return err
}

// UpdateIncident converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncident(ctx, id)
	return err
}

// MitigateIncident converts echo context to params.
func (w *ServerInterfaceWrapper) MitigateIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MitigateIncident(ctx, id)
	return err
}

// ResolveIncident converts echo context to params.
func (w *ServerInterfaceWrapper) ResolveIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ResolveIncident(ctx, id)
	return err
}

// ListIncidentActionItems converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentActionItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentActionItemsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentActionItems(ctx, incidentId, params)
	return err
}

// CreateIncidentActionItem converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentActionItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentActionItem(ctx, incidentId)
	return err
}

// ListAlert converts echo context to params.
func (w *ServerInterfaceWrapper) ListAlert(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAlertParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAlert(ctx, incidentId, params)
	return err
}

// AttachAlert converts echo context to params.
func (w *ServerInterfaceWrapper) AttachAlert(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AttachAlert(ctx, incidentId)
	return err
}

// ListIncidentEvents converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentEventsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentEvents(ctx, incidentId, params)
	return err
}

// CreateIncidentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentEvent(ctx, incidentId)
	return err
}

// ListIncidentTasks converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentTasksParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentTasks(ctx, incidentId, params)
	return err
}

// CreateIncidentTask converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentTask(ctx, incidentId)
	return err
}

// DeletePlaybookTask converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePlaybookTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePlaybookTask(ctx, id)
	return err
}

// GetPlaybookTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlaybookTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlaybookTasks(ctx, id)
	return err
}

// UpdatePlaybookTask converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePlaybookTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePlaybookTask(ctx, id)
	return err
}

// ListPlaybooks converts echo context to params.
func (w *ServerInterfaceWrapper) ListPlaybooks(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPlaybooksParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPlaybooks(ctx, params)
	return err
}

// CreatePlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePlaybook(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePlaybook(ctx)
	return err
}

// DeletePlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePlaybook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePlaybook(ctx, id)
	return err
}

// GetPlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlaybook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlaybook(ctx, id)
	return err
}

// UpdatePlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePlaybook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePlaybook(ctx, id)
	return err
}

// ListPlaybookTasks converts echo context to params.
func (w *ServerInterfaceWrapper) ListPlaybookTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "playbook_id" -------------
	var playbookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "playbook_id", runtime.ParamLocationPath, ctx.Param("playbook_id"), &playbookId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter playbook_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPlaybookTasksParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPlaybookTasks(ctx, playbookId, params)
	return err
}

// CreatePlaybookTask converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePlaybookTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "playbook_id" -------------
	var playbookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "playbook_id", runtime.ParamLocationPath, ctx.Param("playbook_id"), &playbookId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter playbook_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePlaybookTask(ctx, playbookId)
	return err
}

// ListPostmortemTemplates converts echo context to params.
func (w *ServerInterfaceWrapper) ListPostmortemTemplates(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPostmortemTemplatesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPostmortemTemplates(ctx, params)
	return err
}

// CreatePostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePostmortemTemplate(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePostmortemTemplate(ctx)
	return err
}

// DeletePostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePostmortemTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePostmortemTemplate(ctx, id)
	return err
}

// GetPostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostmortemTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPostmortemTemplate(ctx, id)
	return err
}

// UpdatePostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePostmortemTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePostmortemTemplate(ctx, id)
	return err
}

// GetIncidentPostmortem converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentPostmortem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentPostmortem(ctx, id)
	return err
}

// UpdateIncidentPostmortem converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentPostmortem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentPostmortem(ctx, id)
	return err
}

// ListPulses converts echo context to params.
func (w *ServerInterfaceWrapper) ListPulses(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPulsesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPulses(ctx, params)
	return err
}

// CreatePulse converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePulse(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePulse(ctx)
	return err
}

// GetPulse converts echo context to params.
func (w *ServerInterfaceWrapper) GetPulse(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPulse(ctx, id)
	return err
}

// UpdatePulse converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePulse(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePulse(ctx, id)
	return err
}

// ListServices converts echo context to params.
func (w *ServerInterfaceWrapper) ListServices(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListServicesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListServices(ctx, params)
	return err
}

// CreateService converts echo context to params.
func (w *ServerInterfaceWrapper) CreateService(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateService(ctx)
	return err
}

// DeleteService converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteService(ctx, id)
	return err
}

// GetService converts echo context to params.
func (w *ServerInterfaceWrapper) GetService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetService(ctx, id)
	return err
}

// UpdateService converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateService(ctx, id)
	return err
}

// ListSeverities converts echo context to params.
func (w *ServerInterfaceWrapper) ListSeverities(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSeveritiesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListSeverities(ctx, params)
	return err
}

// CreateSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSeverity(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSeverity(ctx)
	return err
}

// DeleteSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSeverity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSeverity(ctx, id)
	return err
}

// GetSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) GetSeverity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSeverity(ctx, id)
	return err
}

// UpdateSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSeverity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateSeverity(ctx, id)
	return err
}

// ListStatusPages converts echo context to params.
func (w *ServerInterfaceWrapper) ListStatusPages(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListStatusPagesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListStatusPages(ctx, params)
	return err
}

// CreateStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) CreateStatusPage(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateStatusPage(ctx)
	return err
}

// DeleteStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteStatusPage(ctx, id)
	return err
}

// GetStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatusPage(ctx, id)
	return err
}

// UpdateStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateStatusPage(ctx, id)
	return err
}

// ListTeams converts echo context to params.
func (w *ServerInterfaceWrapper) ListTeams(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTeamsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTeams(ctx, params)
	return err
}

// CreateTeam converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTeam(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTeam(ctx)
	return err
}

// DeleteTeam converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTeam(ctx, id)
	return err
}

// GetTeam converts echo context to params.
func (w *ServerInterfaceWrapper) GetTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTeam(ctx, id)
	return err
}

// UpdateTeam converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTeam(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v1/action_items/:id", wrapper.DeleteIncidentActionItem)
	router.GET(baseURL+"/v1/action_items/:id", wrapper.GetIncidentActionItems)
	router.PUT(baseURL+"/v1/action_items/:id", wrapper.UpdateIncidentActionItem)
	router.GET(baseURL+"/v1/alerts", wrapper.ListAlerts)
	router.GET(baseURL+"/v1/alerts/:id", wrapper.GetAlert)
	router.GET(baseURL+"/v1/causes", wrapper.ListCauses)
	router.POST(baseURL+"/v1/causes", wrapper.CreateCause)
	router.DELETE(baseURL+"/v1/causes/:id", wrapper.DeleteCause)
	router.GET(baseURL+"/v1/causes/:id", wrapper.GetCause)
	router.PUT(baseURL+"/v1/causes/:id", wrapper.UpdateCause)
	router.GET(baseURL+"/v1/environments", wrapper.ListEnvironments)
	router.POST(baseURL+"/v1/environments", wrapper.CreateEnvironment)
	router.DELETE(baseURL+"/v1/environments/:id", wrapper.DeleteEnvironment)
	router.GET(baseURL+"/v1/environments/:id", wrapper.GetEnvironment)
	router.PUT(baseURL+"/v1/environments/:id", wrapper.UpdateEnvironment)
	router.DELETE(baseURL+"/v1/events/:id", wrapper.DeleteIncidentEvent)
	router.GET(baseURL+"/v1/events/:id", wrapper.GetIncidentEvents)
	router.PUT(baseURL+"/v1/events/:id", wrapper.UpdateIncidentEvent)
	router.GET(baseURL+"/v1/functionalities", wrapper.ListFunctionalities)
	router.POST(baseURL+"/v1/functionalities", wrapper.CreateFunctionality)
	router.DELETE(baseURL+"/v1/functionalities/:id", wrapper.DeleteFunctionality)
	router.GET(baseURL+"/v1/functionalities/:id", wrapper.GetFunctionality)
	router.PUT(baseURL+"/v1/functionalities/:id", wrapper.UpdateFunctionality)
	router.GET(baseURL+"/v1/incident_roles", wrapper.ListIncidentRoles)
	router.POST(baseURL+"/v1/incident_roles", wrapper.CreateIncidentRole)
	router.DELETE(baseURL+"/v1/incident_roles/:id", wrapper.DeleteIncidentRole)
	router.GET(baseURL+"/v1/incident_roles/:id", wrapper.GetIncidentRole)
	router.PUT(baseURL+"/v1/incident_roles/:id", wrapper.UpdateIncidentRole)
	router.DELETE(baseURL+"/v1/incident_tasks/:id", wrapper.DeleteIncidentTask)
	router.GET(baseURL+"/v1/incident_tasks/:id", wrapper.GetIncidentTasks)
	router.PUT(baseURL+"/v1/incident_tasks/:id", wrapper.UpdateIncidentTask)
	router.GET(baseURL+"/v1/incident_types", wrapper.ListIncidentTypes)
	router.POST(baseURL+"/v1/incident_types", wrapper.CreateIncidentType)
	router.DELETE(baseURL+"/v1/incident_types/:id", wrapper.DeleteIncidentType)
	router.GET(baseURL+"/v1/incident_types/:id", wrapper.GetIncidentType)
	router.PUT(baseURL+"/v1/incident_types/:id", wrapper.UpdateIncidentType)
	router.GET(baseURL+"/v1/incidents", wrapper.ListIncidents)
	router.POST(baseURL+"/v1/incidents", wrapper.CreateIncident)
	router.DELETE(baseURL+"/v1/incidents/:id", wrapper.DeleteIncident)
	router.GET(baseURL+"/v1/incidents/:id", wrapper.GetIncident)
	router.PUT(baseURL+"/v1/incidents/:id", wrapper.UpdateIncident)
	router.PUT(baseURL+"/v1/incidents/:id/mitigate", wrapper.MitigateIncident)
	router.PUT(baseURL+"/v1/incidents/:id/resolve", wrapper.ResolveIncident)
	router.GET(baseURL+"/v1/incidents/:incident_id/action_items", wrapper.ListIncidentActionItems)
	router.POST(baseURL+"/v1/incidents/:incident_id/action_items", wrapper.CreateIncidentActionItem)
	router.GET(baseURL+"/v1/incidents/:incident_id/alerts", wrapper.ListAlert)
	router.POST(baseURL+"/v1/incidents/:incident_id/alerts", wrapper.AttachAlert)
	router.GET(baseURL+"/v1/incidents/:incident_id/events", wrapper.ListIncidentEvents)
	router.POST(baseURL+"/v1/incidents/:incident_id/events", wrapper.CreateIncidentEvent)
	router.GET(baseURL+"/v1/incidents/:incident_id/incident_tasks", wrapper.ListIncidentTasks)
	router.POST(baseURL+"/v1/incidents/:incident_id/incident_tasks", wrapper.CreateIncidentTask)
	router.DELETE(baseURL+"/v1/playbook_tasks/:id", wrapper.DeletePlaybookTask)
	router.GET(baseURL+"/v1/playbook_tasks/:id", wrapper.GetPlaybookTasks)
	router.PUT(baseURL+"/v1/playbook_tasks/:id", wrapper.UpdatePlaybookTask)
	router.GET(baseURL+"/v1/playbooks", wrapper.ListPlaybooks)
	router.POST(baseURL+"/v1/playbooks", wrapper.CreatePlaybook)
	router.DELETE(baseURL+"/v1/playbooks/:id", wrapper.DeletePlaybook)
	router.GET(baseURL+"/v1/playbooks/:id", wrapper.GetPlaybook)
	router.PUT(baseURL+"/v1/playbooks/:id", wrapper.UpdatePlaybook)
	router.GET(baseURL+"/v1/playbooks/:playbook_id/playbook_tasks", wrapper.ListPlaybookTasks)
	router.POST(baseURL+"/v1/playbooks/:playbook_id/playbook_tasks", wrapper.CreatePlaybookTask)
	router.GET(baseURL+"/v1/post_mortem_templates", wrapper.ListPostmortemTemplates)
	router.POST(baseURL+"/v1/post_mortem_templates", wrapper.CreatePostmortemTemplate)
	router.DELETE(baseURL+"/v1/post_mortem_templates/:id", wrapper.DeletePostmortemTemplate)
	router.GET(baseURL+"/v1/post_mortem_templates/:id", wrapper.GetPostmortemTemplate)
	router.PUT(baseURL+"/v1/post_mortem_templates/:id", wrapper.UpdatePostmortemTemplate)
	router.GET(baseURL+"/v1/post_mortems/:id", wrapper.GetIncidentPostmortem)
	router.PUT(baseURL+"/v1/post_mortems/:id", wrapper.UpdateIncidentPostmortem)
	router.GET(baseURL+"/v1/pulses", wrapper.ListPulses)
	router.POST(baseURL+"/v1/pulses", wrapper.CreatePulse)
	router.GET(baseURL+"/v1/pulses/:id", wrapper.GetPulse)
	router.PUT(baseURL+"/v1/pulses/:id", wrapper.UpdatePulse)
	router.GET(baseURL+"/v1/services", wrapper.ListServices)
	router.POST(baseURL+"/v1/services", wrapper.CreateService)
	router.DELETE(baseURL+"/v1/services/:id", wrapper.DeleteService)
	router.GET(baseURL+"/v1/services/:id", wrapper.GetService)
	router.PUT(baseURL+"/v1/services/:id", wrapper.UpdateService)
	router.GET(baseURL+"/v1/severities", wrapper.ListSeverities)
	router.POST(baseURL+"/v1/severities", wrapper.CreateSeverity)
	router.DELETE(baseURL+"/v1/severities/:id", wrapper.DeleteSeverity)
	router.GET(baseURL+"/v1/severities/:id", wrapper.GetSeverity)
	router.PUT(baseURL+"/v1/severities/:id", wrapper.UpdateSeverity)
	router.GET(baseURL+"/v1/status-pages", wrapper.ListStatusPages)
	router.POST(baseURL+"/v1/status-pages", wrapper.CreateStatusPage)
	router.DELETE(baseURL+"/v1/status-pages/:id", wrapper.DeleteStatusPage)
	router.GET(baseURL+"/v1/status-pages/:id", wrapper.GetStatusPage)
	router.PUT(baseURL+"/v1/status-pages/:id", wrapper.UpdateStatusPage)
	router.GET(baseURL+"/v1/teams", wrapper.ListTeams)
	router.POST(baseURL+"/v1/teams", wrapper.CreateTeam)
	router.DELETE(baseURL+"/v1/teams/:id", wrapper.DeleteTeam)
	router.GET(baseURL+"/v1/teams/:id", wrapper.GetTeam)
	router.PUT(baseURL+"/v1/teams/:id", wrapper.UpdateTeam)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"J+pHzF4FAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

