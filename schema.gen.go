// Package rootly provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package rootly

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Bearer_authScopes = "bearer_auth.Scopes"
)

// Alert defines model for alert.
type Alert struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Environments attached to the alert
	Environments *[]struct {
		// Embedded struct due to allOf(#/components/schemas/environment)
		Environment `yaml:",inline"`
	} `json:"environments,omitempty"`
	Labels *[]struct {

		// Key of the tag
		Key string `json:"key"`

		// Value of the tag
		Value string `json:"value"`
	} `json:"labels,omitempty"`

	// Services attached to the alert
	Services *[]struct {
		// Embedded struct due to allOf(#/components/schemas/service)
		Service `yaml:",inline"`
	} `json:"services,omitempty"`

	// The source of the alert
	Source string `json:"source"`

	// The summary of the alert
	Summary string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// AlertList defines model for alert_list.
type AlertList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/alert)
			Alert `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the alert
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// AlertResponse defines model for alert_response.
type AlertResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/alert)
			Alert `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the alert
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Cause defines model for cause.
type Cause struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the cause
	Description *string `json:"description"`

	// The name of the cause
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// CauseList defines model for cause_list.
type CauseList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/cause)
			Cause `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the cause
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// CauseResponse defines model for cause_response.
type CauseResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/cause)
			Cause `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the cause
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Environment defines model for environment.
type Environment struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the environment
	Description *string `json:"description"`

	// The name of the environment
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// EnvironmentList defines model for environment_list.
type EnvironmentList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/environment)
			Environment `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the environment
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// EnvironmentResponse defines model for environment_response.
type EnvironmentResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/environment)
			Environment `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the environment
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// ErrorsList defines model for errors_list.
type ErrorsList struct {
	Errors *[]struct {
		Code   *string `json:"code"`
		Detail *string `json:"detail"`
		Status string  `json:"status"`
		Title  string  `json:"title"`
	} `json:"errors,omitempty"`
}

// Functionality defines model for functionality.
type Functionality struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the functionality
	Description *string `json:"description"`

	// The name of the functionality
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// FunctionalityList defines model for functionality_list.
type FunctionalityList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/functionality)
			Functionality `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the functionality
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// FunctionalityResponse defines model for functionality_response.
type FunctionalityResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/functionality)
			Functionality `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the functionality
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Incident defines model for incident.
type Incident struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the incident
	Description *string `json:"description"`

	// The Environment ID to attach to the incident
	EnvironmentId *string `json:"environment_id"`

	// The Functionality ID's to attach to the incident
	FunctionalityIds *[]string `json:"functionality_ids"`

	// The Team ID's to attach to the incident
	GroupIds *[]string `json:"group_ids"`

	// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
	Labels *map[string]interface{} `json:"labels"`

	// The Service ID's to attach to the incident
	ServiceIds *[]string `json:"service_ids"`

	// The Severity ID to attach to the incident
	SeverityId *string `json:"severity_id"`

	// The title of the incident
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentActionItem defines model for incident_action_item.
type IncidentActionItem struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of incident action item
	Description *string `json:"description"`

	// The priority of the incident action item
	Priority *string `json:"priority,omitempty"`

	// The status of incident the action item
	Status *string `json:"status,omitempty"`

	// The summary of the incident action item
	Summary string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentActionItemList defines model for incident_action_item_list.
type IncidentActionItemList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_action_item)
			IncidentActionItem `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident action item
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentActionItemResponse defines model for incident_action_item_response.
type IncidentActionItemResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_action_item)
			IncidentActionItem `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident action item
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// IncidentEvent defines model for incident_event.
type IncidentEvent struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The summary of the incident event
	Event string `json:"event"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// The visibility of the incident action item
	Visibility *string `json:"visibility,omitempty"`
}

// IncidentEventList defines model for incident_event_list.
type IncidentEventList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_event)
			IncidentEvent `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident event
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentEventResponse defines model for incident_event_response.
type IncidentEventResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_event)
			IncidentEvent `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident event
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// IncidentList defines model for incident_list.
type IncidentList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident)
			Incident `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentPostMortem defines model for incident_post_mortem.
type IncidentPostMortem struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Date of mitigation
	MitigatedAt *string `json:"mitigated_at"`

	// Date of resolution
	ResolvedAt *string `json:"resolved_at"`

	// Show services impacted of the incident postmortem
	ShowFunctionalitiesImpacted *bool `json:"show_functionalities_impacted,omitempty"`

	// Show groups impacted of the incident postmortem
	ShowGroupsImpacted *bool `json:"show_groups_impacted,omitempty"`

	// Show functionalities impacted of the incident postmortem
	ShowServicesImpacted *bool `json:"show_services_impacted,omitempty"`

	// Show events timeline of the incident postmortem
	ShowTimeline *bool `json:"show_timeline,omitempty"`

	// Show action items in the timeline of the incident postmortem
	ShowTimelineActionItems *bool `json:"show_timeline_action_items,omitempty"`

	// Show genius events in the timeline of the incident postmortem
	ShowTimelineGenius *bool `json:"show_timeline_genius,omitempty"`

	// Show tasks in the timeline of the incident postmortem
	ShowTimelineTasks *bool `json:"show_timeline_tasks,omitempty"`

	// Show trail events in the timeline of the incident postmortem
	ShowTimelineTrail *bool `json:"show_timeline_trail,omitempty"`

	// Date of started at
	StartedAt *string `json:"started_at"`

	// The status of the incident postmortem
	Status *string `json:"status,omitempty"`

	// The title of the incident postmortem
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentPostMortemResponse defines model for incident_post_mortem_response.
type IncidentPostMortemResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_post_mortem)
			IncidentPostMortem `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident postmortem
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// IncidentResponse defines model for incident_response.
type IncidentResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident)
			Incident `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// IncidentRole defines model for incident_role.
type IncidentRole struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the incident role
	Description *string `json:"description"`

	// The name of the incident role
	Name string `json:"name"`

	// The summary of the incident role
	Summary *string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentRoleList defines model for incident_role_list.
type IncidentRoleList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_role)
			IncidentRole `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident role
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentRoleResponse defines model for incident_role_response.
type IncidentRoleResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_role)
			IncidentRole `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident role
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// IncidentTask defines model for incident_task.
type IncidentTask struct {
	Checked *bool `json:"checked,omitempty"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of incident task
	Description *string `json:"description"`

	// The task of the incident task
	Task string `json:"task"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentTaskList defines model for incident_task_list.
type IncidentTaskList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_task)
			IncidentTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentTaskResponse defines model for incident_task_response.
type IncidentTaskResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_task)
			IncidentTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// IncidentType defines model for incident_type.
type IncidentType struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the incident type
	Description *string `json:"description"`

	// The name of the incident type
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentTypeList defines model for incident_type_list.
type IncidentTypeList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_type)
			IncidentType `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident type
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentTypeResponse defines model for incident_type_response.
type IncidentTypeResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_type)
			IncidentType `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident type
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Links defines model for links.
type Links struct {
	First string  `json:"first"`
	Last  string  `json:"last"`
	Next  *string `json:"next"`
	Prev  *string `json:"prev"`
	Self  string  `json:"self"`
}

// NewAlert defines model for new_alert.
type NewAlert struct {
	Data struct {
		Attributes struct {

			// Alert Id to attach to the incident
			AlertIds *[]string `json:"alert_ids"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewCause defines model for new_cause.
type NewCause struct {
	Data struct {
		Attributes struct {

			// The description of the cause
			Description *string `json:"description"`

			// The name of the cause
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewEnvironment defines model for new_environment.
type NewEnvironment struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the environment
			Description *string `json:"description"`

			// The name of the environment
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewFunctionality defines model for new_functionality.
type NewFunctionality struct {
	Data struct {
		Attributes struct {

			// The description of the functionality
			Description *string `json:"description"`

			// The name of the functionality
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewIncident defines model for new_incident.
type NewIncident struct {
	Data struct {
		Attributes struct {

			// Create a task on Asana as well (if integration enabled)
			CreateOnAsana *bool `json:"create_on_asana"`

			// Create an story on Clubhouse as well (if integration enabled)
			CreateOnClubhouse *bool `json:"create_on_clubhouse"`

			// Create a Google meet meeting as well (if integration enabled)
			CreateOnGoogleMeet *bool `json:"create_on_google_meet"`

			// Create an issue on Jira as well (if integration enabled)
			CreateOnJira *bool `json:"create_on_jira"`

			// Create an issue on Linear as well (if integration enabled)
			CreateOnLinear *bool `json:"create_on_linear"`

			// Create a incident on Opsgenie as well  (if integration enabled)
			CreateOnOpsgenie *bool `json:"create_on_opsgenie"`

			// Create an incident on PagerDuty as well for specified PagerDuty services ids (if integration enabled)
			CreateOnPagerduty *bool `json:"create_on_pagerduty"`

			// Create an incident on ServiceNow as well (if integration enabled)
			CreateOnServiceNow *bool `json:"create_on_service_now"`

			// Create an incident on Slack as well (if integration enabled)
			CreateOnSlack *bool `json:"create_on_slack"`

			// Create a card on Trello as well (if integration enabled)
			CreateOnTrello *bool `json:"create_on_trello"`

			// Create an issue on Zendesk as well (if integration enabled)
			CreateOnZendesk *bool `json:"create_on_zendesk"`

			// Create a Zoom meeting as well (if integration enabled)
			CreateOnZoom *bool `json:"create_on_zoom"`

			// The description of the incident
			Description *string `json:"description"`

			// The Environment ID to attach to the incident
			EnvironmentId *string `json:"environment_id"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
			Labels *map[string]interface{} `json:"labels"`

			// Emails you want to notify
			NotifyEmails *[]string `json:"notify_emails"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID to attach to the incident
			SeverityId *string `json:"severity_id"`

			// The title of the incident
			Title string `json:"title"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewIncidentActionItem defines model for new_incident_action_item.
type NewIncidentActionItem struct {
	Data struct {
		Attributes struct {

			// Create a Asana task as well (if integration enabled)
			CreateOnAsana *bool `json:"create_on_asana"`

			// Create a Clubhouse task as well (if integration enabled)
			CreateOnClubhouse *bool `json:"create_on_clubhouse"`

			// Create an Jira issue as well (if integration enabled)
			CreateOnJira *bool `json:"create_on_jira"`

			// Create an Linear issue as well (if integration enabled)
			CreateOnLinear *bool `json:"create_on_linear"`

			// Create a Trello task as well (if integration enabled)
			CreateOnTrello *bool `json:"create_on_trello"`

			// Create an issue on Zendesk as well (if integration enabled)
			CreateOnZendesk *bool `json:"create_on_zendesk"`

			// The description of the incident action item
			Description *string `json:"description"`

			// The priority of the incident action item
			Priority *string `json:"priority,omitempty"`

			// The status of incident the action item
			Status *string `json:"status,omitempty"`

			// The summary of the incident action item
			Summary string `json:"summary"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewIncidentEvent defines model for new_incident_event.
type NewIncidentEvent struct {
	Data struct {
		Attributes struct {

			// The summary of the incident event
			Event string `json:"event"`

			// The visibility of the incident action item
			Visibility *string `json:"visibility,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewIncidentRole defines model for new_incident_role.
type NewIncidentRole struct {
	Data struct {
		Attributes struct {

			// The description of the incident role
			Description *string `json:"description"`

			// The name of the incident role
			Name string `json:"name"`

			// The summary of the incident role
			Summary *string `json:"summary"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewIncidentTask defines model for new_incident_task.
type NewIncidentTask struct {
	Data struct {
		Attributes struct {
			Checked *bool `json:"checked,omitempty"`

			// The description of the incident task
			Description *string `json:"description"`

			// The task of the incident task
			Task string `json:"task"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewIncidentType defines model for new_incident_type.
type NewIncidentType struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the incident type
			Description *string `json:"description"`

			// The name of the incident type
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewPlaybook defines model for new_playbook.
type NewPlaybook struct {
	Data struct {
		Attributes struct {

			// The summary of the playbook
			Summary *string `json:"summary"`

			// The title of the playbook
			Title string `json:"title"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewPlaybookTask defines model for new_playbook_task.
type NewPlaybookTask struct {
	Data struct {
		Attributes struct {

			// The description of the incident task
			Description *string `json:"description"`

			// The task of the incident task
			Task string `json:"task"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewPostMortemTemplate defines model for new_post_mortem_template.
type NewPostMortemTemplate struct {
	Data struct {
		Attributes struct {

			// Default selected template when editing a postmortem
			Default *bool `json:"default"`

			// The name of the postmortem template
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewPulse defines model for new_pulse.
type NewPulse struct {
	Data struct {
		Attributes struct {

			// Pulse end datetime
			EndedAt *time.Time `json:"ended_at"`

			// The Environment ID's to attach to the pulse
			EnvironmentIds *[]string `json:"environment_ids"`
			Labels         *[]struct {

				// Key of the tag
				Key string `json:"key"`

				// Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`

			// The Service ID's to attach to the pulse
			ServiceIds *[]string `json:"service_ids"`

			// Pulse start datetime
			StartedAt *time.Time `json:"started_at"`

			// The summary of the pulse
			Summary string `json:"summary"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewService defines model for new_service.
type NewService struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the service
			Description *string `json:"description"`

			// The name of the service
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewSeverity defines model for new_severity.
type NewSeverity struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the severity
			Description *string `json:"description"`

			// The name of the severity
			Name string `json:"name"`

			// The severity of the severity
			Severity *string `json:"severity,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewStatusPage defines model for new_status_page.
type NewStatusPage struct {
	Data struct {
		Attributes struct {

			// Allow search engines to include your public status page in search results.
			AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

			// The description of the status page
			Description *string `json:"description"`

			// Enabled / Disable the status page
			Enabled *bool `json:"enabled"`

			// The color of the footer. Eg. "#1F2F41"
			FooterColor *string `json:"footer_color"`

			// The color of the header. Eg. "#0061F2"
			HeaderColor *string `json:"header_color"`

			// Make the status page accessible to the public
			Public *bool `json:"public"`

			// Show uptime
			ShowUptime *bool `json:"show_uptime"`

			// Show uptime over x days
			ShowUptimeLastDays *int `json:"show_uptime_last_days"`

			// The title of the status page
			Title string `json:"title"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewTeam defines model for new_team.
type NewTeam struct {
	Data struct {
		Attributes struct {

			// The description of the team
			Description *string `json:"description"`

			// The name of the team
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// Playbook defines model for playbook.
type Playbook struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The summary of the playbook
	Summary *string `json:"summary"`

	// The title of the playbook
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PlaybookList defines model for playbook_list.
type PlaybookList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook)
			Playbook `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the playbook
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PlaybookResponse defines model for playbook_response.
type PlaybookResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook)
			Playbook `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the playbook
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// PlaybookTask defines model for playbook_task.
type PlaybookTask struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of incident task
	Description *string `json:"description"`

	// The task of the incident task
	Task string `json:"task"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PlaybookTaskList defines model for playbook_task_list.
type PlaybookTaskList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook_task)
			PlaybookTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PlaybookTaskResponse defines model for playbook_task_response.
type PlaybookTaskResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook_task)
			PlaybookTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// PostMortemTemplate defines model for post_mortem_template.
type PostMortemTemplate struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Default selected template when editing a postmortem
	Default *bool `json:"default"`

	// The name of the postmortem template
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PostMortemTemplateList defines model for post_mortem_template_list.
type PostMortemTemplateList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/post_mortem_template)
			PostMortemTemplate `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the post_mortem_template
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PostMortemTemplateResponse defines model for post_mortem_template_response.
type PostMortemTemplateResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/post_mortem_template)
			PostMortemTemplate `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the post_mortem_template
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Pulse defines model for pulse.
type Pulse struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Environments attached to the pulse
	Environments *[]struct {
		// Embedded struct due to allOf(#/components/schemas/environment)
		Environment `yaml:",inline"`
	} `json:"environments,omitempty"`
	Labels *[]struct {

		// Key of the tag
		Key string `json:"key"`

		// Value of the tag
		Value string `json:"value"`
	} `json:"labels,omitempty"`

	// Services attached to the pulse
	Services *[]struct {
		// Embedded struct due to allOf(#/components/schemas/service)
		Service `yaml:",inline"`
	} `json:"services,omitempty"`

	// The summary of the pulse
	Summary string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PulseList defines model for pulse_list.
type PulseList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/pulse)
			Pulse `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the pulse
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PulseResponse defines model for pulse_response.
type PulseResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/pulse)
			Pulse `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the pulse
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Service defines model for service.
type Service struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the service
	Description *string `json:"description"`

	// The name of the service
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// ServiceList defines model for service_list.
type ServiceList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/service)
			Service `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the service
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// ServiceResponse defines model for service_response.
type ServiceResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/service)
			Service `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the service
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Severity defines model for severity.
type Severity struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the severity
	Description *string `json:"description"`

	// The name of the severity
	Name string `json:"name"`

	// The severity of the severity
	Severity *string `json:"severity,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// SeverityList defines model for severity_list.
type SeverityList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/severity)
			Severity `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the severity
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// SeverityResponse defines model for severity_response.
type SeverityResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/severity)
			Severity `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the severity
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// StatusPage defines model for status_page.
type StatusPage struct {

	// Allow search engines to include your public status page in search results.
	AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the status page
	Description *string `json:"description"`

	// Enabled / Disable the status page
	Enabled *bool `json:"enabled"`

	// The color of the footer. Eg. "#1F2F41"
	FooterColor *string `json:"footer_color"`

	// The color of the header. Eg. "#0061F2"
	HeaderColor *string `json:"header_color"`

	// Make the status page accessible to the public
	Public *bool `json:"public"`

	// Show uptime
	ShowUptime *bool `json:"show_uptime"`

	// Show uptime over x days
	ShowUptimeLastDays *int `json:"show_uptime_last_days"`

	// The title of the status page
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// StatusPageList defines model for status_page_list.
type StatusPageList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/status_page)
			StatusPage `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the status page
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// StatusPageResponse defines model for status_page_response.
type StatusPageResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/status_page)
			StatusPage `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the status page
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Team defines model for team.
type Team struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the team
	Description *string `json:"description"`

	// The name of the team
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// TeamList defines model for team_list.
type TeamList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/team)
			Team `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the team
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// TeamResponse defines model for team_response.
type TeamResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/team)
			Team `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the team
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateCause defines model for update_cause.
type UpdateCause struct {
	Data struct {
		Attributes struct {

			// The description of the cause
			Description *string `json:"description"`

			// The name of the cause
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateEnvironment defines model for update_environment.
type UpdateEnvironment struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the environment
			Description *string `json:"description"`

			// The name of the environment
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateFunctionality defines model for update_functionality.
type UpdateFunctionality struct {
	Data struct {
		Attributes struct {

			// The description of the functionality
			Description *string `json:"description"`

			// The name of the functionality
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncident defines model for update_incident.
type UpdateIncident struct {
	Data struct {
		Attributes struct {

			// The description of the incident
			Description *string `json:"description"`

			// The Environment ID to attach to the incident
			EnvironmentId *string `json:"environment_id"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
			Labels *map[string]interface{} `json:"labels"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID to attach to the incident
			SeverityId *string `json:"severity_id"`

			// The title of the incident
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncidentActionItem defines model for update_incident_action_item.
type UpdateIncidentActionItem struct {
	Data struct {
		Attributes struct {

			// The description of the incident action item
			Description *string `json:"description"`

			// The priority of the incident action item
			Priority *string `json:"priority,omitempty"`

			// The status of incident the action item
			Status *string `json:"status,omitempty"`

			// The summary of the incident action item
			Summary *string `json:"summary,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncidentEvent defines model for update_incident_event.
type UpdateIncidentEvent struct {
	Data struct {
		Attributes struct {

			// The summary of the incident event
			Event *string `json:"event,omitempty"`

			// The visibility of the incident action item
			Visibility *string `json:"visibility,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncidentPostMortem defines model for update_incident_post_mortem.
type UpdateIncidentPostMortem struct {
	Data struct {
		Attributes struct {

			// Date of mitigation
			MitigatedAt *string `json:"mitigated_at"`

			// Date of resolution
			ResolvedAt *string `json:"resolved_at"`

			// Show services impacted of the incident postmortem
			ShowFunctionalitiesImpacted *bool `json:"show_functionalities_impacted,omitempty"`

			// Show groups impacted of the incident postmortem
			ShowGroupsImpacted *bool `json:"show_groups_impacted,omitempty"`

			// Show functionalities impacted of the incident postmortem
			ShowServicesImpacted *bool `json:"show_services_impacted,omitempty"`

			// Show events timeline of the incident postmortem
			ShowTimeline *bool `json:"show_timeline,omitempty"`

			// Show action items in the timeline of the incident postmortem
			ShowTimelineActionItems *bool `json:"show_timeline_action_items,omitempty"`

			// Show genius events in the timeline of the incident postmortem
			ShowTimelineGenius *bool `json:"show_timeline_genius,omitempty"`

			// Show tasks in the timeline of the incident postmortem
			ShowTimelineTasks *bool `json:"show_timeline_tasks,omitempty"`

			// Show trail events in the timeline of the incident postmortem
			ShowTimelineTrail *bool `json:"show_timeline_trail,omitempty"`

			// Date of started at
			StartedAt *string `json:"started_at"`

			// The status of the incident postmortem
			Status *string `json:"status,omitempty"`

			// The title of the incident postmortem
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncidentRole defines model for update_incident_role.
type UpdateIncidentRole struct {
	Data struct {
		Attributes struct {

			// The description of the incident role
			Description *string `json:"description"`

			// The name of the incident role
			Name *string `json:"name,omitempty"`

			// The summary of the incident role
			Summary *string `json:"summary"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncidentTask defines model for update_incident_task.
type UpdateIncidentTask struct {
	Data struct {
		Attributes struct {
			Checked *bool `json:"checked,omitempty"`

			// The description of the incident task
			Description *string `json:"description"`

			// The task of the incident task
			Task *string `json:"task,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncidentType defines model for update_incident_type.
type UpdateIncidentType struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the incident type
			Description *string `json:"description"`

			// The name of the incident type
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdatePlaybook defines model for update_playbook.
type UpdatePlaybook struct {
	Data struct {
		Attributes struct {

			// The summary of the playbook
			Summary *string `json:"summary"`

			// The title of the playbook
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdatePlaybookTask defines model for update_playbook_task.
type UpdatePlaybookTask struct {
	Data struct {
		Attributes struct {

			// The description of the incident task
			Description *string `json:"description"`

			// The task of the incident task
			Task *string `json:"task,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdatePostMortemTemplate defines model for update_post_mortem_template.
type UpdatePostMortemTemplate struct {
	Data struct {
		Attributes struct {

			// Default selected template when editing a postmortem
			Default *bool `json:"default"`

			// The name of the postmortem template
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdatePulse defines model for update_pulse.
type UpdatePulse struct {
	Data struct {
		Attributes struct {

			// Pulse end datetime
			EndedAt *time.Time `json:"ended_at"`

			// The Environment ID's to attach to the pulse
			EnvironmentIds *[]string `json:"environment_ids"`
			Labels         *[]struct {

				// Key of the tag
				Key string `json:"key"`

				// Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`

			// The Service ID's to attach to the pulse
			ServiceIds *[]string `json:"service_ids"`

			// Pulse start datetime
			StartedAt *time.Time `json:"started_at"`

			// The summary of the pulse
			Summary *string `json:"summary,omitempty"`
		} `json:"attributes"`
		Type *string `json:"type,omitempty"`
	} `json:"data"`
}

// UpdateService defines model for update_service.
type UpdateService struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the service
			Description *string `json:"description"`

			// The name of the service
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateSeverity defines model for update_severity.
type UpdateSeverity struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the severity
			Description *string `json:"description"`

			// The name of the severity
			Name *string `json:"name,omitempty"`

			// The severity of the severity
			Severity *string `json:"severity,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateStatusPage defines model for update_status_page.
type UpdateStatusPage struct {
	Data struct {
		Attributes struct {

			// Allow search engines to include your public status page in search results.
			AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

			// The description of the status page
			Description *string `json:"description"`

			// Enabled / Disable the status page
			Enabled *bool `json:"enabled"`

			// The color of the footer. Eg. "#1F2F41"
			FooterColor *string `json:"footer_color"`

			// The color of the header. Eg. "#0061F2"
			HeaderColor *string `json:"header_color"`

			// Make the status page accessible to the public
			Public *bool `json:"public"`

			// Show uptime
			ShowUptime *bool `json:"show_uptime"`

			// Show uptime over x days
			ShowUptimeLastDays *int `json:"show_uptime_last_days"`

			// The title of the status page
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateTeam defines model for update_team.
type UpdateTeam struct {
	Data struct {
		Attributes struct {

			// The description of the team
			Description *string `json:"description"`

			// The name of the team
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// ListAlertsParams defines parameters for ListAlerts.
type ListAlertsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListCausesParams defines parameters for ListCauses.
type ListCausesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListEnvironmentsParams defines parameters for ListEnvironments.
type ListEnvironmentsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListFunctionalitiesParams defines parameters for ListFunctionalities.
type ListFunctionalitiesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentRolesParams defines parameters for ListIncidentRoles.
type ListIncidentRolesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentTypesParams defines parameters for ListIncidentTypes.
type ListIncidentTypesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentsParams defines parameters for ListIncidents.
type ListIncidentsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentActionItemsParams defines parameters for ListIncidentActionItems.
type ListIncidentActionItemsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListAlertParams defines parameters for ListAlert.
type ListAlertParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentEventsParams defines parameters for ListIncidentEvents.
type ListIncidentEventsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentTasksParams defines parameters for ListIncidentTasks.
type ListIncidentTasksParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListPlaybooksParams defines parameters for ListPlaybooks.
type ListPlaybooksParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListPlaybookTasksParams defines parameters for ListPlaybookTasks.
type ListPlaybookTasksParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListPostmortemTemplatesParams defines parameters for ListPostmortemTemplates.
type ListPostmortemTemplatesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListPulsesParams defines parameters for ListPulses.
type ListPulsesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListServicesParams defines parameters for ListServices.
type ListServicesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListSeveritiesParams defines parameters for ListSeverities.
type ListSeveritiesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListStatusPagesParams defines parameters for ListStatusPages.
type ListStatusPagesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListTeamsParams defines parameters for ListTeams.
type ListTeamsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteIncidentActionItem request
	DeleteIncidentActionItem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentActionItems request
	GetIncidentActionItems(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentActionItem request  with any body
	UpdateIncidentActionItemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAlerts request
	ListAlerts(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlert request
	GetAlert(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCauses request
	ListCauses(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCause request  with any body
	CreateCauseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCause request
	DeleteCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCause request
	GetCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCause request  with any body
	UpdateCauseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEnvironments request
	ListEnvironments(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEnvironment request  with any body
	CreateEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnvironment request
	DeleteEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironment request
	GetEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEnvironment request  with any body
	UpdateEnvironmentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentEvent request
	DeleteIncidentEvent(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentEvents request
	GetIncidentEvents(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentEvent request  with any body
	UpdateIncidentEventWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFunctionalities request
	ListFunctionalities(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFunctionality request  with any body
	CreateFunctionalityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFunctionality request
	DeleteFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionality request
	GetFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFunctionality request  with any body
	UpdateFunctionalityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentRoles request
	ListIncidentRoles(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentRole request  with any body
	CreateIncidentRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentRole request
	DeleteIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentRole request
	GetIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentRole request  with any body
	UpdateIncidentRoleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentTask request
	DeleteIncidentTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentTasks request
	GetIncidentTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentTask request  with any body
	UpdateIncidentTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentTypes request
	ListIncidentTypes(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentType request  with any body
	CreateIncidentTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentType request
	DeleteIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentType request
	GetIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentType request  with any body
	UpdateIncidentTypeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidents request
	ListIncidents(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncident request  with any body
	CreateIncidentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncident request
	DeleteIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncident request
	GetIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncident request  with any body
	UpdateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentActionItems request
	ListIncidentActionItems(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentActionItem request  with any body
	CreateIncidentActionItemWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAlert request
	ListAlert(ctx context.Context, incidentId string, params *ListAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AttachAlert request  with any body
	AttachAlertWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentEvents request
	ListIncidentEvents(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentEvent request  with any body
	CreateIncidentEventWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentTasks request
	ListIncidentTasks(ctx context.Context, incidentId string, params *ListIncidentTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentTask request  with any body
	CreateIncidentTaskWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePlaybookTask request
	DeletePlaybookTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaybookTasks request
	GetPlaybookTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlaybookTask request  with any body
	UpdatePlaybookTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPlaybooks request
	ListPlaybooks(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlaybook request  with any body
	CreatePlaybookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePlaybook request
	DeletePlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaybook request
	GetPlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlaybook request  with any body
	UpdatePlaybookWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPlaybookTasks request
	ListPlaybookTasks(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlaybookTask request  with any body
	CreatePlaybookTaskWithBody(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPostmortemTemplates request
	ListPostmortemTemplates(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePostmortemTemplate request  with any body
	CreatePostmortemTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePostmortemTemplate request
	DeletePostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPostmortemTemplate request
	GetPostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePostmortemTemplate request  with any body
	UpdatePostmortemTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentPostmortem request
	GetIncidentPostmortem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentPostmortem request  with any body
	UpdateIncidentPostmortemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPulses request
	ListPulses(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePulse request  with any body
	CreatePulseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPulse request
	GetPulse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePulse request  with any body
	UpdatePulseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListServices request
	ListServices(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateService request  with any body
	CreateServiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteService request
	DeleteService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetService request
	GetService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateService request  with any body
	UpdateServiceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSeverities request
	ListSeverities(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSeverity request  with any body
	CreateSeverityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSeverity request
	DeleteSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSeverity request
	GetSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSeverity request  with any body
	UpdateSeverityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListStatusPages request
	ListStatusPages(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStatusPage request  with any body
	CreateStatusPageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStatusPage request
	DeleteStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusPage request
	GetStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateStatusPage request  with any body
	UpdateStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTeams request
	ListTeams(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTeam request  with any body
	CreateTeamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTeam request
	DeleteTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeam request
	GetTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTeam request  with any body
	UpdateTeamWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteIncidentActionItem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentActionItemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentActionItems(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentActionItemsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentActionItemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentActionItemRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAlerts(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAlertsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlert(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCauses(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCausesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCauseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCauseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCauseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCauseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCauseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCauseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEnvironments(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEnvironmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvironmentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnvironmentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEnvironmentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentEvent(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentEventRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentEvents(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentEventsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentEventWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentEventRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFunctionalities(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFunctionalitiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFunctionalityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFunctionalityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFunctionalityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionalityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFunctionalityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFunctionalityRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentRoles(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentRoleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRoleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentTasksRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentTaskRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentTypes(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentTypeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentTypeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentTypeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentTypeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidents(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentActionItems(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentActionItemsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentActionItemWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentActionItemRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAlert(ctx context.Context, incidentId string, params *ListAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAlertRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AttachAlertWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAttachAlertRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentEvents(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentEventsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentEventWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentEventRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentTasks(ctx context.Context, incidentId string, params *ListIncidentTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentTasksRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentTaskWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentTaskRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePlaybookTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePlaybookTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaybookTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaybookTasksRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlaybookTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlaybookTaskRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPlaybooks(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPlaybooksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlaybookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlaybookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePlaybookRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaybookRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlaybookWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlaybookRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPlaybookTasks(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPlaybookTasksRequest(c.Server, playbookId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlaybookTaskWithBody(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlaybookTaskRequestWithBody(c.Server, playbookId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPostmortemTemplates(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPostmortemTemplatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePostmortemTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePostmortemTemplateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePostmortemTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPostmortemTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePostmortemTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePostmortemTemplateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentPostmortem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentPostmortemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentPostmortemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentPostmortemRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPulses(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPulsesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePulseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePulseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPulse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPulseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePulseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePulseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListServices(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListServicesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateServiceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateServiceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSeverities(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSeveritiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSeverityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSeverityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSeverityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSeverityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSeverityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSeverityRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListStatusPages(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListStatusPagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStatusPageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStatusPageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStatusPageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusPageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStatusPageRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTeams(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTeamsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTeamRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteIncidentActionItemRequest generates requests for DeleteIncidentActionItem
func NewDeleteIncidentActionItemRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentActionItemsRequest generates requests for GetIncidentActionItems
func NewGetIncidentActionItemsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentActionItemRequestWithBody generates requests for UpdateIncidentActionItem with any type of body
func NewUpdateIncidentActionItemRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAlertsRequest generates requests for ListAlerts
func NewListAlertsRequest(server string, params *ListAlertsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alerts")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlertRequest generates requests for GetAlert
func NewGetAlertRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alerts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListCausesRequest generates requests for ListCauses
func NewListCausesRequest(server string, params *ListCausesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCauseRequestWithBody generates requests for CreateCause with any type of body
func NewCreateCauseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCauseRequest generates requests for DeleteCause
func NewDeleteCauseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCauseRequest generates requests for GetCause
func NewGetCauseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCauseRequestWithBody generates requests for UpdateCause with any type of body
func NewUpdateCauseRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListEnvironmentsRequest generates requests for ListEnvironments
func NewListEnvironmentsRequest(server string, params *ListEnvironmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEnvironmentRequestWithBody generates requests for CreateEnvironment with any type of body
func NewCreateEnvironmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEnvironmentRequest generates requests for DeleteEnvironment
func NewDeleteEnvironmentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvironmentRequest generates requests for GetEnvironment
func NewGetEnvironmentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEnvironmentRequestWithBody generates requests for UpdateEnvironment with any type of body
func NewUpdateEnvironmentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentEventRequest generates requests for DeleteIncidentEvent
func NewDeleteIncidentEventRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentEventsRequest generates requests for GetIncidentEvents
func NewGetIncidentEventsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentEventRequestWithBody generates requests for UpdateIncidentEvent with any type of body
func NewUpdateIncidentEventRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListFunctionalitiesRequest generates requests for ListFunctionalities
func NewListFunctionalitiesRequest(server string, params *ListFunctionalitiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFunctionalityRequestWithBody generates requests for CreateFunctionality with any type of body
func NewCreateFunctionalityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFunctionalityRequest generates requests for DeleteFunctionality
func NewDeleteFunctionalityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFunctionalityRequest generates requests for GetFunctionality
func NewGetFunctionalityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFunctionalityRequestWithBody generates requests for UpdateFunctionality with any type of body
func NewUpdateFunctionalityRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentRolesRequest generates requests for ListIncidentRoles
func NewListIncidentRolesRequest(server string, params *ListIncidentRolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentRoleRequestWithBody generates requests for CreateIncidentRole with any type of body
func NewCreateIncidentRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentRoleRequest generates requests for DeleteIncidentRole
func NewDeleteIncidentRoleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentRoleRequest generates requests for GetIncidentRole
func NewGetIncidentRoleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentRoleRequestWithBody generates requests for UpdateIncidentRole with any type of body
func NewUpdateIncidentRoleRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentTaskRequest generates requests for DeleteIncidentTask
func NewDeleteIncidentTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentTasksRequest generates requests for GetIncidentTasks
func NewGetIncidentTasksRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentTaskRequestWithBody generates requests for UpdateIncidentTask with any type of body
func NewUpdateIncidentTaskRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentTypesRequest generates requests for ListIncidentTypes
func NewListIncidentTypesRequest(server string, params *ListIncidentTypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentTypeRequestWithBody generates requests for CreateIncidentType with any type of body
func NewCreateIncidentTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentTypeRequest generates requests for DeleteIncidentType
func NewDeleteIncidentTypeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentTypeRequest generates requests for GetIncidentType
func NewGetIncidentTypeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentTypeRequestWithBody generates requests for UpdateIncidentType with any type of body
func NewUpdateIncidentTypeRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentsRequest generates requests for ListIncidents
func NewListIncidentsRequest(server string, params *ListIncidentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentRequestWithBody generates requests for CreateIncident with any type of body
func NewCreateIncidentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentRequest generates requests for DeleteIncident
func NewDeleteIncidentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentRequest generates requests for GetIncident
func NewGetIncidentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentRequestWithBody generates requests for UpdateIncident with any type of body
func NewUpdateIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentActionItemsRequest generates requests for ListIncidentActionItems
func NewListIncidentActionItemsRequest(server string, incidentId string, params *ListIncidentActionItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "incident_id", incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/action_items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentActionItemRequestWithBody generates requests for CreateIncidentActionItem with any type of body
func NewCreateIncidentActionItemRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "incident_id", incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/action_items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAlertRequest generates requests for ListAlert
func NewListAlertRequest(server string, incidentId string, params *ListAlertParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "incident_id", incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/alerts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAttachAlertRequestWithBody generates requests for AttachAlert with any type of body
func NewAttachAlertRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "incident_id", incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/alerts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentEventsRequest generates requests for ListIncidentEvents
func NewListIncidentEventsRequest(server string, incidentId string, params *ListIncidentEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "incident_id", incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentEventRequestWithBody generates requests for CreateIncidentEvent with any type of body
func NewCreateIncidentEventRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "incident_id", incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentTasksRequest generates requests for ListIncidentTasks
func NewListIncidentTasksRequest(server string, incidentId string, params *ListIncidentTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "incident_id", incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/incident_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentTaskRequestWithBody generates requests for CreateIncidentTask with any type of body
func NewCreateIncidentTaskRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "incident_id", incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/incident_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePlaybookTaskRequest generates requests for DeletePlaybookTask
func NewDeletePlaybookTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlaybookTasksRequest generates requests for GetPlaybookTasks
func NewGetPlaybookTasksRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlaybookTaskRequestWithBody generates requests for UpdatePlaybookTask with any type of body
func NewUpdatePlaybookTaskRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPlaybooksRequest generates requests for ListPlaybooks
func NewListPlaybooksRequest(server string, params *ListPlaybooksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlaybookRequestWithBody generates requests for CreatePlaybook with any type of body
func NewCreatePlaybookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePlaybookRequest generates requests for DeletePlaybook
func NewDeletePlaybookRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlaybookRequest generates requests for GetPlaybook
func NewGetPlaybookRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlaybookRequestWithBody generates requests for UpdatePlaybook with any type of body
func NewUpdatePlaybookRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPlaybookTasksRequest generates requests for ListPlaybookTasks
func NewListPlaybookTasksRequest(server string, playbookId string, params *ListPlaybookTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "playbook_id", playbookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s/playbook_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlaybookTaskRequestWithBody generates requests for CreatePlaybookTask with any type of body
func NewCreatePlaybookTaskRequestWithBody(server string, playbookId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "playbook_id", playbookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s/playbook_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPostmortemTemplatesRequest generates requests for ListPostmortemTemplates
func NewListPostmortemTemplatesRequest(server string, params *ListPostmortemTemplatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePostmortemTemplateRequestWithBody generates requests for CreatePostmortemTemplate with any type of body
func NewCreatePostmortemTemplateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePostmortemTemplateRequest generates requests for DeletePostmortemTemplate
func NewDeletePostmortemTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPostmortemTemplateRequest generates requests for GetPostmortemTemplate
func NewGetPostmortemTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePostmortemTemplateRequestWithBody generates requests for UpdatePostmortemTemplate with any type of body
func NewUpdatePostmortemTemplateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIncidentPostmortemRequest generates requests for GetIncidentPostmortem
func NewGetIncidentPostmortemRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentPostmortemRequestWithBody generates requests for UpdateIncidentPostmortem with any type of body
func NewUpdateIncidentPostmortemRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPulsesRequest generates requests for ListPulses
func NewListPulsesRequest(server string, params *ListPulsesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePulseRequestWithBody generates requests for CreatePulse with any type of body
func NewCreatePulseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPulseRequest generates requests for GetPulse
func NewGetPulseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePulseRequestWithBody generates requests for UpdatePulse with any type of body
func NewUpdatePulseRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListServicesRequest generates requests for ListServices
func NewListServicesRequest(server string, params *ListServicesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateServiceRequestWithBody generates requests for CreateService with any type of body
func NewCreateServiceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServiceRequest generates requests for DeleteService
func NewDeleteServiceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceRequest generates requests for GetService
func NewGetServiceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateServiceRequestWithBody generates requests for UpdateService with any type of body
func NewUpdateServiceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSeveritiesRequest generates requests for ListSeverities
func NewListSeveritiesRequest(server string, params *ListSeveritiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSeverityRequestWithBody generates requests for CreateSeverity with any type of body
func NewCreateSeverityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSeverityRequest generates requests for DeleteSeverity
func NewDeleteSeverityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSeverityRequest generates requests for GetSeverity
func NewGetSeverityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSeverityRequestWithBody generates requests for UpdateSeverity with any type of body
func NewUpdateSeverityRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListStatusPagesRequest generates requests for ListStatusPages
func NewListStatusPagesRequest(server string, params *ListStatusPagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateStatusPageRequestWithBody generates requests for CreateStatusPage with any type of body
func NewCreateStatusPageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStatusPageRequest generates requests for DeleteStatusPage
func NewDeleteStatusPageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusPageRequest generates requests for GetStatusPage
func NewGetStatusPageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateStatusPageRequestWithBody generates requests for UpdateStatusPage with any type of body
func NewUpdateStatusPageRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListTeamsRequest generates requests for ListTeams
func NewListTeamsRequest(server string, params *ListTeamsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTeamRequestWithBody generates requests for CreateTeam with any type of body
func NewCreateTeamRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTeamRequest generates requests for DeleteTeam
func NewDeleteTeamRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamRequest generates requests for GetTeam
func NewGetTeamRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTeamRequestWithBody generates requests for UpdateTeam with any type of body
func NewUpdateTeamRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteIncidentActionItem request
	DeleteIncidentActionItemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentActionItemResponse, error)

	// GetIncidentActionItems request
	GetIncidentActionItemsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentActionItemsResponse, error)

	// UpdateIncidentActionItem request  with any body
	UpdateIncidentActionItemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentActionItemResponse, error)

	// ListAlerts request
	ListAlertsWithResponse(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*ListAlertsResponse, error)

	// GetAlert request
	GetAlertWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAlertResponse, error)

	// ListCauses request
	ListCausesWithResponse(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*ListCausesResponse, error)

	// CreateCause request  with any body
	CreateCauseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCauseResponse, error)

	// DeleteCause request
	DeleteCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCauseResponse, error)

	// GetCause request
	GetCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCauseResponse, error)

	// UpdateCause request  with any body
	UpdateCauseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCauseResponse, error)

	// ListEnvironments request
	ListEnvironmentsWithResponse(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error)

	// CreateEnvironment request  with any body
	CreateEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error)

	// DeleteEnvironment request
	DeleteEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error)

	// GetEnvironment request
	GetEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error)

	// UpdateEnvironment request  with any body
	UpdateEnvironmentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error)

	// DeleteIncidentEvent request
	DeleteIncidentEventWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentEventResponse, error)

	// GetIncidentEvents request
	GetIncidentEventsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentEventsResponse, error)

	// UpdateIncidentEvent request  with any body
	UpdateIncidentEventWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentEventResponse, error)

	// ListFunctionalities request
	ListFunctionalitiesWithResponse(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*ListFunctionalitiesResponse, error)

	// CreateFunctionality request  with any body
	CreateFunctionalityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFunctionalityResponse, error)

	// DeleteFunctionality request
	DeleteFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFunctionalityResponse, error)

	// GetFunctionality request
	GetFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFunctionalityResponse, error)

	// UpdateFunctionality request  with any body
	UpdateFunctionalityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFunctionalityResponse, error)

	// ListIncidentRoles request
	ListIncidentRolesWithResponse(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*ListIncidentRolesResponse, error)

	// CreateIncidentRole request  with any body
	CreateIncidentRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentRoleResponse, error)

	// DeleteIncidentRole request
	DeleteIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentRoleResponse, error)

	// GetIncidentRole request
	GetIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRoleResponse, error)

	// UpdateIncidentRole request  with any body
	UpdateIncidentRoleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleResponse, error)

	// DeleteIncidentTask request
	DeleteIncidentTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentTaskResponse, error)

	// GetIncidentTasks request
	GetIncidentTasksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentTasksResponse, error)

	// UpdateIncidentTask request  with any body
	UpdateIncidentTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentTaskResponse, error)

	// ListIncidentTypes request
	ListIncidentTypesWithResponse(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*ListIncidentTypesResponse, error)

	// CreateIncidentType request  with any body
	CreateIncidentTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentTypeResponse, error)

	// DeleteIncidentType request
	DeleteIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentTypeResponse, error)

	// GetIncidentType request
	GetIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentTypeResponse, error)

	// UpdateIncidentType request  with any body
	UpdateIncidentTypeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentTypeResponse, error)

	// ListIncidents request
	ListIncidentsWithResponse(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*ListIncidentsResponse, error)

	// CreateIncident request  with any body
	CreateIncidentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentResponse, error)

	// DeleteIncident request
	DeleteIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentResponse, error)

	// GetIncident request
	GetIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentResponse, error)

	// UpdateIncident request  with any body
	UpdateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentResponse, error)

	// ListIncidentActionItems request
	ListIncidentActionItemsWithResponse(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*ListIncidentActionItemsResponse, error)

	// CreateIncidentActionItem request  with any body
	CreateIncidentActionItemWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentActionItemResponse, error)

	// ListAlert request
	ListAlertWithResponse(ctx context.Context, incidentId string, params *ListAlertParams, reqEditors ...RequestEditorFn) (*ListAlertResponse, error)

	// AttachAlert request  with any body
	AttachAlertWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachAlertResponse, error)

	// ListIncidentEvents request
	ListIncidentEventsWithResponse(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*ListIncidentEventsResponse, error)

	// CreateIncidentEvent request  with any body
	CreateIncidentEventWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentEventResponse, error)

	// ListIncidentTasks request
	ListIncidentTasksWithResponse(ctx context.Context, incidentId string, params *ListIncidentTasksParams, reqEditors ...RequestEditorFn) (*ListIncidentTasksResponse, error)

	// CreateIncidentTask request  with any body
	CreateIncidentTaskWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentTaskResponse, error)

	// DeletePlaybookTask request
	DeletePlaybookTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookTaskResponse, error)

	// GetPlaybookTasks request
	GetPlaybookTasksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookTasksResponse, error)

	// UpdatePlaybookTask request  with any body
	UpdatePlaybookTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookTaskResponse, error)

	// ListPlaybooks request
	ListPlaybooksWithResponse(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*ListPlaybooksResponse, error)

	// CreatePlaybook request  with any body
	CreatePlaybookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookResponse, error)

	// DeletePlaybook request
	DeletePlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookResponse, error)

	// GetPlaybook request
	GetPlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookResponse, error)

	// UpdatePlaybook request  with any body
	UpdatePlaybookWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookResponse, error)

	// ListPlaybookTasks request
	ListPlaybookTasksWithResponse(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*ListPlaybookTasksResponse, error)

	// CreatePlaybookTask request  with any body
	CreatePlaybookTaskWithBodyWithResponse(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookTaskResponse, error)

	// ListPostmortemTemplates request
	ListPostmortemTemplatesWithResponse(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*ListPostmortemTemplatesResponse, error)

	// CreatePostmortemTemplate request  with any body
	CreatePostmortemTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePostmortemTemplateResponse, error)

	// DeletePostmortemTemplate request
	DeletePostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePostmortemTemplateResponse, error)

	// GetPostmortemTemplate request
	GetPostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPostmortemTemplateResponse, error)

	// UpdatePostmortemTemplate request  with any body
	UpdatePostmortemTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePostmortemTemplateResponse, error)

	// GetIncidentPostmortem request
	GetIncidentPostmortemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentPostmortemResponse, error)

	// UpdateIncidentPostmortem request  with any body
	UpdateIncidentPostmortemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPostmortemResponse, error)

	// ListPulses request
	ListPulsesWithResponse(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*ListPulsesResponse, error)

	// CreatePulse request  with any body
	CreatePulseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePulseResponse, error)

	// GetPulse request
	GetPulseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPulseResponse, error)

	// UpdatePulse request  with any body
	UpdatePulseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePulseResponse, error)

	// ListServices request
	ListServicesWithResponse(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*ListServicesResponse, error)

	// CreateService request  with any body
	CreateServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceResponse, error)

	// DeleteService request
	DeleteServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteServiceResponse, error)

	// GetService request
	GetServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceResponse, error)

	// UpdateService request  with any body
	UpdateServiceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceResponse, error)

	// ListSeverities request
	ListSeveritiesWithResponse(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*ListSeveritiesResponse, error)

	// CreateSeverity request  with any body
	CreateSeverityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSeverityResponse, error)

	// DeleteSeverity request
	DeleteSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSeverityResponse, error)

	// GetSeverity request
	GetSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSeverityResponse, error)

	// UpdateSeverity request  with any body
	UpdateSeverityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSeverityResponse, error)

	// ListStatusPages request
	ListStatusPagesWithResponse(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*ListStatusPagesResponse, error)

	// CreateStatusPage request  with any body
	CreateStatusPageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStatusPageResponse, error)

	// DeleteStatusPage request
	DeleteStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteStatusPageResponse, error)

	// GetStatusPage request
	GetStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStatusPageResponse, error)

	// UpdateStatusPage request  with any body
	UpdateStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStatusPageResponse, error)

	// ListTeams request
	ListTeamsWithResponse(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*ListTeamsResponse, error)

	// CreateTeam request  with any body
	CreateTeamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error)

	// DeleteTeam request
	DeleteTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error)

	// GetTeam request
	GetTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTeamResponse, error)

	// UpdateTeam request  with any body
	UpdateTeamWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error)
}

type DeleteIncidentActionItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentActionItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentActionItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentActionItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentActionItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCausesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListCausesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCausesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFunctionalitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListFunctionalitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFunctionalitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentActionItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentActionItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentActionItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentActionItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AttachAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AttachAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AttachAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaybookTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlaybookTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaybookTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPlaybooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPlaybooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPlaybooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPlaybookTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPlaybookTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPlaybookTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPostmortemTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPostmortemTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPostmortemTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentPostmortemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentPostmortemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentPostmortemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentPostmortemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentPostmortemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentPostmortemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPulsesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPulsesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPulsesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSeveritiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListSeveritiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSeveritiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListStatusPagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListStatusPagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListStatusPagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteIncidentActionItemWithResponse request returning *DeleteIncidentActionItemResponse
func (c *ClientWithResponses) DeleteIncidentActionItemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentActionItemResponse, error) {
	rsp, err := c.DeleteIncidentActionItem(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentActionItemResponse(rsp)
}

// GetIncidentActionItemsWithResponse request returning *GetIncidentActionItemsResponse
func (c *ClientWithResponses) GetIncidentActionItemsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentActionItemsResponse, error) {
	rsp, err := c.GetIncidentActionItems(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentActionItemsResponse(rsp)
}

// UpdateIncidentActionItemWithBodyWithResponse request with arbitrary body returning *UpdateIncidentActionItemResponse
func (c *ClientWithResponses) UpdateIncidentActionItemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentActionItemResponse, error) {
	rsp, err := c.UpdateIncidentActionItemWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentActionItemResponse(rsp)
}

// ListAlertsWithResponse request returning *ListAlertsResponse
func (c *ClientWithResponses) ListAlertsWithResponse(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*ListAlertsResponse, error) {
	rsp, err := c.ListAlerts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAlertsResponse(rsp)
}

// GetAlertWithResponse request returning *GetAlertResponse
func (c *ClientWithResponses) GetAlertWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAlertResponse, error) {
	rsp, err := c.GetAlert(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertResponse(rsp)
}

// ListCausesWithResponse request returning *ListCausesResponse
func (c *ClientWithResponses) ListCausesWithResponse(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*ListCausesResponse, error) {
	rsp, err := c.ListCauses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCausesResponse(rsp)
}

// CreateCauseWithBodyWithResponse request with arbitrary body returning *CreateCauseResponse
func (c *ClientWithResponses) CreateCauseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCauseResponse, error) {
	rsp, err := c.CreateCauseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCauseResponse(rsp)
}

// DeleteCauseWithResponse request returning *DeleteCauseResponse
func (c *ClientWithResponses) DeleteCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCauseResponse, error) {
	rsp, err := c.DeleteCause(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCauseResponse(rsp)
}

// GetCauseWithResponse request returning *GetCauseResponse
func (c *ClientWithResponses) GetCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCauseResponse, error) {
	rsp, err := c.GetCause(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCauseResponse(rsp)
}

// UpdateCauseWithBodyWithResponse request with arbitrary body returning *UpdateCauseResponse
func (c *ClientWithResponses) UpdateCauseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCauseResponse, error) {
	rsp, err := c.UpdateCauseWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCauseResponse(rsp)
}

// ListEnvironmentsWithResponse request returning *ListEnvironmentsResponse
func (c *ClientWithResponses) ListEnvironmentsWithResponse(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error) {
	rsp, err := c.ListEnvironments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEnvironmentsResponse(rsp)
}

// CreateEnvironmentWithBodyWithResponse request with arbitrary body returning *CreateEnvironmentResponse
func (c *ClientWithResponses) CreateEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

// DeleteEnvironmentWithResponse request returning *DeleteEnvironmentResponse
func (c *ClientWithResponses) DeleteEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error) {
	rsp, err := c.DeleteEnvironment(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentResponse(rsp)
}

// GetEnvironmentWithResponse request returning *GetEnvironmentResponse
func (c *ClientWithResponses) GetEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error) {
	rsp, err := c.GetEnvironment(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentResponse(rsp)
}

// UpdateEnvironmentWithBodyWithResponse request with arbitrary body returning *UpdateEnvironmentResponse
func (c *ClientWithResponses) UpdateEnvironmentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error) {
	rsp, err := c.UpdateEnvironmentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnvironmentResponse(rsp)
}

// DeleteIncidentEventWithResponse request returning *DeleteIncidentEventResponse
func (c *ClientWithResponses) DeleteIncidentEventWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentEventResponse, error) {
	rsp, err := c.DeleteIncidentEvent(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentEventResponse(rsp)
}

// GetIncidentEventsWithResponse request returning *GetIncidentEventsResponse
func (c *ClientWithResponses) GetIncidentEventsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentEventsResponse, error) {
	rsp, err := c.GetIncidentEvents(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentEventsResponse(rsp)
}

// UpdateIncidentEventWithBodyWithResponse request with arbitrary body returning *UpdateIncidentEventResponse
func (c *ClientWithResponses) UpdateIncidentEventWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentEventResponse, error) {
	rsp, err := c.UpdateIncidentEventWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentEventResponse(rsp)
}

// ListFunctionalitiesWithResponse request returning *ListFunctionalitiesResponse
func (c *ClientWithResponses) ListFunctionalitiesWithResponse(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*ListFunctionalitiesResponse, error) {
	rsp, err := c.ListFunctionalities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFunctionalitiesResponse(rsp)
}

// CreateFunctionalityWithBodyWithResponse request with arbitrary body returning *CreateFunctionalityResponse
func (c *ClientWithResponses) CreateFunctionalityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFunctionalityResponse, error) {
	rsp, err := c.CreateFunctionalityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFunctionalityResponse(rsp)
}

// DeleteFunctionalityWithResponse request returning *DeleteFunctionalityResponse
func (c *ClientWithResponses) DeleteFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFunctionalityResponse, error) {
	rsp, err := c.DeleteFunctionality(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFunctionalityResponse(rsp)
}

// GetFunctionalityWithResponse request returning *GetFunctionalityResponse
func (c *ClientWithResponses) GetFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFunctionalityResponse, error) {
	rsp, err := c.GetFunctionality(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionalityResponse(rsp)
}

// UpdateFunctionalityWithBodyWithResponse request with arbitrary body returning *UpdateFunctionalityResponse
func (c *ClientWithResponses) UpdateFunctionalityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFunctionalityResponse, error) {
	rsp, err := c.UpdateFunctionalityWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFunctionalityResponse(rsp)
}

// ListIncidentRolesWithResponse request returning *ListIncidentRolesResponse
func (c *ClientWithResponses) ListIncidentRolesWithResponse(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*ListIncidentRolesResponse, error) {
	rsp, err := c.ListIncidentRoles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentRolesResponse(rsp)
}

// CreateIncidentRoleWithBodyWithResponse request with arbitrary body returning *CreateIncidentRoleResponse
func (c *ClientWithResponses) CreateIncidentRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentRoleResponse, error) {
	rsp, err := c.CreateIncidentRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentRoleResponse(rsp)
}

// DeleteIncidentRoleWithResponse request returning *DeleteIncidentRoleResponse
func (c *ClientWithResponses) DeleteIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentRoleResponse, error) {
	rsp, err := c.DeleteIncidentRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentRoleResponse(rsp)
}

// GetIncidentRoleWithResponse request returning *GetIncidentRoleResponse
func (c *ClientWithResponses) GetIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRoleResponse, error) {
	rsp, err := c.GetIncidentRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentRoleResponse(rsp)
}

// UpdateIncidentRoleWithBodyWithResponse request with arbitrary body returning *UpdateIncidentRoleResponse
func (c *ClientWithResponses) UpdateIncidentRoleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleResponse, error) {
	rsp, err := c.UpdateIncidentRoleWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentRoleResponse(rsp)
}

// DeleteIncidentTaskWithResponse request returning *DeleteIncidentTaskResponse
func (c *ClientWithResponses) DeleteIncidentTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentTaskResponse, error) {
	rsp, err := c.DeleteIncidentTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentTaskResponse(rsp)
}

// GetIncidentTasksWithResponse request returning *GetIncidentTasksResponse
func (c *ClientWithResponses) GetIncidentTasksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentTasksResponse, error) {
	rsp, err := c.GetIncidentTasks(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentTasksResponse(rsp)
}

// UpdateIncidentTaskWithBodyWithResponse request with arbitrary body returning *UpdateIncidentTaskResponse
func (c *ClientWithResponses) UpdateIncidentTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentTaskResponse, error) {
	rsp, err := c.UpdateIncidentTaskWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentTaskResponse(rsp)
}

// ListIncidentTypesWithResponse request returning *ListIncidentTypesResponse
func (c *ClientWithResponses) ListIncidentTypesWithResponse(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*ListIncidentTypesResponse, error) {
	rsp, err := c.ListIncidentTypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentTypesResponse(rsp)
}

// CreateIncidentTypeWithBodyWithResponse request with arbitrary body returning *CreateIncidentTypeResponse
func (c *ClientWithResponses) CreateIncidentTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentTypeResponse, error) {
	rsp, err := c.CreateIncidentTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentTypeResponse(rsp)
}

// DeleteIncidentTypeWithResponse request returning *DeleteIncidentTypeResponse
func (c *ClientWithResponses) DeleteIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentTypeResponse, error) {
	rsp, err := c.DeleteIncidentType(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentTypeResponse(rsp)
}

// GetIncidentTypeWithResponse request returning *GetIncidentTypeResponse
func (c *ClientWithResponses) GetIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentTypeResponse, error) {
	rsp, err := c.GetIncidentType(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentTypeResponse(rsp)
}

// UpdateIncidentTypeWithBodyWithResponse request with arbitrary body returning *UpdateIncidentTypeResponse
func (c *ClientWithResponses) UpdateIncidentTypeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentTypeResponse, error) {
	rsp, err := c.UpdateIncidentTypeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentTypeResponse(rsp)
}

// ListIncidentsWithResponse request returning *ListIncidentsResponse
func (c *ClientWithResponses) ListIncidentsWithResponse(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*ListIncidentsResponse, error) {
	rsp, err := c.ListIncidents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentsResponse(rsp)
}

// CreateIncidentWithBodyWithResponse request with arbitrary body returning *CreateIncidentResponse
func (c *ClientWithResponses) CreateIncidentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentResponse, error) {
	rsp, err := c.CreateIncidentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentResponse(rsp)
}

// DeleteIncidentWithResponse request returning *DeleteIncidentResponse
func (c *ClientWithResponses) DeleteIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentResponse, error) {
	rsp, err := c.DeleteIncident(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentResponse(rsp)
}

// GetIncidentWithResponse request returning *GetIncidentResponse
func (c *ClientWithResponses) GetIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentResponse, error) {
	rsp, err := c.GetIncident(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentResponse(rsp)
}

// UpdateIncidentWithBodyWithResponse request with arbitrary body returning *UpdateIncidentResponse
func (c *ClientWithResponses) UpdateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentResponse, error) {
	rsp, err := c.UpdateIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentResponse(rsp)
}

// ListIncidentActionItemsWithResponse request returning *ListIncidentActionItemsResponse
func (c *ClientWithResponses) ListIncidentActionItemsWithResponse(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*ListIncidentActionItemsResponse, error) {
	rsp, err := c.ListIncidentActionItems(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentActionItemsResponse(rsp)
}

// CreateIncidentActionItemWithBodyWithResponse request with arbitrary body returning *CreateIncidentActionItemResponse
func (c *ClientWithResponses) CreateIncidentActionItemWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentActionItemResponse, error) {
	rsp, err := c.CreateIncidentActionItemWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentActionItemResponse(rsp)
}

// ListAlertWithResponse request returning *ListAlertResponse
func (c *ClientWithResponses) ListAlertWithResponse(ctx context.Context, incidentId string, params *ListAlertParams, reqEditors ...RequestEditorFn) (*ListAlertResponse, error) {
	rsp, err := c.ListAlert(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAlertResponse(rsp)
}

// AttachAlertWithBodyWithResponse request with arbitrary body returning *AttachAlertResponse
func (c *ClientWithResponses) AttachAlertWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachAlertResponse, error) {
	rsp, err := c.AttachAlertWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAttachAlertResponse(rsp)
}

// ListIncidentEventsWithResponse request returning *ListIncidentEventsResponse
func (c *ClientWithResponses) ListIncidentEventsWithResponse(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*ListIncidentEventsResponse, error) {
	rsp, err := c.ListIncidentEvents(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentEventsResponse(rsp)
}

// CreateIncidentEventWithBodyWithResponse request with arbitrary body returning *CreateIncidentEventResponse
func (c *ClientWithResponses) CreateIncidentEventWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentEventResponse, error) {
	rsp, err := c.CreateIncidentEventWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentEventResponse(rsp)
}

// ListIncidentTasksWithResponse request returning *ListIncidentTasksResponse
func (c *ClientWithResponses) ListIncidentTasksWithResponse(ctx context.Context, incidentId string, params *ListIncidentTasksParams, reqEditors ...RequestEditorFn) (*ListIncidentTasksResponse, error) {
	rsp, err := c.ListIncidentTasks(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentTasksResponse(rsp)
}

// CreateIncidentTaskWithBodyWithResponse request with arbitrary body returning *CreateIncidentTaskResponse
func (c *ClientWithResponses) CreateIncidentTaskWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentTaskResponse, error) {
	rsp, err := c.CreateIncidentTaskWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentTaskResponse(rsp)
}

// DeletePlaybookTaskWithResponse request returning *DeletePlaybookTaskResponse
func (c *ClientWithResponses) DeletePlaybookTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookTaskResponse, error) {
	rsp, err := c.DeletePlaybookTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePlaybookTaskResponse(rsp)
}

// GetPlaybookTasksWithResponse request returning *GetPlaybookTasksResponse
func (c *ClientWithResponses) GetPlaybookTasksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookTasksResponse, error) {
	rsp, err := c.GetPlaybookTasks(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaybookTasksResponse(rsp)
}

// UpdatePlaybookTaskWithBodyWithResponse request with arbitrary body returning *UpdatePlaybookTaskResponse
func (c *ClientWithResponses) UpdatePlaybookTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookTaskResponse, error) {
	rsp, err := c.UpdatePlaybookTaskWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlaybookTaskResponse(rsp)
}

// ListPlaybooksWithResponse request returning *ListPlaybooksResponse
func (c *ClientWithResponses) ListPlaybooksWithResponse(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*ListPlaybooksResponse, error) {
	rsp, err := c.ListPlaybooks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPlaybooksResponse(rsp)
}

// CreatePlaybookWithBodyWithResponse request with arbitrary body returning *CreatePlaybookResponse
func (c *ClientWithResponses) CreatePlaybookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookResponse, error) {
	rsp, err := c.CreatePlaybookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlaybookResponse(rsp)
}

// DeletePlaybookWithResponse request returning *DeletePlaybookResponse
func (c *ClientWithResponses) DeletePlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookResponse, error) {
	rsp, err := c.DeletePlaybook(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePlaybookResponse(rsp)
}

// GetPlaybookWithResponse request returning *GetPlaybookResponse
func (c *ClientWithResponses) GetPlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookResponse, error) {
	rsp, err := c.GetPlaybook(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaybookResponse(rsp)
}

// UpdatePlaybookWithBodyWithResponse request with arbitrary body returning *UpdatePlaybookResponse
func (c *ClientWithResponses) UpdatePlaybookWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookResponse, error) {
	rsp, err := c.UpdatePlaybookWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlaybookResponse(rsp)
}

// ListPlaybookTasksWithResponse request returning *ListPlaybookTasksResponse
func (c *ClientWithResponses) ListPlaybookTasksWithResponse(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*ListPlaybookTasksResponse, error) {
	rsp, err := c.ListPlaybookTasks(ctx, playbookId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPlaybookTasksResponse(rsp)
}

// CreatePlaybookTaskWithBodyWithResponse request with arbitrary body returning *CreatePlaybookTaskResponse
func (c *ClientWithResponses) CreatePlaybookTaskWithBodyWithResponse(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookTaskResponse, error) {
	rsp, err := c.CreatePlaybookTaskWithBody(ctx, playbookId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlaybookTaskResponse(rsp)
}

// ListPostmortemTemplatesWithResponse request returning *ListPostmortemTemplatesResponse
func (c *ClientWithResponses) ListPostmortemTemplatesWithResponse(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*ListPostmortemTemplatesResponse, error) {
	rsp, err := c.ListPostmortemTemplates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPostmortemTemplatesResponse(rsp)
}

// CreatePostmortemTemplateWithBodyWithResponse request with arbitrary body returning *CreatePostmortemTemplateResponse
func (c *ClientWithResponses) CreatePostmortemTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePostmortemTemplateResponse, error) {
	rsp, err := c.CreatePostmortemTemplateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePostmortemTemplateResponse(rsp)
}

// DeletePostmortemTemplateWithResponse request returning *DeletePostmortemTemplateResponse
func (c *ClientWithResponses) DeletePostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePostmortemTemplateResponse, error) {
	rsp, err := c.DeletePostmortemTemplate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePostmortemTemplateResponse(rsp)
}

// GetPostmortemTemplateWithResponse request returning *GetPostmortemTemplateResponse
func (c *ClientWithResponses) GetPostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPostmortemTemplateResponse, error) {
	rsp, err := c.GetPostmortemTemplate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPostmortemTemplateResponse(rsp)
}

// UpdatePostmortemTemplateWithBodyWithResponse request with arbitrary body returning *UpdatePostmortemTemplateResponse
func (c *ClientWithResponses) UpdatePostmortemTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePostmortemTemplateResponse, error) {
	rsp, err := c.UpdatePostmortemTemplateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePostmortemTemplateResponse(rsp)
}

// GetIncidentPostmortemWithResponse request returning *GetIncidentPostmortemResponse
func (c *ClientWithResponses) GetIncidentPostmortemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentPostmortemResponse, error) {
	rsp, err := c.GetIncidentPostmortem(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentPostmortemResponse(rsp)
}

// UpdateIncidentPostmortemWithBodyWithResponse request with arbitrary body returning *UpdateIncidentPostmortemResponse
func (c *ClientWithResponses) UpdateIncidentPostmortemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPostmortemResponse, error) {
	rsp, err := c.UpdateIncidentPostmortemWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentPostmortemResponse(rsp)
}

// ListPulsesWithResponse request returning *ListPulsesResponse
func (c *ClientWithResponses) ListPulsesWithResponse(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*ListPulsesResponse, error) {
	rsp, err := c.ListPulses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPulsesResponse(rsp)
}

// CreatePulseWithBodyWithResponse request with arbitrary body returning *CreatePulseResponse
func (c *ClientWithResponses) CreatePulseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePulseResponse, error) {
	rsp, err := c.CreatePulseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePulseResponse(rsp)
}

// GetPulseWithResponse request returning *GetPulseResponse
func (c *ClientWithResponses) GetPulseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPulseResponse, error) {
	rsp, err := c.GetPulse(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPulseResponse(rsp)
}

// UpdatePulseWithBodyWithResponse request with arbitrary body returning *UpdatePulseResponse
func (c *ClientWithResponses) UpdatePulseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePulseResponse, error) {
	rsp, err := c.UpdatePulseWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePulseResponse(rsp)
}

// ListServicesWithResponse request returning *ListServicesResponse
func (c *ClientWithResponses) ListServicesWithResponse(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*ListServicesResponse, error) {
	rsp, err := c.ListServices(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListServicesResponse(rsp)
}

// CreateServiceWithBodyWithResponse request with arbitrary body returning *CreateServiceResponse
func (c *ClientWithResponses) CreateServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceResponse, error) {
	rsp, err := c.CreateServiceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceResponse(rsp)
}

// DeleteServiceWithResponse request returning *DeleteServiceResponse
func (c *ClientWithResponses) DeleteServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteServiceResponse, error) {
	rsp, err := c.DeleteService(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceResponse(rsp)
}

// GetServiceWithResponse request returning *GetServiceResponse
func (c *ClientWithResponses) GetServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceResponse, error) {
	rsp, err := c.GetService(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceResponse(rsp)
}

// UpdateServiceWithBodyWithResponse request with arbitrary body returning *UpdateServiceResponse
func (c *ClientWithResponses) UpdateServiceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceResponse, error) {
	rsp, err := c.UpdateServiceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateServiceResponse(rsp)
}

// ListSeveritiesWithResponse request returning *ListSeveritiesResponse
func (c *ClientWithResponses) ListSeveritiesWithResponse(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*ListSeveritiesResponse, error) {
	rsp, err := c.ListSeverities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSeveritiesResponse(rsp)
}

// CreateSeverityWithBodyWithResponse request with arbitrary body returning *CreateSeverityResponse
func (c *ClientWithResponses) CreateSeverityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSeverityResponse, error) {
	rsp, err := c.CreateSeverityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSeverityResponse(rsp)
}

// DeleteSeverityWithResponse request returning *DeleteSeverityResponse
func (c *ClientWithResponses) DeleteSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSeverityResponse, error) {
	rsp, err := c.DeleteSeverity(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSeverityResponse(rsp)
}

// GetSeverityWithResponse request returning *GetSeverityResponse
func (c *ClientWithResponses) GetSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSeverityResponse, error) {
	rsp, err := c.GetSeverity(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSeverityResponse(rsp)
}

// UpdateSeverityWithBodyWithResponse request with arbitrary body returning *UpdateSeverityResponse
func (c *ClientWithResponses) UpdateSeverityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSeverityResponse, error) {
	rsp, err := c.UpdateSeverityWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSeverityResponse(rsp)
}

// ListStatusPagesWithResponse request returning *ListStatusPagesResponse
func (c *ClientWithResponses) ListStatusPagesWithResponse(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*ListStatusPagesResponse, error) {
	rsp, err := c.ListStatusPages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListStatusPagesResponse(rsp)
}

// CreateStatusPageWithBodyWithResponse request with arbitrary body returning *CreateStatusPageResponse
func (c *ClientWithResponses) CreateStatusPageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStatusPageResponse, error) {
	rsp, err := c.CreateStatusPageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStatusPageResponse(rsp)
}

// DeleteStatusPageWithResponse request returning *DeleteStatusPageResponse
func (c *ClientWithResponses) DeleteStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteStatusPageResponse, error) {
	rsp, err := c.DeleteStatusPage(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStatusPageResponse(rsp)
}

// GetStatusPageWithResponse request returning *GetStatusPageResponse
func (c *ClientWithResponses) GetStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStatusPageResponse, error) {
	rsp, err := c.GetStatusPage(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusPageResponse(rsp)
}

// UpdateStatusPageWithBodyWithResponse request with arbitrary body returning *UpdateStatusPageResponse
func (c *ClientWithResponses) UpdateStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStatusPageResponse, error) {
	rsp, err := c.UpdateStatusPageWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStatusPageResponse(rsp)
}

// ListTeamsWithResponse request returning *ListTeamsResponse
func (c *ClientWithResponses) ListTeamsWithResponse(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*ListTeamsResponse, error) {
	rsp, err := c.ListTeams(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTeamsResponse(rsp)
}

// CreateTeamWithBodyWithResponse request with arbitrary body returning *CreateTeamResponse
func (c *ClientWithResponses) CreateTeamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error) {
	rsp, err := c.CreateTeamWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamResponse(rsp)
}

// DeleteTeamWithResponse request returning *DeleteTeamResponse
func (c *ClientWithResponses) DeleteTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error) {
	rsp, err := c.DeleteTeam(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamResponse(rsp)
}

// GetTeamWithResponse request returning *GetTeamResponse
func (c *ClientWithResponses) GetTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTeamResponse, error) {
	rsp, err := c.GetTeam(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamResponse(rsp)
}

// UpdateTeamWithBodyWithResponse request with arbitrary body returning *UpdateTeamResponse
func (c *ClientWithResponses) UpdateTeamWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error) {
	rsp, err := c.UpdateTeamWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamResponse(rsp)
}

// ParseDeleteIncidentActionItemResponse parses an HTTP response from a DeleteIncidentActionItemWithResponse call
func ParseDeleteIncidentActionItemResponse(rsp *http.Response) (*DeleteIncidentActionItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentActionItemsResponse parses an HTTP response from a GetIncidentActionItemsWithResponse call
func ParseGetIncidentActionItemsResponse(rsp *http.Response) (*GetIncidentActionItemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentActionItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentActionItemResponse parses an HTTP response from a UpdateIncidentActionItemWithResponse call
func ParseUpdateIncidentActionItemResponse(rsp *http.Response) (*UpdateIncidentActionItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListAlertsResponse parses an HTTP response from a ListAlertsWithResponse call
func ParseListAlertsResponse(rsp *http.Response) (*ListAlertsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetAlertResponse parses an HTTP response from a GetAlertWithResponse call
func ParseGetAlertResponse(rsp *http.Response) (*GetAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListCausesResponse parses an HTTP response from a ListCausesWithResponse call
func ParseListCausesResponse(rsp *http.Response) (*ListCausesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListCausesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateCauseResponse parses an HTTP response from a CreateCauseWithResponse call
func ParseCreateCauseResponse(rsp *http.Response) (*CreateCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteCauseResponse parses an HTTP response from a DeleteCauseWithResponse call
func ParseDeleteCauseResponse(rsp *http.Response) (*DeleteCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCauseResponse parses an HTTP response from a GetCauseWithResponse call
func ParseGetCauseResponse(rsp *http.Response) (*GetCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateCauseResponse parses an HTTP response from a UpdateCauseWithResponse call
func ParseUpdateCauseResponse(rsp *http.Response) (*UpdateCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListEnvironmentsResponse parses an HTTP response from a ListEnvironmentsWithResponse call
func ParseListEnvironmentsResponse(rsp *http.Response) (*ListEnvironmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateEnvironmentResponse parses an HTTP response from a CreateEnvironmentWithResponse call
func ParseCreateEnvironmentResponse(rsp *http.Response) (*CreateEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteEnvironmentResponse parses an HTTP response from a DeleteEnvironmentWithResponse call
func ParseDeleteEnvironmentResponse(rsp *http.Response) (*DeleteEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetEnvironmentResponse parses an HTTP response from a GetEnvironmentWithResponse call
func ParseGetEnvironmentResponse(rsp *http.Response) (*GetEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateEnvironmentResponse parses an HTTP response from a UpdateEnvironmentWithResponse call
func ParseUpdateEnvironmentResponse(rsp *http.Response) (*UpdateEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIncidentEventResponse parses an HTTP response from a DeleteIncidentEventWithResponse call
func ParseDeleteIncidentEventResponse(rsp *http.Response) (*DeleteIncidentEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentEventsResponse parses an HTTP response from a GetIncidentEventsWithResponse call
func ParseGetIncidentEventsResponse(rsp *http.Response) (*GetIncidentEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentEventResponse parses an HTTP response from a UpdateIncidentEventWithResponse call
func ParseUpdateIncidentEventResponse(rsp *http.Response) (*UpdateIncidentEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListFunctionalitiesResponse parses an HTTP response from a ListFunctionalitiesWithResponse call
func ParseListFunctionalitiesResponse(rsp *http.Response) (*ListFunctionalitiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListFunctionalitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateFunctionalityResponse parses an HTTP response from a CreateFunctionalityWithResponse call
func ParseCreateFunctionalityResponse(rsp *http.Response) (*CreateFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteFunctionalityResponse parses an HTTP response from a DeleteFunctionalityWithResponse call
func ParseDeleteFunctionalityResponse(rsp *http.Response) (*DeleteFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetFunctionalityResponse parses an HTTP response from a GetFunctionalityWithResponse call
func ParseGetFunctionalityResponse(rsp *http.Response) (*GetFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateFunctionalityResponse parses an HTTP response from a UpdateFunctionalityWithResponse call
func ParseUpdateFunctionalityResponse(rsp *http.Response) (*UpdateFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentRolesResponse parses an HTTP response from a ListIncidentRolesWithResponse call
func ParseListIncidentRolesResponse(rsp *http.Response) (*ListIncidentRolesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentRoleResponse parses an HTTP response from a CreateIncidentRoleWithResponse call
func ParseCreateIncidentRoleResponse(rsp *http.Response) (*CreateIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIncidentRoleResponse parses an HTTP response from a DeleteIncidentRoleWithResponse call
func ParseDeleteIncidentRoleResponse(rsp *http.Response) (*DeleteIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentRoleResponse parses an HTTP response from a GetIncidentRoleWithResponse call
func ParseGetIncidentRoleResponse(rsp *http.Response) (*GetIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentRoleResponse parses an HTTP response from a UpdateIncidentRoleWithResponse call
func ParseUpdateIncidentRoleResponse(rsp *http.Response) (*UpdateIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIncidentTaskResponse parses an HTTP response from a DeleteIncidentTaskWithResponse call
func ParseDeleteIncidentTaskResponse(rsp *http.Response) (*DeleteIncidentTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentTasksResponse parses an HTTP response from a GetIncidentTasksWithResponse call
func ParseGetIncidentTasksResponse(rsp *http.Response) (*GetIncidentTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentTaskResponse parses an HTTP response from a UpdateIncidentTaskWithResponse call
func ParseUpdateIncidentTaskResponse(rsp *http.Response) (*UpdateIncidentTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentTypesResponse parses an HTTP response from a ListIncidentTypesWithResponse call
func ParseListIncidentTypesResponse(rsp *http.Response) (*ListIncidentTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentTypeResponse parses an HTTP response from a CreateIncidentTypeWithResponse call
func ParseCreateIncidentTypeResponse(rsp *http.Response) (*CreateIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIncidentTypeResponse parses an HTTP response from a DeleteIncidentTypeWithResponse call
func ParseDeleteIncidentTypeResponse(rsp *http.Response) (*DeleteIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentTypeResponse parses an HTTP response from a GetIncidentTypeWithResponse call
func ParseGetIncidentTypeResponse(rsp *http.Response) (*GetIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentTypeResponse parses an HTTP response from a UpdateIncidentTypeWithResponse call
func ParseUpdateIncidentTypeResponse(rsp *http.Response) (*UpdateIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentsResponse parses an HTTP response from a ListIncidentsWithResponse call
func ParseListIncidentsResponse(rsp *http.Response) (*ListIncidentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentResponse parses an HTTP response from a CreateIncidentWithResponse call
func ParseCreateIncidentResponse(rsp *http.Response) (*CreateIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIncidentResponse parses an HTTP response from a DeleteIncidentWithResponse call
func ParseDeleteIncidentResponse(rsp *http.Response) (*DeleteIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentResponse parses an HTTP response from a GetIncidentWithResponse call
func ParseGetIncidentResponse(rsp *http.Response) (*GetIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentResponse parses an HTTP response from a UpdateIncidentWithResponse call
func ParseUpdateIncidentResponse(rsp *http.Response) (*UpdateIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentActionItemsResponse parses an HTTP response from a ListIncidentActionItemsWithResponse call
func ParseListIncidentActionItemsResponse(rsp *http.Response) (*ListIncidentActionItemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentActionItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentActionItemResponse parses an HTTP response from a CreateIncidentActionItemWithResponse call
func ParseCreateIncidentActionItemResponse(rsp *http.Response) (*CreateIncidentActionItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListAlertResponse parses an HTTP response from a ListAlertWithResponse call
func ParseListAlertResponse(rsp *http.Response) (*ListAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseAttachAlertResponse parses an HTTP response from a AttachAlertWithResponse call
func ParseAttachAlertResponse(rsp *http.Response) (*AttachAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AttachAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentEventsResponse parses an HTTP response from a ListIncidentEventsWithResponse call
func ParseListIncidentEventsResponse(rsp *http.Response) (*ListIncidentEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentEventResponse parses an HTTP response from a CreateIncidentEventWithResponse call
func ParseCreateIncidentEventResponse(rsp *http.Response) (*CreateIncidentEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentTasksResponse parses an HTTP response from a ListIncidentTasksWithResponse call
func ParseListIncidentTasksResponse(rsp *http.Response) (*ListIncidentTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentTaskResponse parses an HTTP response from a CreateIncidentTaskWithResponse call
func ParseCreateIncidentTaskResponse(rsp *http.Response) (*CreateIncidentTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeletePlaybookTaskResponse parses an HTTP response from a DeletePlaybookTaskWithResponse call
func ParseDeletePlaybookTaskResponse(rsp *http.Response) (*DeletePlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPlaybookTasksResponse parses an HTTP response from a GetPlaybookTasksWithResponse call
func ParseGetPlaybookTasksResponse(rsp *http.Response) (*GetPlaybookTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPlaybookTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdatePlaybookTaskResponse parses an HTTP response from a UpdatePlaybookTaskWithResponse call
func ParseUpdatePlaybookTaskResponse(rsp *http.Response) (*UpdatePlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListPlaybooksResponse parses an HTTP response from a ListPlaybooksWithResponse call
func ParseListPlaybooksResponse(rsp *http.Response) (*ListPlaybooksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListPlaybooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreatePlaybookResponse parses an HTTP response from a CreatePlaybookWithResponse call
func ParseCreatePlaybookResponse(rsp *http.Response) (*CreatePlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeletePlaybookResponse parses an HTTP response from a DeletePlaybookWithResponse call
func ParseDeletePlaybookResponse(rsp *http.Response) (*DeletePlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPlaybookResponse parses an HTTP response from a GetPlaybookWithResponse call
func ParseGetPlaybookResponse(rsp *http.Response) (*GetPlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdatePlaybookResponse parses an HTTP response from a UpdatePlaybookWithResponse call
func ParseUpdatePlaybookResponse(rsp *http.Response) (*UpdatePlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListPlaybookTasksResponse parses an HTTP response from a ListPlaybookTasksWithResponse call
func ParseListPlaybookTasksResponse(rsp *http.Response) (*ListPlaybookTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListPlaybookTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreatePlaybookTaskResponse parses an HTTP response from a CreatePlaybookTaskWithResponse call
func ParseCreatePlaybookTaskResponse(rsp *http.Response) (*CreatePlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListPostmortemTemplatesResponse parses an HTTP response from a ListPostmortemTemplatesWithResponse call
func ParseListPostmortemTemplatesResponse(rsp *http.Response) (*ListPostmortemTemplatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListPostmortemTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreatePostmortemTemplateResponse parses an HTTP response from a CreatePostmortemTemplateWithResponse call
func ParseCreatePostmortemTemplateResponse(rsp *http.Response) (*CreatePostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeletePostmortemTemplateResponse parses an HTTP response from a DeletePostmortemTemplateWithResponse call
func ParseDeletePostmortemTemplateResponse(rsp *http.Response) (*DeletePostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPostmortemTemplateResponse parses an HTTP response from a GetPostmortemTemplateWithResponse call
func ParseGetPostmortemTemplateResponse(rsp *http.Response) (*GetPostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdatePostmortemTemplateResponse parses an HTTP response from a UpdatePostmortemTemplateWithResponse call
func ParseUpdatePostmortemTemplateResponse(rsp *http.Response) (*UpdatePostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdatePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentPostmortemResponse parses an HTTP response from a GetIncidentPostmortemWithResponse call
func ParseGetIncidentPostmortemResponse(rsp *http.Response) (*GetIncidentPostmortemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentPostmortemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentPostmortemResponse parses an HTTP response from a UpdateIncidentPostmortemWithResponse call
func ParseUpdateIncidentPostmortemResponse(rsp *http.Response) (*UpdateIncidentPostmortemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentPostmortemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListPulsesResponse parses an HTTP response from a ListPulsesWithResponse call
func ParseListPulsesResponse(rsp *http.Response) (*ListPulsesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListPulsesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreatePulseResponse parses an HTTP response from a CreatePulseWithResponse call
func ParseCreatePulseResponse(rsp *http.Response) (*CreatePulseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatePulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPulseResponse parses an HTTP response from a GetPulseWithResponse call
func ParseGetPulseResponse(rsp *http.Response) (*GetPulseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdatePulseResponse parses an HTTP response from a UpdatePulseWithResponse call
func ParseUpdatePulseResponse(rsp *http.Response) (*UpdatePulseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdatePulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListServicesResponse parses an HTTP response from a ListServicesWithResponse call
func ParseListServicesResponse(rsp *http.Response) (*ListServicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateServiceResponse parses an HTTP response from a CreateServiceWithResponse call
func ParseCreateServiceResponse(rsp *http.Response) (*CreateServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteServiceResponse parses an HTTP response from a DeleteServiceWithResponse call
func ParseDeleteServiceResponse(rsp *http.Response) (*DeleteServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetServiceResponse parses an HTTP response from a GetServiceWithResponse call
func ParseGetServiceResponse(rsp *http.Response) (*GetServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateServiceResponse parses an HTTP response from a UpdateServiceWithResponse call
func ParseUpdateServiceResponse(rsp *http.Response) (*UpdateServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListSeveritiesResponse parses an HTTP response from a ListSeveritiesWithResponse call
func ParseListSeveritiesResponse(rsp *http.Response) (*ListSeveritiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSeveritiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateSeverityResponse parses an HTTP response from a CreateSeverityWithResponse call
func ParseCreateSeverityResponse(rsp *http.Response) (*CreateSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteSeverityResponse parses an HTTP response from a DeleteSeverityWithResponse call
func ParseDeleteSeverityResponse(rsp *http.Response) (*DeleteSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSeverityResponse parses an HTTP response from a GetSeverityWithResponse call
func ParseGetSeverityResponse(rsp *http.Response) (*GetSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateSeverityResponse parses an HTTP response from a UpdateSeverityWithResponse call
func ParseUpdateSeverityResponse(rsp *http.Response) (*UpdateSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListStatusPagesResponse parses an HTTP response from a ListStatusPagesWithResponse call
func ParseListStatusPagesResponse(rsp *http.Response) (*ListStatusPagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListStatusPagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateStatusPageResponse parses an HTTP response from a CreateStatusPageWithResponse call
func ParseCreateStatusPageResponse(rsp *http.Response) (*CreateStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteStatusPageResponse parses an HTTP response from a DeleteStatusPageWithResponse call
func ParseDeleteStatusPageResponse(rsp *http.Response) (*DeleteStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetStatusPageResponse parses an HTTP response from a GetStatusPageWithResponse call
func ParseGetStatusPageResponse(rsp *http.Response) (*GetStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateStatusPageResponse parses an HTTP response from a UpdateStatusPageWithResponse call
func ParseUpdateStatusPageResponse(rsp *http.Response) (*UpdateStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListTeamsResponse parses an HTTP response from a ListTeamsWithResponse call
func ParseListTeamsResponse(rsp *http.Response) (*ListTeamsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateTeamResponse parses an HTTP response from a CreateTeamWithResponse call
func ParseCreateTeamResponse(rsp *http.Response) (*CreateTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteTeamResponse parses an HTTP response from a DeleteTeamWithResponse call
func ParseDeleteTeamResponse(rsp *http.Response) (*DeleteTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetTeamResponse parses an HTTP response from a GetTeamWithResponse call
func ParseGetTeamResponse(rsp *http.Response) (*GetTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateTeamResponse parses an HTTP response from a UpdateTeamWithResponse call
func ParseUpdateTeamResponse(rsp *http.Response) (*UpdateTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete a incident action item
	// (DELETE /v1/action_items/{id})
	DeleteIncidentActionItem(ctx echo.Context, id string) error
	// Retrieves a incident action item
	// (GET /v1/action_items/{id})
	GetIncidentActionItems(ctx echo.Context, id string) error
	// Update a incident action item
	// (PUT /v1/action_items/{id})
	UpdateIncidentActionItem(ctx echo.Context, id string) error
	// List alerts
	// (GET /v1/alerts)
	ListAlerts(ctx echo.Context, params ListAlertsParams) error
	// Retrieves a alert
	// (GET /v1/alerts/{id})
	GetAlert(ctx echo.Context, id string) error
	// List causes
	// (GET /v1/causes)
	ListCauses(ctx echo.Context, params ListCausesParams) error
	// Creates a cause
	// (POST /v1/causes)
	CreateCause(ctx echo.Context) error
	// Delete a cause
	// (DELETE /v1/causes/{id})
	DeleteCause(ctx echo.Context, id string) error
	// Retrieves a cause
	// (GET /v1/causes/{id})
	GetCause(ctx echo.Context, id string) error
	// Update a cause
	// (PUT /v1/causes/{id})
	UpdateCause(ctx echo.Context, id string) error
	// List environments
	// (GET /v1/environments)
	ListEnvironments(ctx echo.Context, params ListEnvironmentsParams) error
	// Creates a environment
	// (POST /v1/environments)
	CreateEnvironment(ctx echo.Context) error
	// Delete a environment
	// (DELETE /v1/environments/{id})
	DeleteEnvironment(ctx echo.Context, id string) error
	// Retrieves a environment
	// (GET /v1/environments/{id})
	GetEnvironment(ctx echo.Context, id string) error
	// Update a environment
	// (PUT /v1/environments/{id})
	UpdateEnvironment(ctx echo.Context, id string) error
	// Delete a incident event
	// (DELETE /v1/events/{id})
	DeleteIncidentEvent(ctx echo.Context, id string) error
	// Retrieves a incident event
	// (GET /v1/events/{id})
	GetIncidentEvents(ctx echo.Context, id string) error
	// Update a incident event
	// (PUT /v1/events/{id})
	UpdateIncidentEvent(ctx echo.Context, id string) error
	// List functionalities
	// (GET /v1/functionalities)
	ListFunctionalities(ctx echo.Context, params ListFunctionalitiesParams) error
	// Creates a functionality
	// (POST /v1/functionalities)
	CreateFunctionality(ctx echo.Context) error
	// Delete a functionality
	// (DELETE /v1/functionalities/{id})
	DeleteFunctionality(ctx echo.Context, id string) error
	// Retrieves a functionality
	// (GET /v1/functionalities/{id})
	GetFunctionality(ctx echo.Context, id string) error
	// Update a functionality
	// (PUT /v1/functionalities/{id})
	UpdateFunctionality(ctx echo.Context, id string) error
	// List incident roles
	// (GET /v1/incident_roles)
	ListIncidentRoles(ctx echo.Context, params ListIncidentRolesParams) error
	// Creates a incident role
	// (POST /v1/incident_roles)
	CreateIncidentRole(ctx echo.Context) error
	// Delete a incident role
	// (DELETE /v1/incident_roles/{id})
	DeleteIncidentRole(ctx echo.Context, id string) error
	// Retrieves a incident role
	// (GET /v1/incident_roles/{id})
	GetIncidentRole(ctx echo.Context, id string) error
	// Update a incident role
	// (PUT /v1/incident_roles/{id})
	UpdateIncidentRole(ctx echo.Context, id string) error
	// Delete a incident task
	// (DELETE /v1/incident_tasks/{id})
	DeleteIncidentTask(ctx echo.Context, id string) error
	// Retrieves a incident task
	// (GET /v1/incident_tasks/{id})
	GetIncidentTasks(ctx echo.Context, id string) error
	// Update a incident task
	// (PUT /v1/incident_tasks/{id})
	UpdateIncidentTask(ctx echo.Context, id string) error
	// List incident_types
	// (GET /v1/incident_types)
	ListIncidentTypes(ctx echo.Context, params ListIncidentTypesParams) error
	// Creates a incident_type
	// (POST /v1/incident_types)
	CreateIncidentType(ctx echo.Context) error
	// Delete a incident_type
	// (DELETE /v1/incident_types/{id})
	DeleteIncidentType(ctx echo.Context, id string) error
	// Retrieves a incident_type
	// (GET /v1/incident_types/{id})
	GetIncidentType(ctx echo.Context, id string) error
	// Update a incident_type
	// (PUT /v1/incident_types/{id})
	UpdateIncidentType(ctx echo.Context, id string) error
	// List incidents
	// (GET /v1/incidents)
	ListIncidents(ctx echo.Context, params ListIncidentsParams) error
	// Creates a incident
	// (POST /v1/incidents)
	CreateIncident(ctx echo.Context) error
	// Delete a incident
	// (DELETE /v1/incidents/{id})
	DeleteIncident(ctx echo.Context, id string) error
	// Retrieves a incident
	// (GET /v1/incidents/{id})
	GetIncident(ctx echo.Context, id string) error
	// Update a incident
	// (PUT /v1/incidents/{id})
	UpdateIncident(ctx echo.Context, id string) error
	// List incident action items
	// (GET /v1/incidents/{incident_id}/action_items)
	ListIncidentActionItems(ctx echo.Context, incidentId string, params ListIncidentActionItemsParams) error
	// Creates a incident action item
	// (POST /v1/incidents/{incident_id}/action_items)
	CreateIncidentActionItem(ctx echo.Context, incidentId string) error
	// List alerts
	// (GET /v1/incidents/{incident_id}/alerts)
	ListAlert(ctx echo.Context, incidentId string, params ListAlertParams) error
	// Attach alerts to an incident
	// (POST /v1/incidents/{incident_id}/alerts)
	AttachAlert(ctx echo.Context, incidentId string) error
	// List incident events
	// (GET /v1/incidents/{incident_id}/events)
	ListIncidentEvents(ctx echo.Context, incidentId string, params ListIncidentEventsParams) error
	// Creates a incident event
	// (POST /v1/incidents/{incident_id}/events)
	CreateIncidentEvent(ctx echo.Context, incidentId string) error
	// List incident tasks
	// (GET /v1/incidents/{incident_id}/incident_tasks)
	ListIncidentTasks(ctx echo.Context, incidentId string, params ListIncidentTasksParams) error
	// Creates a incident task
	// (POST /v1/incidents/{incident_id}/incident_tasks)
	CreateIncidentTask(ctx echo.Context, incidentId string) error
	// Delete a playbook task
	// (DELETE /v1/playbook_tasks/{id})
	DeletePlaybookTask(ctx echo.Context, id string) error
	// Retrieves a playbook task
	// (GET /v1/playbook_tasks/{id})
	GetPlaybookTasks(ctx echo.Context, id string) error
	// Update a playbook task
	// (PUT /v1/playbook_tasks/{id})
	UpdatePlaybookTask(ctx echo.Context, id string) error
	// List playbooks
	// (GET /v1/playbooks)
	ListPlaybooks(ctx echo.Context, params ListPlaybooksParams) error
	// Creates a playbook
	// (POST /v1/playbooks)
	CreatePlaybook(ctx echo.Context) error
	// Delete a playbook
	// (DELETE /v1/playbooks/{id})
	DeletePlaybook(ctx echo.Context, id string) error
	// Retrieves a playbook
	// (GET /v1/playbooks/{id})
	GetPlaybook(ctx echo.Context, id string) error
	// Update a playbook
	// (PUT /v1/playbooks/{id})
	UpdatePlaybook(ctx echo.Context, id string) error
	// List playbook tasks
	// (GET /v1/playbooks/{playbook_id}/playbook_tasks)
	ListPlaybookTasks(ctx echo.Context, playbookId string, params ListPlaybookTasksParams) error
	// Creates a playbook task
	// (POST /v1/playbooks/{playbook_id}/playbook_tasks)
	CreatePlaybookTask(ctx echo.Context, playbookId string) error
	// List Postmortem Templates
	// (GET /v1/post_mortem_templates)
	ListPostmortemTemplates(ctx echo.Context, params ListPostmortemTemplatesParams) error
	// Creates a postmortem template
	// (POST /v1/post_mortem_templates)
	CreatePostmortemTemplate(ctx echo.Context) error
	// Delete a Postmortem Template
	// (DELETE /v1/post_mortem_templates/{id})
	DeletePostmortemTemplate(ctx echo.Context, id string) error
	// Retrieves a Postmortem Template
	// (GET /v1/post_mortem_templates/{id})
	GetPostmortemTemplate(ctx echo.Context, id string) error
	// Update a Postmortem Template
	// (PUT /v1/post_mortem_templates/{id})
	UpdatePostmortemTemplate(ctx echo.Context, id string) error
	// Retrieves a incident postmortem
	// (GET /v1/post_mortems/{id})
	GetIncidentPostmortem(ctx echo.Context, id string) error
	// Update a incident postmortem
	// (PUT /v1/post_mortems/{id})
	UpdateIncidentPostmortem(ctx echo.Context, id string) error
	// List pulses
	// (GET /v1/pulses)
	ListPulses(ctx echo.Context, params ListPulsesParams) error
	// Creates a pulse
	// (POST /v1/pulses)
	CreatePulse(ctx echo.Context) error
	// Retrieves a pulse
	// (GET /v1/pulses/{id})
	GetPulse(ctx echo.Context, id string) error
	// Update a pulse
	// (PUT /v1/pulses/{id})
	UpdatePulse(ctx echo.Context, id string) error
	// List services
	// (GET /v1/services)
	ListServices(ctx echo.Context, params ListServicesParams) error
	// Creates a service
	// (POST /v1/services)
	CreateService(ctx echo.Context) error
	// Delete a service
	// (DELETE /v1/services/{id})
	DeleteService(ctx echo.Context, id string) error
	// Retrieves a service
	// (GET /v1/services/{id})
	GetService(ctx echo.Context, id string) error
	// Update a service
	// (PUT /v1/services/{id})
	UpdateService(ctx echo.Context, id string) error
	// List severities
	// (GET /v1/severities)
	ListSeverities(ctx echo.Context, params ListSeveritiesParams) error
	// Creates a severity
	// (POST /v1/severities)
	CreateSeverity(ctx echo.Context) error
	// Delete a severity
	// (DELETE /v1/severities/{id})
	DeleteSeverity(ctx echo.Context, id string) error
	// Retrieves a severity
	// (GET /v1/severities/{id})
	GetSeverity(ctx echo.Context, id string) error
	// Update a severity
	// (PUT /v1/severities/{id})
	UpdateSeverity(ctx echo.Context, id string) error
	// List public status pages
	// (GET /v1/status-pages)
	ListStatusPages(ctx echo.Context, params ListStatusPagesParams) error
	// Creates a public status page
	// (POST /v1/status-pages)
	CreateStatusPage(ctx echo.Context) error
	// Delete a public status page
	// (DELETE /v1/status-pages/{id})
	DeleteStatusPage(ctx echo.Context, id string) error
	// Retrieves a public status page
	// (GET /v1/status-pages/{id})
	GetStatusPage(ctx echo.Context, id string) error
	// Update a public status page
	// (PUT /v1/status-pages/{id})
	UpdateStatusPage(ctx echo.Context, id string) error
	// List teams
	// (GET /v1/teams)
	ListTeams(ctx echo.Context, params ListTeamsParams) error
	// Creates a team
	// (POST /v1/teams)
	CreateTeam(ctx echo.Context) error
	// Delete a team
	// (DELETE /v1/teams/{id})
	DeleteTeam(ctx echo.Context, id string) error
	// Retrieves a team
	// (GET /v1/teams/{id})
	GetTeam(ctx echo.Context, id string) error
	// Update a team
	// (PUT /v1/teams/{id})
	UpdateTeam(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteIncidentActionItem converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentActionItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentActionItem(ctx, id)
	return err
}

// GetIncidentActionItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentActionItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentActionItems(ctx, id)
	return err
}

// UpdateIncidentActionItem converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentActionItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentActionItem(ctx, id)
	return err
}

// ListAlerts converts echo context to params.
func (w *ServerInterfaceWrapper) ListAlerts(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAlertsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAlerts(ctx, params)
	return err
}

// GetAlert converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlert(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAlert(ctx, id)
	return err
}

// ListCauses converts echo context to params.
func (w *ServerInterfaceWrapper) ListCauses(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCausesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListCauses(ctx, params)
	return err
}

// CreateCause converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCause(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCause(ctx)
	return err
}

// DeleteCause converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCause(ctx, id)
	return err
}

// GetCause converts echo context to params.
func (w *ServerInterfaceWrapper) GetCause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCause(ctx, id)
	return err
}

// UpdateCause converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCause(ctx, id)
	return err
}

// ListEnvironments converts echo context to params.
func (w *ServerInterfaceWrapper) ListEnvironments(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEnvironmentsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListEnvironments(ctx, params)
	return err
}

// CreateEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) CreateEnvironment(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateEnvironment(ctx)
	return err
}

// DeleteEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEnvironment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteEnvironment(ctx, id)
	return err
}

// GetEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnvironment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnvironment(ctx, id)
	return err
}

// UpdateEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateEnvironment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateEnvironment(ctx, id)
	return err
}

// DeleteIncidentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentEvent(ctx, id)
	return err
}

// GetIncidentEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentEvents(ctx, id)
	return err
}

// UpdateIncidentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentEvent(ctx, id)
	return err
}

// ListFunctionalities converts echo context to params.
func (w *ServerInterfaceWrapper) ListFunctionalities(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFunctionalitiesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListFunctionalities(ctx, params)
	return err
}

// CreateFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFunctionality(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateFunctionality(ctx)
	return err
}

// DeleteFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFunctionality(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteFunctionality(ctx, id)
	return err
}

// GetFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) GetFunctionality(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFunctionality(ctx, id)
	return err
}

// UpdateFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateFunctionality(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateFunctionality(ctx, id)
	return err
}

// ListIncidentRoles converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentRoles(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentRolesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentRoles(ctx, params)
	return err
}

// CreateIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentRole(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentRole(ctx)
	return err
}

// DeleteIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentRole(ctx, id)
	return err
}

// GetIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentRole(ctx, id)
	return err
}

// UpdateIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentRole(ctx, id)
	return err
}

// DeleteIncidentTask converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentTask(ctx, id)
	return err
}

// GetIncidentTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentTasks(ctx, id)
	return err
}

// UpdateIncidentTask converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentTask(ctx, id)
	return err
}

// ListIncidentTypes converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentTypes(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentTypesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentTypes(ctx, params)
	return err
}

// CreateIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentType(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentType(ctx)
	return err
}

// DeleteIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentType(ctx, id)
	return err
}

// GetIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentType(ctx, id)
	return err
}

// UpdateIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentType(ctx, id)
	return err
}

// ListIncidents converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidents(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidents(ctx, params)
	return err
}

// CreateIncident converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncident(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncident(ctx)
	return err
}

// DeleteIncident converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncident(ctx, id)
	return err
}

// GetIncident converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncident(ctx, id)
	return err
}

// UpdateIncident converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncident(ctx, id)
	return err
}

// ListIncidentActionItems converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentActionItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameter("simple", false, "incident_id", ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentActionItemsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentActionItems(ctx, incidentId, params)
	return err
}

// CreateIncidentActionItem converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentActionItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameter("simple", false, "incident_id", ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentActionItem(ctx, incidentId)
	return err
}

// ListAlert converts echo context to params.
func (w *ServerInterfaceWrapper) ListAlert(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameter("simple", false, "incident_id", ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAlertParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAlert(ctx, incidentId, params)
	return err
}

// AttachAlert converts echo context to params.
func (w *ServerInterfaceWrapper) AttachAlert(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameter("simple", false, "incident_id", ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AttachAlert(ctx, incidentId)
	return err
}

// ListIncidentEvents converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameter("simple", false, "incident_id", ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentEventsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentEvents(ctx, incidentId, params)
	return err
}

// CreateIncidentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameter("simple", false, "incident_id", ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentEvent(ctx, incidentId)
	return err
}

// ListIncidentTasks converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameter("simple", false, "incident_id", ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentTasksParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentTasks(ctx, incidentId, params)
	return err
}

// CreateIncidentTask converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameter("simple", false, "incident_id", ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentTask(ctx, incidentId)
	return err
}

// DeletePlaybookTask converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePlaybookTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePlaybookTask(ctx, id)
	return err
}

// GetPlaybookTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlaybookTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlaybookTasks(ctx, id)
	return err
}

// UpdatePlaybookTask converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePlaybookTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePlaybookTask(ctx, id)
	return err
}

// ListPlaybooks converts echo context to params.
func (w *ServerInterfaceWrapper) ListPlaybooks(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPlaybooksParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPlaybooks(ctx, params)
	return err
}

// CreatePlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePlaybook(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePlaybook(ctx)
	return err
}

// DeletePlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePlaybook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePlaybook(ctx, id)
	return err
}

// GetPlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlaybook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlaybook(ctx, id)
	return err
}

// UpdatePlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePlaybook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePlaybook(ctx, id)
	return err
}

// ListPlaybookTasks converts echo context to params.
func (w *ServerInterfaceWrapper) ListPlaybookTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "playbook_id" -------------
	var playbookId string

	err = runtime.BindStyledParameter("simple", false, "playbook_id", ctx.Param("playbook_id"), &playbookId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter playbook_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPlaybookTasksParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPlaybookTasks(ctx, playbookId, params)
	return err
}

// CreatePlaybookTask converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePlaybookTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "playbook_id" -------------
	var playbookId string

	err = runtime.BindStyledParameter("simple", false, "playbook_id", ctx.Param("playbook_id"), &playbookId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter playbook_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePlaybookTask(ctx, playbookId)
	return err
}

// ListPostmortemTemplates converts echo context to params.
func (w *ServerInterfaceWrapper) ListPostmortemTemplates(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPostmortemTemplatesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPostmortemTemplates(ctx, params)
	return err
}

// CreatePostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePostmortemTemplate(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePostmortemTemplate(ctx)
	return err
}

// DeletePostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePostmortemTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePostmortemTemplate(ctx, id)
	return err
}

// GetPostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostmortemTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPostmortemTemplate(ctx, id)
	return err
}

// UpdatePostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePostmortemTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePostmortemTemplate(ctx, id)
	return err
}

// GetIncidentPostmortem converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentPostmortem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentPostmortem(ctx, id)
	return err
}

// UpdateIncidentPostmortem converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentPostmortem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentPostmortem(ctx, id)
	return err
}

// ListPulses converts echo context to params.
func (w *ServerInterfaceWrapper) ListPulses(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPulsesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPulses(ctx, params)
	return err
}

// CreatePulse converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePulse(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePulse(ctx)
	return err
}

// GetPulse converts echo context to params.
func (w *ServerInterfaceWrapper) GetPulse(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPulse(ctx, id)
	return err
}

// UpdatePulse converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePulse(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePulse(ctx, id)
	return err
}

// ListServices converts echo context to params.
func (w *ServerInterfaceWrapper) ListServices(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListServicesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListServices(ctx, params)
	return err
}

// CreateService converts echo context to params.
func (w *ServerInterfaceWrapper) CreateService(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateService(ctx)
	return err
}

// DeleteService converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteService(ctx, id)
	return err
}

// GetService converts echo context to params.
func (w *ServerInterfaceWrapper) GetService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetService(ctx, id)
	return err
}

// UpdateService converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateService(ctx, id)
	return err
}

// ListSeverities converts echo context to params.
func (w *ServerInterfaceWrapper) ListSeverities(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSeveritiesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListSeverities(ctx, params)
	return err
}

// CreateSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSeverity(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSeverity(ctx)
	return err
}

// DeleteSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSeverity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSeverity(ctx, id)
	return err
}

// GetSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) GetSeverity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSeverity(ctx, id)
	return err
}

// UpdateSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSeverity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateSeverity(ctx, id)
	return err
}

// ListStatusPages converts echo context to params.
func (w *ServerInterfaceWrapper) ListStatusPages(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListStatusPagesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListStatusPages(ctx, params)
	return err
}

// CreateStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) CreateStatusPage(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateStatusPage(ctx)
	return err
}

// DeleteStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteStatusPage(ctx, id)
	return err
}

// GetStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatusPage(ctx, id)
	return err
}

// UpdateStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateStatusPage(ctx, id)
	return err
}

// ListTeams converts echo context to params.
func (w *ServerInterfaceWrapper) ListTeams(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTeamsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTeams(ctx, params)
	return err
}

// CreateTeam converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTeam(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTeam(ctx)
	return err
}

// DeleteTeam converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTeam(ctx, id)
	return err
}

// GetTeam converts echo context to params.
func (w *ServerInterfaceWrapper) GetTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTeam(ctx, id)
	return err
}

// UpdateTeam converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTeam(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v1/action_items/:id", wrapper.DeleteIncidentActionItem)
	router.GET(baseURL+"/v1/action_items/:id", wrapper.GetIncidentActionItems)
	router.PUT(baseURL+"/v1/action_items/:id", wrapper.UpdateIncidentActionItem)
	router.GET(baseURL+"/v1/alerts", wrapper.ListAlerts)
	router.GET(baseURL+"/v1/alerts/:id", wrapper.GetAlert)
	router.GET(baseURL+"/v1/causes", wrapper.ListCauses)
	router.POST(baseURL+"/v1/causes", wrapper.CreateCause)
	router.DELETE(baseURL+"/v1/causes/:id", wrapper.DeleteCause)
	router.GET(baseURL+"/v1/causes/:id", wrapper.GetCause)
	router.PUT(baseURL+"/v1/causes/:id", wrapper.UpdateCause)
	router.GET(baseURL+"/v1/environments", wrapper.ListEnvironments)
	router.POST(baseURL+"/v1/environments", wrapper.CreateEnvironment)
	router.DELETE(baseURL+"/v1/environments/:id", wrapper.DeleteEnvironment)
	router.GET(baseURL+"/v1/environments/:id", wrapper.GetEnvironment)
	router.PUT(baseURL+"/v1/environments/:id", wrapper.UpdateEnvironment)
	router.DELETE(baseURL+"/v1/events/:id", wrapper.DeleteIncidentEvent)
	router.GET(baseURL+"/v1/events/:id", wrapper.GetIncidentEvents)
	router.PUT(baseURL+"/v1/events/:id", wrapper.UpdateIncidentEvent)
	router.GET(baseURL+"/v1/functionalities", wrapper.ListFunctionalities)
	router.POST(baseURL+"/v1/functionalities", wrapper.CreateFunctionality)
	router.DELETE(baseURL+"/v1/functionalities/:id", wrapper.DeleteFunctionality)
	router.GET(baseURL+"/v1/functionalities/:id", wrapper.GetFunctionality)
	router.PUT(baseURL+"/v1/functionalities/:id", wrapper.UpdateFunctionality)
	router.GET(baseURL+"/v1/incident_roles", wrapper.ListIncidentRoles)
	router.POST(baseURL+"/v1/incident_roles", wrapper.CreateIncidentRole)
	router.DELETE(baseURL+"/v1/incident_roles/:id", wrapper.DeleteIncidentRole)
	router.GET(baseURL+"/v1/incident_roles/:id", wrapper.GetIncidentRole)
	router.PUT(baseURL+"/v1/incident_roles/:id", wrapper.UpdateIncidentRole)
	router.DELETE(baseURL+"/v1/incident_tasks/:id", wrapper.DeleteIncidentTask)
	router.GET(baseURL+"/v1/incident_tasks/:id", wrapper.GetIncidentTasks)
	router.PUT(baseURL+"/v1/incident_tasks/:id", wrapper.UpdateIncidentTask)
	router.GET(baseURL+"/v1/incident_types", wrapper.ListIncidentTypes)
	router.POST(baseURL+"/v1/incident_types", wrapper.CreateIncidentType)
	router.DELETE(baseURL+"/v1/incident_types/:id", wrapper.DeleteIncidentType)
	router.GET(baseURL+"/v1/incident_types/:id", wrapper.GetIncidentType)
	router.PUT(baseURL+"/v1/incident_types/:id", wrapper.UpdateIncidentType)
	router.GET(baseURL+"/v1/incidents", wrapper.ListIncidents)
	router.POST(baseURL+"/v1/incidents", wrapper.CreateIncident)
	router.DELETE(baseURL+"/v1/incidents/:id", wrapper.DeleteIncident)
	router.GET(baseURL+"/v1/incidents/:id", wrapper.GetIncident)
	router.PUT(baseURL+"/v1/incidents/:id", wrapper.UpdateIncident)
	router.GET(baseURL+"/v1/incidents/:incident_id/action_items", wrapper.ListIncidentActionItems)
	router.POST(baseURL+"/v1/incidents/:incident_id/action_items", wrapper.CreateIncidentActionItem)
	router.GET(baseURL+"/v1/incidents/:incident_id/alerts", wrapper.ListAlert)
	router.POST(baseURL+"/v1/incidents/:incident_id/alerts", wrapper.AttachAlert)
	router.GET(baseURL+"/v1/incidents/:incident_id/events", wrapper.ListIncidentEvents)
	router.POST(baseURL+"/v1/incidents/:incident_id/events", wrapper.CreateIncidentEvent)
	router.GET(baseURL+"/v1/incidents/:incident_id/incident_tasks", wrapper.ListIncidentTasks)
	router.POST(baseURL+"/v1/incidents/:incident_id/incident_tasks", wrapper.CreateIncidentTask)
	router.DELETE(baseURL+"/v1/playbook_tasks/:id", wrapper.DeletePlaybookTask)
	router.GET(baseURL+"/v1/playbook_tasks/:id", wrapper.GetPlaybookTasks)
	router.PUT(baseURL+"/v1/playbook_tasks/:id", wrapper.UpdatePlaybookTask)
	router.GET(baseURL+"/v1/playbooks", wrapper.ListPlaybooks)
	router.POST(baseURL+"/v1/playbooks", wrapper.CreatePlaybook)
	router.DELETE(baseURL+"/v1/playbooks/:id", wrapper.DeletePlaybook)
	router.GET(baseURL+"/v1/playbooks/:id", wrapper.GetPlaybook)
	router.PUT(baseURL+"/v1/playbooks/:id", wrapper.UpdatePlaybook)
	router.GET(baseURL+"/v1/playbooks/:playbook_id/playbook_tasks", wrapper.ListPlaybookTasks)
	router.POST(baseURL+"/v1/playbooks/:playbook_id/playbook_tasks", wrapper.CreatePlaybookTask)
	router.GET(baseURL+"/v1/post_mortem_templates", wrapper.ListPostmortemTemplates)
	router.POST(baseURL+"/v1/post_mortem_templates", wrapper.CreatePostmortemTemplate)
	router.DELETE(baseURL+"/v1/post_mortem_templates/:id", wrapper.DeletePostmortemTemplate)
	router.GET(baseURL+"/v1/post_mortem_templates/:id", wrapper.GetPostmortemTemplate)
	router.PUT(baseURL+"/v1/post_mortem_templates/:id", wrapper.UpdatePostmortemTemplate)
	router.GET(baseURL+"/v1/post_mortems/:id", wrapper.GetIncidentPostmortem)
	router.PUT(baseURL+"/v1/post_mortems/:id", wrapper.UpdateIncidentPostmortem)
	router.GET(baseURL+"/v1/pulses", wrapper.ListPulses)
	router.POST(baseURL+"/v1/pulses", wrapper.CreatePulse)
	router.GET(baseURL+"/v1/pulses/:id", wrapper.GetPulse)
	router.PUT(baseURL+"/v1/pulses/:id", wrapper.UpdatePulse)
	router.GET(baseURL+"/v1/services", wrapper.ListServices)
	router.POST(baseURL+"/v1/services", wrapper.CreateService)
	router.DELETE(baseURL+"/v1/services/:id", wrapper.DeleteService)
	router.GET(baseURL+"/v1/services/:id", wrapper.GetService)
	router.PUT(baseURL+"/v1/services/:id", wrapper.UpdateService)
	router.GET(baseURL+"/v1/severities", wrapper.ListSeverities)
	router.POST(baseURL+"/v1/severities", wrapper.CreateSeverity)
	router.DELETE(baseURL+"/v1/severities/:id", wrapper.DeleteSeverity)
	router.GET(baseURL+"/v1/severities/:id", wrapper.GetSeverity)
	router.PUT(baseURL+"/v1/severities/:id", wrapper.UpdateSeverity)
	router.GET(baseURL+"/v1/status-pages", wrapper.ListStatusPages)
	router.POST(baseURL+"/v1/status-pages", wrapper.CreateStatusPage)
	router.DELETE(baseURL+"/v1/status-pages/:id", wrapper.DeleteStatusPage)
	router.GET(baseURL+"/v1/status-pages/:id", wrapper.GetStatusPage)
	router.PUT(baseURL+"/v1/status-pages/:id", wrapper.UpdateStatusPage)
	router.GET(baseURL+"/v1/teams", wrapper.ListTeams)
	router.POST(baseURL+"/v1/teams", wrapper.CreateTeam)
	router.DELETE(baseURL+"/v1/teams/:id", wrapper.DeleteTeam)
	router.GET(baseURL+"/v1/teams/:id", wrapper.GetTeam)
	router.PUT(baseURL+"/v1/teams/:id", wrapper.UpdateTeam)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

