// Package rootly provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package rootly

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Bearer_authScopes = "bearer_auth.Scopes"
)

// Cause defines model for cause.
type Cause struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the cause
	Description *string `json:"description"`

	// The name of the cause
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// CauseList defines model for cause_list.
type CauseList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/cause)
			Cause `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the cause
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// CauseResponse defines model for cause_response.
type CauseResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/cause)
			Cause `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the cause
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Environment defines model for environment.
type Environment struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the environment
	Description *string `json:"description"`

	// The name of the environment
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// EnvironmentList defines model for environment_list.
type EnvironmentList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/environment)
			Environment `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the environment
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// EnvironmentResponse defines model for environment_response.
type EnvironmentResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/environment)
			Environment `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the environment
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// ErrorsList defines model for errors_list.
type ErrorsList struct {
	Errors *[]struct {
		Code   *string `json:"code"`
		Detail *string `json:"detail"`
		Status string  `json:"status"`
		Title  string  `json:"title"`
	} `json:"errors,omitempty"`
}

// Functionality defines model for functionality.
type Functionality struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the functionality
	Description *string `json:"description"`

	// The name of the functionality
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// FunctionalityList defines model for functionality_list.
type FunctionalityList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/functionality)
			Functionality `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the functionality
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// FunctionalityResponse defines model for functionality_response.
type FunctionalityResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/functionality)
			Functionality `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the functionality
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Incident defines model for incident.
type Incident struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the incident
	Description *string `json:"description"`

	// The Environment ID to attach to the incident
	EnvironmentId *string `json:"environment_id"`

	// The Functionality ID's to attach to the incident
	FunctionalityIds *[]string `json:"functionality_ids"`

	// The Team ID's to attach to the incident
	GroupIds *[]string `json:"group_ids"`

	// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
	Labels *map[string]interface{} `json:"labels"`

	// The Service ID's to attach to the incident
	ServiceIds *[]string `json:"service_ids"`

	// The Severity ID to attach to the incident
	SeverityId *string `json:"severity_id"`

	// The title of the incident
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentActionItem defines model for incident_action_item.
type IncidentActionItem struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of incident action item
	Description *string `json:"description"`

	// The priority of the incident action item
	Priority *string `json:"priority,omitempty"`

	// The status of incident the action item
	Status *string `json:"status,omitempty"`

	// The summary of the incident action item
	Summary string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentActionItemList defines model for incident_action_item_list.
type IncidentActionItemList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_action_item)
			IncidentActionItem `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident action item
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentActionItemResponse defines model for incident_action_item_response.
type IncidentActionItemResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_action_item)
			IncidentActionItem `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident action item
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// IncidentEvent defines model for incident_event.
type IncidentEvent struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The summary of the incident event
	Event string `json:"event"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// The visibility of the incident action item
	Visibility *string `json:"visibility,omitempty"`
}

// IncidentEventList defines model for incident_event_list.
type IncidentEventList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_event)
			IncidentEvent `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident event
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentEventResponse defines model for incident_event_response.
type IncidentEventResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_event)
			IncidentEvent `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident event
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// IncidentList defines model for incident_list.
type IncidentList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident)
			Incident `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentPostMortem defines model for incident_post_mortem.
type IncidentPostMortem struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Date of mitigation
	MitigatedAt *string `json:"mitigated_at"`

	// Date of resolution
	ResolvedAt *string `json:"resolved_at"`

	// Show services impacted of the incident postmortem
	ShowFunctionalitiesImpacted *bool `json:"show_functionalities_impacted,omitempty"`

	// Show groups impacted of the incident postmortem
	ShowGroupsImpacted *bool `json:"show_groups_impacted,omitempty"`

	// Show functionalities impacted of the incident postmortem
	ShowServicesImpacted *bool `json:"show_services_impacted,omitempty"`

	// Show events timeline of the incident postmortem
	ShowTimeline *bool `json:"show_timeline,omitempty"`

	// Show genius events in the timeline of the incident postmortem
	ShowTimelineGenius *bool `json:"show_timeline_genius,omitempty"`

	// Show trail events in the timeline of the incident postmortem
	ShowTimelineTrail *bool `json:"show_timeline_trail,omitempty"`

	// Date of started at
	StartedAt *string `json:"started_at"`

	// The status of the incident postmortem
	Status *string `json:"status,omitempty"`

	// The title of the incident postmortem
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentPostMortemResponse defines model for incident_post_mortem_response.
type IncidentPostMortemResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_post_mortem)
			IncidentPostMortem `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident postmortem
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// IncidentResponse defines model for incident_response.
type IncidentResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident)
			Incident `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// IncidentRole defines model for incident_role.
type IncidentRole struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the incident role
	Description *string `json:"description"`

	// The name of the incident role
	Name string `json:"name"`

	// The summary of the incident role
	Summary *string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentRoleList defines model for incident_role_list.
type IncidentRoleList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_role)
			IncidentRole `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident role
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentRoleResponse defines model for incident_role_response.
type IncidentRoleResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_role)
			IncidentRole `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident role
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// IncidentTask defines model for incident_task.
type IncidentTask struct {
	Checked *bool `json:"checked,omitempty"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of incident task
	Description *string `json:"description"`

	// The task of the incident task
	Task string `json:"task"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentTaskList defines model for incident_task_list.
type IncidentTaskList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_task)
			IncidentTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentTaskResponse defines model for incident_task_response.
type IncidentTaskResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_task)
			IncidentTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// IncidentType defines model for incident_type.
type IncidentType struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the incident type
	Description *string `json:"description"`

	// The name of the incident type
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentTypeList defines model for incident_type_list.
type IncidentTypeList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_type)
			IncidentType `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident type
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentTypeResponse defines model for incident_type_response.
type IncidentTypeResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_type)
			IncidentType `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident type
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Links defines model for links.
type Links struct {
	First string  `json:"first"`
	Last  string  `json:"last"`
	Next  *string `json:"next"`
	Prev  *string `json:"prev"`
	Self  string  `json:"self"`
}

// NewCause defines model for new_cause.
type NewCause struct {
	Data struct {
		Attributes struct {

			// The description of the cause
			Description *string `json:"description"`

			// The name of the cause
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewEnvironment defines model for new_environment.
type NewEnvironment struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the environment
			Description *string `json:"description"`

			// The name of the environment
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewFunctionality defines model for new_functionality.
type NewFunctionality struct {
	Data struct {
		Attributes struct {

			// The description of the functionality
			Description *string `json:"description"`

			// The name of the functionality
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewIncident defines model for new_incident.
type NewIncident struct {
	Data struct {
		Attributes struct {

			// Create a task on Asana as well (if integration enabled)
			CreateOnAsana *bool `json:"create_on_asana"`

			// Create an story on Clubhouse as well (if integration enabled)
			CreateOnClubhouse *bool `json:"create_on_clubhouse"`

			// Create a Google meet meeting as well (if integration enabled)
			CreateOnGoogleMeet *bool `json:"create_on_google_meet"`

			// Create an issue on Jira as well (if integration enabled)
			CreateOnJira *bool `json:"create_on_jira"`

			// Create an issue on Linear as well (if integration enabled)
			CreateOnLinear *bool `json:"create_on_linear"`

			// Create a incident on Opsgenie as well  (if integration enabled)
			CreateOnOpsgenie *bool `json:"create_on_opsgenie"`

			// Create an incident on PagerDuty as well for specified PagerDuty services ids (if integration enabled)
			CreateOnPagerduty *bool `json:"create_on_pagerduty"`

			// Create an incident on ServiceNow as well (if integration enabled)
			CreateOnServiceNow *bool `json:"create_on_service_now"`

			// Create an incident on Slack as well (if integration enabled)
			CreateOnSlack *bool `json:"create_on_slack"`

			// Create a card on Trello as well (if integration enabled)
			CreateOnTrello *bool `json:"create_on_trello"`

			// Create an issue on Zendesk as well (if integration enabled)
			CreateOnZendesk *bool `json:"create_on_zendesk"`

			// Create a Zoom meeting as well (if integration enabled)
			CreateOnZoom *bool `json:"create_on_zoom"`

			// The description of the incident
			Description *string `json:"description"`

			// The Environment ID to attach to the incident
			EnvironmentId *string `json:"environment_id"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
			Labels *map[string]interface{} `json:"labels"`

			// Emails you want to notify
			NotifyEmails *[]string `json:"notify_emails"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID to attach to the incident
			SeverityId *string `json:"severity_id"`

			// The title of the incident
			Title string `json:"title"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewIncidentActionItem defines model for new_incident_action_item.
type NewIncidentActionItem struct {
	Data struct {
		Attributes struct {

			// Create a Asana task as well (if integration enabled)
			CreateOnAsana *bool `json:"create_on_asana"`

			// Create a Clubhouse task as well (if integration enabled)
			CreateOnClubhouse *bool `json:"create_on_clubhouse"`

			// Create an Jira issue as well (if integration enabled)
			CreateOnJira *bool `json:"create_on_jira"`

			// Create an Linear issue as well (if integration enabled)
			CreateOnLinear *bool `json:"create_on_linear"`

			// Create a Trello task as well (if integration enabled)
			CreateOnTrello *bool `json:"create_on_trello"`

			// Create an issue on Zendesk as well (if integration enabled)
			CreateOnZendesk *bool `json:"create_on_zendesk"`

			// The description of the incident action item
			Description *string `json:"description"`

			// The priority of the incident action item
			Priority *string `json:"priority,omitempty"`

			// The status of incident the action item
			Status *string `json:"status,omitempty"`

			// The summary of the incident action item
			Summary string `json:"summary"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewIncidentEvent defines model for new_incident_event.
type NewIncidentEvent struct {
	Data struct {
		Attributes struct {

			// The summary of the incident event
			Event string `json:"event"`

			// The visibility of the incident action item
			Visibility *string `json:"visibility,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewIncidentRole defines model for new_incident_role.
type NewIncidentRole struct {
	Data struct {
		Attributes struct {

			// The description of the incident role
			Description *string `json:"description"`

			// The name of the incident role
			Name string `json:"name"`

			// The summary of the incident role
			Summary *string `json:"summary"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewIncidentTask defines model for new_incident_task.
type NewIncidentTask struct {
	Data struct {
		Attributes struct {
			Checked *bool `json:"checked,omitempty"`

			// The description of the incident task
			Description *string `json:"description"`

			// The task of the incident task
			Task string `json:"task"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewIncidentType defines model for new_incident_type.
type NewIncidentType struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the incident type
			Description *string `json:"description"`

			// The name of the incident type
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewPlaybook defines model for new_playbook.
type NewPlaybook struct {
	Data struct {
		Attributes struct {

			// The summary of the playbook
			Summary *string `json:"summary"`

			// The title of the playbook
			Title string `json:"title"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewPlaybookTask defines model for new_playbook_task.
type NewPlaybookTask struct {
	Data struct {
		Attributes struct {

			// The description of the incident task
			Description *string `json:"description"`

			// The task of the incident task
			Task string `json:"task"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewPostMortemTemplate defines model for new_post_mortem_template.
type NewPostMortemTemplate struct {
	Data struct {
		Attributes struct {

			// Default selected template when editing a postmortem
			Default *bool `json:"default"`

			// The name of the postmortem template
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewPulse defines model for new_pulse.
type NewPulse struct {
	Data struct {
		Attributes struct {

			// Pulse end datetime
			EndedAt *time.Time `json:"ended_at"`

			// The Environment ID's to attach to the pulse
			EnvironmentIds *[]string `json:"environment_ids"`
			Labels         *[]struct {

				// Key of the tag
				Key string `json:"key"`

				// Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`

			// The Service ID's to attach to the pulse
			ServiceIds *[]string `json:"service_ids"`

			// Pulse start datetime
			StartedAt *time.Time `json:"started_at"`

			// The summary of the pulse
			Summary *string `json:"summary"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewService defines model for new_service.
type NewService struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the service
			Description *string `json:"description"`

			// The name of the service
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewSeverity defines model for new_severity.
type NewSeverity struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the severity
			Description *string `json:"description"`

			// The name of the severity
			Name string `json:"name"`

			// The severity of the severity
			Severity *string `json:"severity,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewStatusPage defines model for new_status_page.
type NewStatusPage struct {
	Data struct {
		Attributes struct {

			// Allow search engines to include your public status page in search results.
			AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

			// The description of the status page
			Description *string `json:"description"`

			// Enabled / Disable the status page
			Enabled *bool `json:"enabled"`

			// The color of the footer. Eg. "#1F2F41"
			FooterColor *string `json:"footer_color"`

			// The color of the header. Eg. "#0061F2"
			HeaderColor *string `json:"header_color"`

			// Make the status page accessible to the public
			Public *bool `json:"public"`

			// The title of the status page
			Title string `json:"title"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewTeam defines model for new_team.
type NewTeam struct {
	Data struct {
		Attributes struct {

			// The description of the team
			Description *string `json:"description"`

			// The name of the team
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// Playbook defines model for playbook.
type Playbook struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The summary of the playbook
	Summary *string `json:"summary"`

	// The title of the playbook
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PlaybookList defines model for playbook_list.
type PlaybookList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook)
			Playbook `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the playbook
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PlaybookResponse defines model for playbook_response.
type PlaybookResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook)
			Playbook `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the playbook
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// PlaybookTask defines model for playbook_task.
type PlaybookTask struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of incident task
	Description *string `json:"description"`

	// The task of the incident task
	Task string `json:"task"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PlaybookTaskList defines model for playbook_task_list.
type PlaybookTaskList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook_task)
			PlaybookTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PlaybookTaskResponse defines model for playbook_task_response.
type PlaybookTaskResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook_task)
			PlaybookTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// PostMortemTemplate defines model for post_mortem_template.
type PostMortemTemplate struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Default selected template when editing a postmortem
	Default *bool `json:"default"`

	// The name of the postmortem template
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PostMortemTemplateList defines model for post_mortem_template_list.
type PostMortemTemplateList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/post_mortem_template)
			PostMortemTemplate `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the post_mortem_template
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PostMortemTemplateResponse defines model for post_mortem_template_response.
type PostMortemTemplateResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/post_mortem_template)
			PostMortemTemplate `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the post_mortem_template
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Pulse defines model for pulse.
type Pulse struct {

	// Date of creation
	CreatedAt string `json:"created_at"`
	Labels    *[]struct {

		// Key of the tag
		Key string `json:"key"`

		// Value of the tag
		Value string `json:"value"`
	} `json:"labels,omitempty"`

	// The summary of the pulse
	Summary *string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PulseList defines model for pulse_list.
type PulseList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/pulse)
			Pulse `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the pulse
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PulseResponse defines model for pulse_response.
type PulseResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/pulse)
			Pulse `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the pulse
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Service defines model for service.
type Service struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the service
	Description *string `json:"description"`

	// The name of the service
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// ServiceList defines model for service_list.
type ServiceList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/service)
			Service `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the service
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// ServiceResponse defines model for service_response.
type ServiceResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/service)
			Service `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the service
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Severity defines model for severity.
type Severity struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the severity
	Description *string `json:"description"`

	// The name of the severity
	Name string `json:"name"`

	// The severity of the severity
	Severity *string `json:"severity,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// SeverityList defines model for severity_list.
type SeverityList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/severity)
			Severity `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the severity
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// SeverityResponse defines model for severity_response.
type SeverityResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/severity)
			Severity `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the severity
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// StatusPage defines model for status_page.
type StatusPage struct {

	// Allow search engines to include your public status page in search results.
	AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the status page
	Description *string `json:"description"`

	// Enabled / Disable the status page
	Enabled *bool `json:"enabled"`

	// The color of the footer. Eg. "#1F2F41"
	FooterColor *string `json:"footer_color"`

	// The color of the header. Eg. "#0061F2"
	HeaderColor *string `json:"header_color"`

	// Make the status page accessible to the public
	Public *bool `json:"public"`

	// The title of the status page
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// StatusPageList defines model for status_page_list.
type StatusPageList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/status_page)
			StatusPage `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the status page
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// StatusPageResponse defines model for status_page_response.
type StatusPageResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/status_page)
			StatusPage `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the status page
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Team defines model for team.
type Team struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the team
	Description *string `json:"description"`

	// The name of the team
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// TeamList defines model for team_list.
type TeamList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/team)
			Team `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the team
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// TeamResponse defines model for team_response.
type TeamResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/team)
			Team `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the team
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateCause defines model for update_cause.
type UpdateCause struct {
	Data struct {
		Attributes struct {

			// The description of the cause
			Description *string `json:"description"`

			// The name of the cause
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateEnvironment defines model for update_environment.
type UpdateEnvironment struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the environment
			Description *string `json:"description"`

			// The name of the environment
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateFunctionality defines model for update_functionality.
type UpdateFunctionality struct {
	Data struct {
		Attributes struct {

			// The description of the functionality
			Description *string `json:"description"`

			// The name of the functionality
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncident defines model for update_incident.
type UpdateIncident struct {
	Data struct {
		Attributes struct {

			// The description of the incident
			Description *string `json:"description"`

			// The Environment ID to attach to the incident
			EnvironmentId *string `json:"environment_id"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
			Labels *map[string]interface{} `json:"labels"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID to attach to the incident
			SeverityId *string `json:"severity_id"`

			// The title of the incident
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncidentActionItem defines model for update_incident_action_item.
type UpdateIncidentActionItem struct {
	Data struct {
		Attributes struct {

			// The description of the incident action item
			Description *string `json:"description"`

			// The priority of the incident action item
			Priority *string `json:"priority,omitempty"`

			// The status of incident the action item
			Status *string `json:"status,omitempty"`

			// The summary of the incident action item
			Summary *string `json:"summary,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncidentEvent defines model for update_incident_event.
type UpdateIncidentEvent struct {
	Data struct {
		Attributes struct {

			// The summary of the incident event
			Event *string `json:"event,omitempty"`

			// The visibility of the incident action item
			Visibility *string `json:"visibility,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncidentPostMortem defines model for update_incident_post_mortem.
type UpdateIncidentPostMortem struct {
	Data struct {
		Attributes struct {

			// Date of mitigation
			MitigatedAt *string `json:"mitigated_at"`

			// Date of resolution
			ResolvedAt *string `json:"resolved_at"`

			// Show services impacted of the incident postmortem
			ShowFunctionalitiesImpacted *bool `json:"show_functionalities_impacted,omitempty"`

			// Show groups impacted of the incident postmortem
			ShowGroupsImpacted *bool `json:"show_groups_impacted,omitempty"`

			// Show functionalities impacted of the incident postmortem
			ShowServicesImpacted *bool `json:"show_services_impacted,omitempty"`

			// Show events timeline of the incident postmortem
			ShowTimeline *bool `json:"show_timeline,omitempty"`

			// Show genius events in the timeline of the incident postmortem
			ShowTimelineGenius *bool `json:"show_timeline_genius,omitempty"`

			// Show trail events in the timeline of the incident postmortem
			ShowTimelineTrail *bool `json:"show_timeline_trail,omitempty"`

			// Date of started at
			StartedAt *string `json:"started_at"`

			// The status of the incident postmortem
			Status *string `json:"status,omitempty"`

			// The title of the incident postmortem
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncidentRole defines model for update_incident_role.
type UpdateIncidentRole struct {
	Data struct {
		Attributes struct {

			// The description of the incident role
			Description *string `json:"description"`

			// The name of the incident role
			Name *string `json:"name,omitempty"`

			// The summary of the incident role
			Summary *string `json:"summary"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncidentTask defines model for update_incident_task.
type UpdateIncidentTask struct {
	Data struct {
		Attributes struct {
			Checked *bool `json:"checked,omitempty"`

			// The description of the incident task
			Description *string `json:"description"`

			// The task of the incident task
			Task *string `json:"task,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncidentType defines model for update_incident_type.
type UpdateIncidentType struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the incident type
			Description *string `json:"description"`

			// The name of the incident type
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdatePlaybook defines model for update_playbook.
type UpdatePlaybook struct {
	Data struct {
		Attributes struct {

			// The summary of the playbook
			Summary *string `json:"summary"`

			// The title of the playbook
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdatePlaybookTask defines model for update_playbook_task.
type UpdatePlaybookTask struct {
	Data struct {
		Attributes struct {

			// The description of the incident task
			Description *string `json:"description"`

			// The task of the incident task
			Task *string `json:"task,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdatePostMortemTemplate defines model for update_post_mortem_template.
type UpdatePostMortemTemplate struct {
	Data struct {
		Attributes struct {

			// Default selected template when editing a postmortem
			Default *bool `json:"default"`

			// The name of the postmortem template
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdatePulse defines model for update_pulse.
type UpdatePulse struct {
	Data struct {
		Attributes struct {

			// Pulse end datetime
			EndedAt *time.Time `json:"ended_at"`

			// The Environment ID's to attach to the pulse
			EnvironmentIds *[]string `json:"environment_ids"`
			Labels         *[]struct {

				// Key of the tag
				Key string `json:"key"`

				// Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`

			// The Service ID's to attach to the pulse
			ServiceIds *[]string `json:"service_ids"`

			// Pulse start datetime
			StartedAt *time.Time `json:"started_at"`

			// The summary of the pulse
			Summary *string `json:"summary"`
		} `json:"attributes"`
		Type *string `json:"type,omitempty"`
	} `json:"data"`
}

// UpdateService defines model for update_service.
type UpdateService struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the service
			Description *string `json:"description"`

			// The name of the service
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateSeverity defines model for update_severity.
type UpdateSeverity struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the severity
			Description *string `json:"description"`

			// The name of the severity
			Name *string `json:"name,omitempty"`

			// The severity of the severity
			Severity *string `json:"severity,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateStatusPage defines model for update_status_page.
type UpdateStatusPage struct {
	Data struct {
		Attributes struct {

			// Allow search engines to include your public status page in search results.
			AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

			// The description of the status page
			Description *string `json:"description"`

			// Enabled / Disable the status page
			Enabled *bool `json:"enabled"`

			// The color of the footer. Eg. "#1F2F41"
			FooterColor *string `json:"footer_color"`

			// The color of the header. Eg. "#0061F2"
			HeaderColor *string `json:"header_color"`

			// Make the status page accessible to the public
			Public *bool `json:"public"`

			// The title of the status page
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateTeam defines model for update_team.
type UpdateTeam struct {
	Data struct {
		Attributes struct {

			// The description of the team
			Description *string `json:"description"`

			// The name of the team
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// ListCausesParams defines parameters for ListCauses.
type ListCausesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListEnvironmentsParams defines parameters for ListEnvironments.
type ListEnvironmentsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListFunctionalitiesParams defines parameters for ListFunctionalities.
type ListFunctionalitiesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentRolesParams defines parameters for ListIncidentRoles.
type ListIncidentRolesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentTypesParams defines parameters for ListIncidentTypes.
type ListIncidentTypesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentsParams defines parameters for ListIncidents.
type ListIncidentsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentActionItemsParams defines parameters for ListIncidentActionItems.
type ListIncidentActionItemsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentEventsParams defines parameters for ListIncidentEvents.
type ListIncidentEventsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentTasksParams defines parameters for ListIncidentTasks.
type ListIncidentTasksParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListPlaybooksParams defines parameters for ListPlaybooks.
type ListPlaybooksParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListPlaybookTasksParams defines parameters for ListPlaybookTasks.
type ListPlaybookTasksParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListPostmortemTemplatesParams defines parameters for ListPostmortemTemplates.
type ListPostmortemTemplatesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListPulsesParams defines parameters for ListPulses.
type ListPulsesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListServicesParams defines parameters for ListServices.
type ListServicesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListSeveritiesParams defines parameters for ListSeverities.
type ListSeveritiesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListStatusPagesParams defines parameters for ListStatusPages.
type ListStatusPagesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListTeamsParams defines parameters for ListTeams.
type ListTeamsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteIncidentActionItem request
	DeleteIncidentActionItem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentActionItems request
	GetIncidentActionItems(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentActionItem request  with any body
	UpdateIncidentActionItemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCauses request
	ListCauses(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCause request  with any body
	CreateCauseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCause request
	DeleteCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCause request
	GetCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCause request  with any body
	UpdateCauseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEnvironments request
	ListEnvironments(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEnvironment request  with any body
	CreateEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnvironment request
	DeleteEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironment request
	GetEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEnvironment request  with any body
	UpdateEnvironmentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentEvent request
	DeleteIncidentEvent(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentEvents request
	GetIncidentEvents(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentEvent request  with any body
	UpdateIncidentEventWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFunctionalities request
	ListFunctionalities(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFunctionality request  with any body
	CreateFunctionalityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFunctionality request
	DeleteFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionality request
	GetFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFunctionality request  with any body
	UpdateFunctionalityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentRoles request
	ListIncidentRoles(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentRole request  with any body
	CreateIncidentRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentRole request
	DeleteIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentRole request
	GetIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentRole request  with any body
	UpdateIncidentRoleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentTask request
	DeleteIncidentTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentTasks request
	GetIncidentTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentTask request  with any body
	UpdateIncidentTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentTypes request
	ListIncidentTypes(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentType request  with any body
	CreateIncidentTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentType request
	DeleteIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentType request
	GetIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentType request  with any body
	UpdateIncidentTypeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidents request
	ListIncidents(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncident request  with any body
	CreateIncidentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncident request
	DeleteIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncident request
	GetIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncident request  with any body
	UpdateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentActionItems request
	ListIncidentActionItems(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentActionItem request  with any body
	CreateIncidentActionItemWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentEvents request
	ListIncidentEvents(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentEvent request  with any body
	CreateIncidentEventWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentTasks request
	ListIncidentTasks(ctx context.Context, incidentId string, params *ListIncidentTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentTask request  with any body
	CreateIncidentTaskWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePlaybookTask request
	DeletePlaybookTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaybookTasks request
	GetPlaybookTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlaybookTask request  with any body
	UpdatePlaybookTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPlaybooks request
	ListPlaybooks(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlaybook request  with any body
	CreatePlaybookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePlaybook request
	DeletePlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaybook request
	GetPlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlaybook request  with any body
	UpdatePlaybookWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPlaybookTasks request
	ListPlaybookTasks(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlaybookTask request  with any body
	CreatePlaybookTaskWithBody(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPostmortemTemplates request
	ListPostmortemTemplates(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePostmortemTemplate request  with any body
	CreatePostmortemTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePostmortemTemplate request
	DeletePostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPostmortemTemplate request
	GetPostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePostmortemTemplate request  with any body
	UpdatePostmortemTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentPostmortem request
	GetIncidentPostmortem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentPostmortem request  with any body
	UpdateIncidentPostmortemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPulses request
	ListPulses(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePulse request  with any body
	CreatePulseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPulse request
	GetPulse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePulse request  with any body
	UpdatePulseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListServices request
	ListServices(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateService request  with any body
	CreateServiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteService request
	DeleteService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetService request
	GetService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateService request  with any body
	UpdateServiceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSeverities request
	ListSeverities(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSeverity request  with any body
	CreateSeverityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSeverity request
	DeleteSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSeverity request
	GetSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSeverity request  with any body
	UpdateSeverityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListStatusPages request
	ListStatusPages(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStatusPage request  with any body
	CreateStatusPageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStatusPage request
	DeleteStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusPage request
	GetStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateStatusPage request  with any body
	UpdateStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTeams request
	ListTeams(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTeam request  with any body
	CreateTeamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTeam request
	DeleteTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeam request
	GetTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTeam request  with any body
	UpdateTeamWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteIncidentActionItem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentActionItemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentActionItems(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentActionItemsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentActionItemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentActionItemRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCauses(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCausesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCauseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCauseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCauseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCauseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCauseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCauseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEnvironments(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEnvironmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvironmentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnvironmentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEnvironmentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentEvent(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentEventRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentEvents(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentEventsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentEventWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentEventRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFunctionalities(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFunctionalitiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFunctionalityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFunctionalityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFunctionalityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionalityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFunctionalityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFunctionalityRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentRoles(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentRoleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRoleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentTasksRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentTaskRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentTypes(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentTypeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentTypeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentTypeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentTypeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidents(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentActionItems(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentActionItemsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentActionItemWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentActionItemRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentEvents(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentEventsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentEventWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentEventRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentTasks(ctx context.Context, incidentId string, params *ListIncidentTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentTasksRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentTaskWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentTaskRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePlaybookTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePlaybookTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaybookTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaybookTasksRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlaybookTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlaybookTaskRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPlaybooks(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPlaybooksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlaybookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlaybookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePlaybookRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaybookRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlaybookWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlaybookRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPlaybookTasks(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPlaybookTasksRequest(c.Server, playbookId, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlaybookTaskWithBody(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlaybookTaskRequestWithBody(c.Server, playbookId, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPostmortemTemplates(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPostmortemTemplatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePostmortemTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePostmortemTemplateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePostmortemTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPostmortemTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePostmortemTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePostmortemTemplateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentPostmortem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentPostmortemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentPostmortemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentPostmortemRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPulses(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPulsesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePulseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePulseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPulse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPulseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePulseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePulseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListServices(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListServicesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateServiceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateServiceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSeverities(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSeveritiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSeverityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSeverityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSeverityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSeverityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSeverityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSeverityRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListStatusPages(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListStatusPagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStatusPageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStatusPageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStatusPageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusPageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStatusPageRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTeams(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTeamsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTeamRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteIncidentActionItemRequest generates requests for DeleteIncidentActionItem
func NewDeleteIncidentActionItemRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentActionItemsRequest generates requests for GetIncidentActionItems
func NewGetIncidentActionItemsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentActionItemRequestWithBody generates requests for UpdateIncidentActionItem with any type of body
func NewUpdateIncidentActionItemRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCausesRequest generates requests for ListCauses
func NewListCausesRequest(server string, params *ListCausesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/causes")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCauseRequestWithBody generates requests for CreateCause with any type of body
func NewCreateCauseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/causes")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCauseRequest generates requests for DeleteCause
func NewDeleteCauseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCauseRequest generates requests for GetCause
func NewGetCauseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCauseRequestWithBody generates requests for UpdateCause with any type of body
func NewUpdateCauseRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListEnvironmentsRequest generates requests for ListEnvironments
func NewListEnvironmentsRequest(server string, params *ListEnvironmentsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/environments")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEnvironmentRequestWithBody generates requests for CreateEnvironment with any type of body
func NewCreateEnvironmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/environments")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEnvironmentRequest generates requests for DeleteEnvironment
func NewDeleteEnvironmentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvironmentRequest generates requests for GetEnvironment
func NewGetEnvironmentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEnvironmentRequestWithBody generates requests for UpdateEnvironment with any type of body
func NewUpdateEnvironmentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentEventRequest generates requests for DeleteIncidentEvent
func NewDeleteIncidentEventRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentEventsRequest generates requests for GetIncidentEvents
func NewGetIncidentEventsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentEventRequestWithBody generates requests for UpdateIncidentEvent with any type of body
func NewUpdateIncidentEventRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListFunctionalitiesRequest generates requests for ListFunctionalities
func NewListFunctionalitiesRequest(server string, params *ListFunctionalitiesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/functionalities")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFunctionalityRequestWithBody generates requests for CreateFunctionality with any type of body
func NewCreateFunctionalityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/functionalities")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFunctionalityRequest generates requests for DeleteFunctionality
func NewDeleteFunctionalityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFunctionalityRequest generates requests for GetFunctionality
func NewGetFunctionalityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFunctionalityRequestWithBody generates requests for UpdateFunctionality with any type of body
func NewUpdateFunctionalityRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentRolesRequest generates requests for ListIncidentRoles
func NewListIncidentRolesRequest(server string, params *ListIncidentRolesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/incident_roles")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentRoleRequestWithBody generates requests for CreateIncidentRole with any type of body
func NewCreateIncidentRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/incident_roles")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentRoleRequest generates requests for DeleteIncidentRole
func NewDeleteIncidentRoleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentRoleRequest generates requests for GetIncidentRole
func NewGetIncidentRoleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentRoleRequestWithBody generates requests for UpdateIncidentRole with any type of body
func NewUpdateIncidentRoleRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentTaskRequest generates requests for DeleteIncidentTask
func NewDeleteIncidentTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/incident_tasks/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentTasksRequest generates requests for GetIncidentTasks
func NewGetIncidentTasksRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/incident_tasks/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentTaskRequestWithBody generates requests for UpdateIncidentTask with any type of body
func NewUpdateIncidentTaskRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/incident_tasks/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentTypesRequest generates requests for ListIncidentTypes
func NewListIncidentTypesRequest(server string, params *ListIncidentTypesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/incident_types")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentTypeRequestWithBody generates requests for CreateIncidentType with any type of body
func NewCreateIncidentTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/incident_types")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentTypeRequest generates requests for DeleteIncidentType
func NewDeleteIncidentTypeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentTypeRequest generates requests for GetIncidentType
func NewGetIncidentTypeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentTypeRequestWithBody generates requests for UpdateIncidentType with any type of body
func NewUpdateIncidentTypeRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentsRequest generates requests for ListIncidents
func NewListIncidentsRequest(server string, params *ListIncidentsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/incidents")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentRequestWithBody generates requests for CreateIncident with any type of body
func NewCreateIncidentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/incidents")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentRequest generates requests for DeleteIncident
func NewDeleteIncidentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentRequest generates requests for GetIncident
func NewGetIncidentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentRequestWithBody generates requests for UpdateIncident with any type of body
func NewUpdateIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentActionItemsRequest generates requests for ListIncidentActionItems
func NewListIncidentActionItemsRequest(server string, incidentId string, params *ListIncidentActionItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "incident_id", incidentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/incidents/%s/action_items", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentActionItemRequestWithBody generates requests for CreateIncidentActionItem with any type of body
func NewCreateIncidentActionItemRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "incident_id", incidentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/incidents/%s/action_items", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentEventsRequest generates requests for ListIncidentEvents
func NewListIncidentEventsRequest(server string, incidentId string, params *ListIncidentEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "incident_id", incidentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/incidents/%s/events", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentEventRequestWithBody generates requests for CreateIncidentEvent with any type of body
func NewCreateIncidentEventRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "incident_id", incidentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/incidents/%s/events", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentTasksRequest generates requests for ListIncidentTasks
func NewListIncidentTasksRequest(server string, incidentId string, params *ListIncidentTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "incident_id", incidentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/incidents/%s/incident_tasks", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentTaskRequestWithBody generates requests for CreateIncidentTask with any type of body
func NewCreateIncidentTaskRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "incident_id", incidentId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/incidents/%s/incident_tasks", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePlaybookTaskRequest generates requests for DeletePlaybookTask
func NewDeletePlaybookTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlaybookTasksRequest generates requests for GetPlaybookTasks
func NewGetPlaybookTasksRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlaybookTaskRequestWithBody generates requests for UpdatePlaybookTask with any type of body
func NewUpdatePlaybookTaskRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPlaybooksRequest generates requests for ListPlaybooks
func NewListPlaybooksRequest(server string, params *ListPlaybooksParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/playbooks")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlaybookRequestWithBody generates requests for CreatePlaybook with any type of body
func NewCreatePlaybookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/playbooks")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePlaybookRequest generates requests for DeletePlaybook
func NewDeletePlaybookRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlaybookRequest generates requests for GetPlaybook
func NewGetPlaybookRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlaybookRequestWithBody generates requests for UpdatePlaybook with any type of body
func NewUpdatePlaybookRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPlaybookTasksRequest generates requests for ListPlaybookTasks
func NewListPlaybookTasksRequest(server string, playbookId string, params *ListPlaybookTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "playbook_id", playbookId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/playbooks/%s/playbook_tasks", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlaybookTaskRequestWithBody generates requests for CreatePlaybookTask with any type of body
func NewCreatePlaybookTaskRequestWithBody(server string, playbookId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "playbook_id", playbookId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/playbooks/%s/playbook_tasks", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPostmortemTemplatesRequest generates requests for ListPostmortemTemplates
func NewListPostmortemTemplatesRequest(server string, params *ListPostmortemTemplatesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/post_mortem_templates")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePostmortemTemplateRequestWithBody generates requests for CreatePostmortemTemplate with any type of body
func NewCreatePostmortemTemplateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/post_mortem_templates")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePostmortemTemplateRequest generates requests for DeletePostmortemTemplate
func NewDeletePostmortemTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPostmortemTemplateRequest generates requests for GetPostmortemTemplate
func NewGetPostmortemTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePostmortemTemplateRequestWithBody generates requests for UpdatePostmortemTemplate with any type of body
func NewUpdatePostmortemTemplateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIncidentPostmortemRequest generates requests for GetIncidentPostmortem
func NewGetIncidentPostmortemRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/post_mortems/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentPostmortemRequestWithBody generates requests for UpdateIncidentPostmortem with any type of body
func NewUpdateIncidentPostmortemRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/post_mortems/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPulsesRequest generates requests for ListPulses
func NewListPulsesRequest(server string, params *ListPulsesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/pulses")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePulseRequestWithBody generates requests for CreatePulse with any type of body
func NewCreatePulseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/pulses")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPulseRequest generates requests for GetPulse
func NewGetPulseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/pulses/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePulseRequestWithBody generates requests for UpdatePulse with any type of body
func NewUpdatePulseRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/pulses/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListServicesRequest generates requests for ListServices
func NewListServicesRequest(server string, params *ListServicesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/services")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateServiceRequestWithBody generates requests for CreateService with any type of body
func NewCreateServiceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/services")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServiceRequest generates requests for DeleteService
func NewDeleteServiceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceRequest generates requests for GetService
func NewGetServiceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateServiceRequestWithBody generates requests for UpdateService with any type of body
func NewUpdateServiceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSeveritiesRequest generates requests for ListSeverities
func NewListSeveritiesRequest(server string, params *ListSeveritiesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/severities")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSeverityRequestWithBody generates requests for CreateSeverity with any type of body
func NewCreateSeverityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/severities")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSeverityRequest generates requests for DeleteSeverity
func NewDeleteSeverityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSeverityRequest generates requests for GetSeverity
func NewGetSeverityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSeverityRequestWithBody generates requests for UpdateSeverity with any type of body
func NewUpdateSeverityRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListStatusPagesRequest generates requests for ListStatusPages
func NewListStatusPagesRequest(server string, params *ListStatusPagesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/status-pages")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateStatusPageRequestWithBody generates requests for CreateStatusPage with any type of body
func NewCreateStatusPageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/status-pages")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStatusPageRequest generates requests for DeleteStatusPage
func NewDeleteStatusPageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusPageRequest generates requests for GetStatusPage
func NewGetStatusPageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateStatusPageRequestWithBody generates requests for UpdateStatusPage with any type of body
func NewUpdateStatusPageRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListTeamsRequest generates requests for ListTeams
func NewListTeamsRequest(server string, params *ListTeamsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/teams")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[number]", *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page[size]", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTeamRequestWithBody generates requests for CreateTeam with any type of body
func NewCreateTeamRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/teams")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTeamRequest generates requests for DeleteTeam
func NewDeleteTeamRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamRequest generates requests for GetTeam
func NewGetTeamRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTeamRequestWithBody generates requests for UpdateTeam with any type of body
func NewUpdateTeamRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	req = req.WithContext(ctx)
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteIncidentActionItem request
	DeleteIncidentActionItemWithResponse(ctx context.Context, id string) (*DeleteIncidentActionItemResponse, error)

	// GetIncidentActionItems request
	GetIncidentActionItemsWithResponse(ctx context.Context, id string) (*GetIncidentActionItemsResponse, error)

	// UpdateIncidentActionItem request  with any body
	UpdateIncidentActionItemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateIncidentActionItemResponse, error)

	// ListCauses request
	ListCausesWithResponse(ctx context.Context, params *ListCausesParams) (*ListCausesResponse, error)

	// CreateCause request  with any body
	CreateCauseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateCauseResponse, error)

	// DeleteCause request
	DeleteCauseWithResponse(ctx context.Context, id string) (*DeleteCauseResponse, error)

	// GetCause request
	GetCauseWithResponse(ctx context.Context, id string) (*GetCauseResponse, error)

	// UpdateCause request  with any body
	UpdateCauseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateCauseResponse, error)

	// ListEnvironments request
	ListEnvironmentsWithResponse(ctx context.Context, params *ListEnvironmentsParams) (*ListEnvironmentsResponse, error)

	// CreateEnvironment request  with any body
	CreateEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateEnvironmentResponse, error)

	// DeleteEnvironment request
	DeleteEnvironmentWithResponse(ctx context.Context, id string) (*DeleteEnvironmentResponse, error)

	// GetEnvironment request
	GetEnvironmentWithResponse(ctx context.Context, id string) (*GetEnvironmentResponse, error)

	// UpdateEnvironment request  with any body
	UpdateEnvironmentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateEnvironmentResponse, error)

	// DeleteIncidentEvent request
	DeleteIncidentEventWithResponse(ctx context.Context, id string) (*DeleteIncidentEventResponse, error)

	// GetIncidentEvents request
	GetIncidentEventsWithResponse(ctx context.Context, id string) (*GetIncidentEventsResponse, error)

	// UpdateIncidentEvent request  with any body
	UpdateIncidentEventWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateIncidentEventResponse, error)

	// ListFunctionalities request
	ListFunctionalitiesWithResponse(ctx context.Context, params *ListFunctionalitiesParams) (*ListFunctionalitiesResponse, error)

	// CreateFunctionality request  with any body
	CreateFunctionalityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateFunctionalityResponse, error)

	// DeleteFunctionality request
	DeleteFunctionalityWithResponse(ctx context.Context, id string) (*DeleteFunctionalityResponse, error)

	// GetFunctionality request
	GetFunctionalityWithResponse(ctx context.Context, id string) (*GetFunctionalityResponse, error)

	// UpdateFunctionality request  with any body
	UpdateFunctionalityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateFunctionalityResponse, error)

	// ListIncidentRoles request
	ListIncidentRolesWithResponse(ctx context.Context, params *ListIncidentRolesParams) (*ListIncidentRolesResponse, error)

	// CreateIncidentRole request  with any body
	CreateIncidentRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateIncidentRoleResponse, error)

	// DeleteIncidentRole request
	DeleteIncidentRoleWithResponse(ctx context.Context, id string) (*DeleteIncidentRoleResponse, error)

	// GetIncidentRole request
	GetIncidentRoleWithResponse(ctx context.Context, id string) (*GetIncidentRoleResponse, error)

	// UpdateIncidentRole request  with any body
	UpdateIncidentRoleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateIncidentRoleResponse, error)

	// DeleteIncidentTask request
	DeleteIncidentTaskWithResponse(ctx context.Context, id string) (*DeleteIncidentTaskResponse, error)

	// GetIncidentTasks request
	GetIncidentTasksWithResponse(ctx context.Context, id string) (*GetIncidentTasksResponse, error)

	// UpdateIncidentTask request  with any body
	UpdateIncidentTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateIncidentTaskResponse, error)

	// ListIncidentTypes request
	ListIncidentTypesWithResponse(ctx context.Context, params *ListIncidentTypesParams) (*ListIncidentTypesResponse, error)

	// CreateIncidentType request  with any body
	CreateIncidentTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateIncidentTypeResponse, error)

	// DeleteIncidentType request
	DeleteIncidentTypeWithResponse(ctx context.Context, id string) (*DeleteIncidentTypeResponse, error)

	// GetIncidentType request
	GetIncidentTypeWithResponse(ctx context.Context, id string) (*GetIncidentTypeResponse, error)

	// UpdateIncidentType request  with any body
	UpdateIncidentTypeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateIncidentTypeResponse, error)

	// ListIncidents request
	ListIncidentsWithResponse(ctx context.Context, params *ListIncidentsParams) (*ListIncidentsResponse, error)

	// CreateIncident request  with any body
	CreateIncidentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateIncidentResponse, error)

	// DeleteIncident request
	DeleteIncidentWithResponse(ctx context.Context, id string) (*DeleteIncidentResponse, error)

	// GetIncident request
	GetIncidentWithResponse(ctx context.Context, id string) (*GetIncidentResponse, error)

	// UpdateIncident request  with any body
	UpdateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateIncidentResponse, error)

	// ListIncidentActionItems request
	ListIncidentActionItemsWithResponse(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams) (*ListIncidentActionItemsResponse, error)

	// CreateIncidentActionItem request  with any body
	CreateIncidentActionItemWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader) (*CreateIncidentActionItemResponse, error)

	// ListIncidentEvents request
	ListIncidentEventsWithResponse(ctx context.Context, incidentId string, params *ListIncidentEventsParams) (*ListIncidentEventsResponse, error)

	// CreateIncidentEvent request  with any body
	CreateIncidentEventWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader) (*CreateIncidentEventResponse, error)

	// ListIncidentTasks request
	ListIncidentTasksWithResponse(ctx context.Context, incidentId string, params *ListIncidentTasksParams) (*ListIncidentTasksResponse, error)

	// CreateIncidentTask request  with any body
	CreateIncidentTaskWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader) (*CreateIncidentTaskResponse, error)

	// DeletePlaybookTask request
	DeletePlaybookTaskWithResponse(ctx context.Context, id string) (*DeletePlaybookTaskResponse, error)

	// GetPlaybookTasks request
	GetPlaybookTasksWithResponse(ctx context.Context, id string) (*GetPlaybookTasksResponse, error)

	// UpdatePlaybookTask request  with any body
	UpdatePlaybookTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdatePlaybookTaskResponse, error)

	// ListPlaybooks request
	ListPlaybooksWithResponse(ctx context.Context, params *ListPlaybooksParams) (*ListPlaybooksResponse, error)

	// CreatePlaybook request  with any body
	CreatePlaybookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreatePlaybookResponse, error)

	// DeletePlaybook request
	DeletePlaybookWithResponse(ctx context.Context, id string) (*DeletePlaybookResponse, error)

	// GetPlaybook request
	GetPlaybookWithResponse(ctx context.Context, id string) (*GetPlaybookResponse, error)

	// UpdatePlaybook request  with any body
	UpdatePlaybookWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdatePlaybookResponse, error)

	// ListPlaybookTasks request
	ListPlaybookTasksWithResponse(ctx context.Context, playbookId string, params *ListPlaybookTasksParams) (*ListPlaybookTasksResponse, error)

	// CreatePlaybookTask request  with any body
	CreatePlaybookTaskWithBodyWithResponse(ctx context.Context, playbookId string, contentType string, body io.Reader) (*CreatePlaybookTaskResponse, error)

	// ListPostmortemTemplates request
	ListPostmortemTemplatesWithResponse(ctx context.Context, params *ListPostmortemTemplatesParams) (*ListPostmortemTemplatesResponse, error)

	// CreatePostmortemTemplate request  with any body
	CreatePostmortemTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreatePostmortemTemplateResponse, error)

	// DeletePostmortemTemplate request
	DeletePostmortemTemplateWithResponse(ctx context.Context, id string) (*DeletePostmortemTemplateResponse, error)

	// GetPostmortemTemplate request
	GetPostmortemTemplateWithResponse(ctx context.Context, id string) (*GetPostmortemTemplateResponse, error)

	// UpdatePostmortemTemplate request  with any body
	UpdatePostmortemTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdatePostmortemTemplateResponse, error)

	// GetIncidentPostmortem request
	GetIncidentPostmortemWithResponse(ctx context.Context, id string) (*GetIncidentPostmortemResponse, error)

	// UpdateIncidentPostmortem request  with any body
	UpdateIncidentPostmortemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateIncidentPostmortemResponse, error)

	// ListPulses request
	ListPulsesWithResponse(ctx context.Context, params *ListPulsesParams) (*ListPulsesResponse, error)

	// CreatePulse request  with any body
	CreatePulseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreatePulseResponse, error)

	// GetPulse request
	GetPulseWithResponse(ctx context.Context, id string) (*GetPulseResponse, error)

	// UpdatePulse request  with any body
	UpdatePulseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdatePulseResponse, error)

	// ListServices request
	ListServicesWithResponse(ctx context.Context, params *ListServicesParams) (*ListServicesResponse, error)

	// CreateService request  with any body
	CreateServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateServiceResponse, error)

	// DeleteService request
	DeleteServiceWithResponse(ctx context.Context, id string) (*DeleteServiceResponse, error)

	// GetService request
	GetServiceWithResponse(ctx context.Context, id string) (*GetServiceResponse, error)

	// UpdateService request  with any body
	UpdateServiceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateServiceResponse, error)

	// ListSeverities request
	ListSeveritiesWithResponse(ctx context.Context, params *ListSeveritiesParams) (*ListSeveritiesResponse, error)

	// CreateSeverity request  with any body
	CreateSeverityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateSeverityResponse, error)

	// DeleteSeverity request
	DeleteSeverityWithResponse(ctx context.Context, id string) (*DeleteSeverityResponse, error)

	// GetSeverity request
	GetSeverityWithResponse(ctx context.Context, id string) (*GetSeverityResponse, error)

	// UpdateSeverity request  with any body
	UpdateSeverityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateSeverityResponse, error)

	// ListStatusPages request
	ListStatusPagesWithResponse(ctx context.Context, params *ListStatusPagesParams) (*ListStatusPagesResponse, error)

	// CreateStatusPage request  with any body
	CreateStatusPageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateStatusPageResponse, error)

	// DeleteStatusPage request
	DeleteStatusPageWithResponse(ctx context.Context, id string) (*DeleteStatusPageResponse, error)

	// GetStatusPage request
	GetStatusPageWithResponse(ctx context.Context, id string) (*GetStatusPageResponse, error)

	// UpdateStatusPage request  with any body
	UpdateStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateStatusPageResponse, error)

	// ListTeams request
	ListTeamsWithResponse(ctx context.Context, params *ListTeamsParams) (*ListTeamsResponse, error)

	// CreateTeam request  with any body
	CreateTeamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateTeamResponse, error)

	// DeleteTeam request
	DeleteTeamWithResponse(ctx context.Context, id string) (*DeleteTeamResponse, error)

	// GetTeam request
	GetTeamWithResponse(ctx context.Context, id string) (*GetTeamResponse, error)

	// UpdateTeam request  with any body
	UpdateTeamWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateTeamResponse, error)
}

type DeleteIncidentActionItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentActionItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentActionItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentActionItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentActionItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCausesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListCausesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCausesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFunctionalitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListFunctionalitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFunctionalitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentActionItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentActionItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentActionItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentActionItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaybookTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlaybookTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaybookTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPlaybooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPlaybooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPlaybooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPlaybookTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPlaybookTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPlaybookTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPostmortemTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPostmortemTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPostmortemTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentPostmortemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentPostmortemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentPostmortemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentPostmortemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentPostmortemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentPostmortemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPulsesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPulsesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPulsesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSeveritiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListSeveritiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSeveritiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListStatusPagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListStatusPagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListStatusPagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteIncidentActionItemWithResponse request returning *DeleteIncidentActionItemResponse
func (c *ClientWithResponses) DeleteIncidentActionItemWithResponse(ctx context.Context, id string) (*DeleteIncidentActionItemResponse, error) {
	rsp, err := c.DeleteIncidentActionItem(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentActionItemResponse(rsp)
}

// GetIncidentActionItemsWithResponse request returning *GetIncidentActionItemsResponse
func (c *ClientWithResponses) GetIncidentActionItemsWithResponse(ctx context.Context, id string) (*GetIncidentActionItemsResponse, error) {
	rsp, err := c.GetIncidentActionItems(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentActionItemsResponse(rsp)
}

// UpdateIncidentActionItemWithBodyWithResponse request with arbitrary body returning *UpdateIncidentActionItemResponse
func (c *ClientWithResponses) UpdateIncidentActionItemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateIncidentActionItemResponse, error) {
	rsp, err := c.UpdateIncidentActionItemWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentActionItemResponse(rsp)
}

// ListCausesWithResponse request returning *ListCausesResponse
func (c *ClientWithResponses) ListCausesWithResponse(ctx context.Context, params *ListCausesParams) (*ListCausesResponse, error) {
	rsp, err := c.ListCauses(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListCausesResponse(rsp)
}

// CreateCauseWithBodyWithResponse request with arbitrary body returning *CreateCauseResponse
func (c *ClientWithResponses) CreateCauseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateCauseResponse, error) {
	rsp, err := c.CreateCauseWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateCauseResponse(rsp)
}

// DeleteCauseWithResponse request returning *DeleteCauseResponse
func (c *ClientWithResponses) DeleteCauseWithResponse(ctx context.Context, id string) (*DeleteCauseResponse, error) {
	rsp, err := c.DeleteCause(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCauseResponse(rsp)
}

// GetCauseWithResponse request returning *GetCauseResponse
func (c *ClientWithResponses) GetCauseWithResponse(ctx context.Context, id string) (*GetCauseResponse, error) {
	rsp, err := c.GetCause(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetCauseResponse(rsp)
}

// UpdateCauseWithBodyWithResponse request with arbitrary body returning *UpdateCauseResponse
func (c *ClientWithResponses) UpdateCauseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateCauseResponse, error) {
	rsp, err := c.UpdateCauseWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCauseResponse(rsp)
}

// ListEnvironmentsWithResponse request returning *ListEnvironmentsResponse
func (c *ClientWithResponses) ListEnvironmentsWithResponse(ctx context.Context, params *ListEnvironmentsParams) (*ListEnvironmentsResponse, error) {
	rsp, err := c.ListEnvironments(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListEnvironmentsResponse(rsp)
}

// CreateEnvironmentWithBodyWithResponse request with arbitrary body returning *CreateEnvironmentResponse
func (c *ClientWithResponses) CreateEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironmentWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

// DeleteEnvironmentWithResponse request returning *DeleteEnvironmentResponse
func (c *ClientWithResponses) DeleteEnvironmentWithResponse(ctx context.Context, id string) (*DeleteEnvironmentResponse, error) {
	rsp, err := c.DeleteEnvironment(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentResponse(rsp)
}

// GetEnvironmentWithResponse request returning *GetEnvironmentResponse
func (c *ClientWithResponses) GetEnvironmentWithResponse(ctx context.Context, id string) (*GetEnvironmentResponse, error) {
	rsp, err := c.GetEnvironment(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentResponse(rsp)
}

// UpdateEnvironmentWithBodyWithResponse request with arbitrary body returning *UpdateEnvironmentResponse
func (c *ClientWithResponses) UpdateEnvironmentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateEnvironmentResponse, error) {
	rsp, err := c.UpdateEnvironmentWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnvironmentResponse(rsp)
}

// DeleteIncidentEventWithResponse request returning *DeleteIncidentEventResponse
func (c *ClientWithResponses) DeleteIncidentEventWithResponse(ctx context.Context, id string) (*DeleteIncidentEventResponse, error) {
	rsp, err := c.DeleteIncidentEvent(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentEventResponse(rsp)
}

// GetIncidentEventsWithResponse request returning *GetIncidentEventsResponse
func (c *ClientWithResponses) GetIncidentEventsWithResponse(ctx context.Context, id string) (*GetIncidentEventsResponse, error) {
	rsp, err := c.GetIncidentEvents(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentEventsResponse(rsp)
}

// UpdateIncidentEventWithBodyWithResponse request with arbitrary body returning *UpdateIncidentEventResponse
func (c *ClientWithResponses) UpdateIncidentEventWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateIncidentEventResponse, error) {
	rsp, err := c.UpdateIncidentEventWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentEventResponse(rsp)
}

// ListFunctionalitiesWithResponse request returning *ListFunctionalitiesResponse
func (c *ClientWithResponses) ListFunctionalitiesWithResponse(ctx context.Context, params *ListFunctionalitiesParams) (*ListFunctionalitiesResponse, error) {
	rsp, err := c.ListFunctionalities(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListFunctionalitiesResponse(rsp)
}

// CreateFunctionalityWithBodyWithResponse request with arbitrary body returning *CreateFunctionalityResponse
func (c *ClientWithResponses) CreateFunctionalityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateFunctionalityResponse, error) {
	rsp, err := c.CreateFunctionalityWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateFunctionalityResponse(rsp)
}

// DeleteFunctionalityWithResponse request returning *DeleteFunctionalityResponse
func (c *ClientWithResponses) DeleteFunctionalityWithResponse(ctx context.Context, id string) (*DeleteFunctionalityResponse, error) {
	rsp, err := c.DeleteFunctionality(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFunctionalityResponse(rsp)
}

// GetFunctionalityWithResponse request returning *GetFunctionalityResponse
func (c *ClientWithResponses) GetFunctionalityWithResponse(ctx context.Context, id string) (*GetFunctionalityResponse, error) {
	rsp, err := c.GetFunctionality(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionalityResponse(rsp)
}

// UpdateFunctionalityWithBodyWithResponse request with arbitrary body returning *UpdateFunctionalityResponse
func (c *ClientWithResponses) UpdateFunctionalityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateFunctionalityResponse, error) {
	rsp, err := c.UpdateFunctionalityWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFunctionalityResponse(rsp)
}

// ListIncidentRolesWithResponse request returning *ListIncidentRolesResponse
func (c *ClientWithResponses) ListIncidentRolesWithResponse(ctx context.Context, params *ListIncidentRolesParams) (*ListIncidentRolesResponse, error) {
	rsp, err := c.ListIncidentRoles(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentRolesResponse(rsp)
}

// CreateIncidentRoleWithBodyWithResponse request with arbitrary body returning *CreateIncidentRoleResponse
func (c *ClientWithResponses) CreateIncidentRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateIncidentRoleResponse, error) {
	rsp, err := c.CreateIncidentRoleWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentRoleResponse(rsp)
}

// DeleteIncidentRoleWithResponse request returning *DeleteIncidentRoleResponse
func (c *ClientWithResponses) DeleteIncidentRoleWithResponse(ctx context.Context, id string) (*DeleteIncidentRoleResponse, error) {
	rsp, err := c.DeleteIncidentRole(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentRoleResponse(rsp)
}

// GetIncidentRoleWithResponse request returning *GetIncidentRoleResponse
func (c *ClientWithResponses) GetIncidentRoleWithResponse(ctx context.Context, id string) (*GetIncidentRoleResponse, error) {
	rsp, err := c.GetIncidentRole(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentRoleResponse(rsp)
}

// UpdateIncidentRoleWithBodyWithResponse request with arbitrary body returning *UpdateIncidentRoleResponse
func (c *ClientWithResponses) UpdateIncidentRoleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateIncidentRoleResponse, error) {
	rsp, err := c.UpdateIncidentRoleWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentRoleResponse(rsp)
}

// DeleteIncidentTaskWithResponse request returning *DeleteIncidentTaskResponse
func (c *ClientWithResponses) DeleteIncidentTaskWithResponse(ctx context.Context, id string) (*DeleteIncidentTaskResponse, error) {
	rsp, err := c.DeleteIncidentTask(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentTaskResponse(rsp)
}

// GetIncidentTasksWithResponse request returning *GetIncidentTasksResponse
func (c *ClientWithResponses) GetIncidentTasksWithResponse(ctx context.Context, id string) (*GetIncidentTasksResponse, error) {
	rsp, err := c.GetIncidentTasks(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentTasksResponse(rsp)
}

// UpdateIncidentTaskWithBodyWithResponse request with arbitrary body returning *UpdateIncidentTaskResponse
func (c *ClientWithResponses) UpdateIncidentTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateIncidentTaskResponse, error) {
	rsp, err := c.UpdateIncidentTaskWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentTaskResponse(rsp)
}

// ListIncidentTypesWithResponse request returning *ListIncidentTypesResponse
func (c *ClientWithResponses) ListIncidentTypesWithResponse(ctx context.Context, params *ListIncidentTypesParams) (*ListIncidentTypesResponse, error) {
	rsp, err := c.ListIncidentTypes(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentTypesResponse(rsp)
}

// CreateIncidentTypeWithBodyWithResponse request with arbitrary body returning *CreateIncidentTypeResponse
func (c *ClientWithResponses) CreateIncidentTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateIncidentTypeResponse, error) {
	rsp, err := c.CreateIncidentTypeWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentTypeResponse(rsp)
}

// DeleteIncidentTypeWithResponse request returning *DeleteIncidentTypeResponse
func (c *ClientWithResponses) DeleteIncidentTypeWithResponse(ctx context.Context, id string) (*DeleteIncidentTypeResponse, error) {
	rsp, err := c.DeleteIncidentType(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentTypeResponse(rsp)
}

// GetIncidentTypeWithResponse request returning *GetIncidentTypeResponse
func (c *ClientWithResponses) GetIncidentTypeWithResponse(ctx context.Context, id string) (*GetIncidentTypeResponse, error) {
	rsp, err := c.GetIncidentType(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentTypeResponse(rsp)
}

// UpdateIncidentTypeWithBodyWithResponse request with arbitrary body returning *UpdateIncidentTypeResponse
func (c *ClientWithResponses) UpdateIncidentTypeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateIncidentTypeResponse, error) {
	rsp, err := c.UpdateIncidentTypeWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentTypeResponse(rsp)
}

// ListIncidentsWithResponse request returning *ListIncidentsResponse
func (c *ClientWithResponses) ListIncidentsWithResponse(ctx context.Context, params *ListIncidentsParams) (*ListIncidentsResponse, error) {
	rsp, err := c.ListIncidents(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentsResponse(rsp)
}

// CreateIncidentWithBodyWithResponse request with arbitrary body returning *CreateIncidentResponse
func (c *ClientWithResponses) CreateIncidentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateIncidentResponse, error) {
	rsp, err := c.CreateIncidentWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentResponse(rsp)
}

// DeleteIncidentWithResponse request returning *DeleteIncidentResponse
func (c *ClientWithResponses) DeleteIncidentWithResponse(ctx context.Context, id string) (*DeleteIncidentResponse, error) {
	rsp, err := c.DeleteIncident(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentResponse(rsp)
}

// GetIncidentWithResponse request returning *GetIncidentResponse
func (c *ClientWithResponses) GetIncidentWithResponse(ctx context.Context, id string) (*GetIncidentResponse, error) {
	rsp, err := c.GetIncident(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentResponse(rsp)
}

// UpdateIncidentWithBodyWithResponse request with arbitrary body returning *UpdateIncidentResponse
func (c *ClientWithResponses) UpdateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateIncidentResponse, error) {
	rsp, err := c.UpdateIncidentWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentResponse(rsp)
}

// ListIncidentActionItemsWithResponse request returning *ListIncidentActionItemsResponse
func (c *ClientWithResponses) ListIncidentActionItemsWithResponse(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams) (*ListIncidentActionItemsResponse, error) {
	rsp, err := c.ListIncidentActionItems(ctx, incidentId, params)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentActionItemsResponse(rsp)
}

// CreateIncidentActionItemWithBodyWithResponse request with arbitrary body returning *CreateIncidentActionItemResponse
func (c *ClientWithResponses) CreateIncidentActionItemWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader) (*CreateIncidentActionItemResponse, error) {
	rsp, err := c.CreateIncidentActionItemWithBody(ctx, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentActionItemResponse(rsp)
}

// ListIncidentEventsWithResponse request returning *ListIncidentEventsResponse
func (c *ClientWithResponses) ListIncidentEventsWithResponse(ctx context.Context, incidentId string, params *ListIncidentEventsParams) (*ListIncidentEventsResponse, error) {
	rsp, err := c.ListIncidentEvents(ctx, incidentId, params)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentEventsResponse(rsp)
}

// CreateIncidentEventWithBodyWithResponse request with arbitrary body returning *CreateIncidentEventResponse
func (c *ClientWithResponses) CreateIncidentEventWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader) (*CreateIncidentEventResponse, error) {
	rsp, err := c.CreateIncidentEventWithBody(ctx, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentEventResponse(rsp)
}

// ListIncidentTasksWithResponse request returning *ListIncidentTasksResponse
func (c *ClientWithResponses) ListIncidentTasksWithResponse(ctx context.Context, incidentId string, params *ListIncidentTasksParams) (*ListIncidentTasksResponse, error) {
	rsp, err := c.ListIncidentTasks(ctx, incidentId, params)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentTasksResponse(rsp)
}

// CreateIncidentTaskWithBodyWithResponse request with arbitrary body returning *CreateIncidentTaskResponse
func (c *ClientWithResponses) CreateIncidentTaskWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader) (*CreateIncidentTaskResponse, error) {
	rsp, err := c.CreateIncidentTaskWithBody(ctx, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentTaskResponse(rsp)
}

// DeletePlaybookTaskWithResponse request returning *DeletePlaybookTaskResponse
func (c *ClientWithResponses) DeletePlaybookTaskWithResponse(ctx context.Context, id string) (*DeletePlaybookTaskResponse, error) {
	rsp, err := c.DeletePlaybookTask(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeletePlaybookTaskResponse(rsp)
}

// GetPlaybookTasksWithResponse request returning *GetPlaybookTasksResponse
func (c *ClientWithResponses) GetPlaybookTasksWithResponse(ctx context.Context, id string) (*GetPlaybookTasksResponse, error) {
	rsp, err := c.GetPlaybookTasks(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaybookTasksResponse(rsp)
}

// UpdatePlaybookTaskWithBodyWithResponse request with arbitrary body returning *UpdatePlaybookTaskResponse
func (c *ClientWithResponses) UpdatePlaybookTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdatePlaybookTaskResponse, error) {
	rsp, err := c.UpdatePlaybookTaskWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlaybookTaskResponse(rsp)
}

// ListPlaybooksWithResponse request returning *ListPlaybooksResponse
func (c *ClientWithResponses) ListPlaybooksWithResponse(ctx context.Context, params *ListPlaybooksParams) (*ListPlaybooksResponse, error) {
	rsp, err := c.ListPlaybooks(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListPlaybooksResponse(rsp)
}

// CreatePlaybookWithBodyWithResponse request with arbitrary body returning *CreatePlaybookResponse
func (c *ClientWithResponses) CreatePlaybookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreatePlaybookResponse, error) {
	rsp, err := c.CreatePlaybookWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlaybookResponse(rsp)
}

// DeletePlaybookWithResponse request returning *DeletePlaybookResponse
func (c *ClientWithResponses) DeletePlaybookWithResponse(ctx context.Context, id string) (*DeletePlaybookResponse, error) {
	rsp, err := c.DeletePlaybook(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeletePlaybookResponse(rsp)
}

// GetPlaybookWithResponse request returning *GetPlaybookResponse
func (c *ClientWithResponses) GetPlaybookWithResponse(ctx context.Context, id string) (*GetPlaybookResponse, error) {
	rsp, err := c.GetPlaybook(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaybookResponse(rsp)
}

// UpdatePlaybookWithBodyWithResponse request with arbitrary body returning *UpdatePlaybookResponse
func (c *ClientWithResponses) UpdatePlaybookWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdatePlaybookResponse, error) {
	rsp, err := c.UpdatePlaybookWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlaybookResponse(rsp)
}

// ListPlaybookTasksWithResponse request returning *ListPlaybookTasksResponse
func (c *ClientWithResponses) ListPlaybookTasksWithResponse(ctx context.Context, playbookId string, params *ListPlaybookTasksParams) (*ListPlaybookTasksResponse, error) {
	rsp, err := c.ListPlaybookTasks(ctx, playbookId, params)
	if err != nil {
		return nil, err
	}
	return ParseListPlaybookTasksResponse(rsp)
}

// CreatePlaybookTaskWithBodyWithResponse request with arbitrary body returning *CreatePlaybookTaskResponse
func (c *ClientWithResponses) CreatePlaybookTaskWithBodyWithResponse(ctx context.Context, playbookId string, contentType string, body io.Reader) (*CreatePlaybookTaskResponse, error) {
	rsp, err := c.CreatePlaybookTaskWithBody(ctx, playbookId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlaybookTaskResponse(rsp)
}

// ListPostmortemTemplatesWithResponse request returning *ListPostmortemTemplatesResponse
func (c *ClientWithResponses) ListPostmortemTemplatesWithResponse(ctx context.Context, params *ListPostmortemTemplatesParams) (*ListPostmortemTemplatesResponse, error) {
	rsp, err := c.ListPostmortemTemplates(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListPostmortemTemplatesResponse(rsp)
}

// CreatePostmortemTemplateWithBodyWithResponse request with arbitrary body returning *CreatePostmortemTemplateResponse
func (c *ClientWithResponses) CreatePostmortemTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreatePostmortemTemplateResponse, error) {
	rsp, err := c.CreatePostmortemTemplateWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreatePostmortemTemplateResponse(rsp)
}

// DeletePostmortemTemplateWithResponse request returning *DeletePostmortemTemplateResponse
func (c *ClientWithResponses) DeletePostmortemTemplateWithResponse(ctx context.Context, id string) (*DeletePostmortemTemplateResponse, error) {
	rsp, err := c.DeletePostmortemTemplate(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeletePostmortemTemplateResponse(rsp)
}

// GetPostmortemTemplateWithResponse request returning *GetPostmortemTemplateResponse
func (c *ClientWithResponses) GetPostmortemTemplateWithResponse(ctx context.Context, id string) (*GetPostmortemTemplateResponse, error) {
	rsp, err := c.GetPostmortemTemplate(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetPostmortemTemplateResponse(rsp)
}

// UpdatePostmortemTemplateWithBodyWithResponse request with arbitrary body returning *UpdatePostmortemTemplateResponse
func (c *ClientWithResponses) UpdatePostmortemTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdatePostmortemTemplateResponse, error) {
	rsp, err := c.UpdatePostmortemTemplateWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePostmortemTemplateResponse(rsp)
}

// GetIncidentPostmortemWithResponse request returning *GetIncidentPostmortemResponse
func (c *ClientWithResponses) GetIncidentPostmortemWithResponse(ctx context.Context, id string) (*GetIncidentPostmortemResponse, error) {
	rsp, err := c.GetIncidentPostmortem(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentPostmortemResponse(rsp)
}

// UpdateIncidentPostmortemWithBodyWithResponse request with arbitrary body returning *UpdateIncidentPostmortemResponse
func (c *ClientWithResponses) UpdateIncidentPostmortemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateIncidentPostmortemResponse, error) {
	rsp, err := c.UpdateIncidentPostmortemWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentPostmortemResponse(rsp)
}

// ListPulsesWithResponse request returning *ListPulsesResponse
func (c *ClientWithResponses) ListPulsesWithResponse(ctx context.Context, params *ListPulsesParams) (*ListPulsesResponse, error) {
	rsp, err := c.ListPulses(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListPulsesResponse(rsp)
}

// CreatePulseWithBodyWithResponse request with arbitrary body returning *CreatePulseResponse
func (c *ClientWithResponses) CreatePulseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreatePulseResponse, error) {
	rsp, err := c.CreatePulseWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreatePulseResponse(rsp)
}

// GetPulseWithResponse request returning *GetPulseResponse
func (c *ClientWithResponses) GetPulseWithResponse(ctx context.Context, id string) (*GetPulseResponse, error) {
	rsp, err := c.GetPulse(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetPulseResponse(rsp)
}

// UpdatePulseWithBodyWithResponse request with arbitrary body returning *UpdatePulseResponse
func (c *ClientWithResponses) UpdatePulseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdatePulseResponse, error) {
	rsp, err := c.UpdatePulseWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePulseResponse(rsp)
}

// ListServicesWithResponse request returning *ListServicesResponse
func (c *ClientWithResponses) ListServicesWithResponse(ctx context.Context, params *ListServicesParams) (*ListServicesResponse, error) {
	rsp, err := c.ListServices(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListServicesResponse(rsp)
}

// CreateServiceWithBodyWithResponse request with arbitrary body returning *CreateServiceResponse
func (c *ClientWithResponses) CreateServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateServiceResponse, error) {
	rsp, err := c.CreateServiceWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceResponse(rsp)
}

// DeleteServiceWithResponse request returning *DeleteServiceResponse
func (c *ClientWithResponses) DeleteServiceWithResponse(ctx context.Context, id string) (*DeleteServiceResponse, error) {
	rsp, err := c.DeleteService(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceResponse(rsp)
}

// GetServiceWithResponse request returning *GetServiceResponse
func (c *ClientWithResponses) GetServiceWithResponse(ctx context.Context, id string) (*GetServiceResponse, error) {
	rsp, err := c.GetService(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceResponse(rsp)
}

// UpdateServiceWithBodyWithResponse request with arbitrary body returning *UpdateServiceResponse
func (c *ClientWithResponses) UpdateServiceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateServiceResponse, error) {
	rsp, err := c.UpdateServiceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateServiceResponse(rsp)
}

// ListSeveritiesWithResponse request returning *ListSeveritiesResponse
func (c *ClientWithResponses) ListSeveritiesWithResponse(ctx context.Context, params *ListSeveritiesParams) (*ListSeveritiesResponse, error) {
	rsp, err := c.ListSeverities(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListSeveritiesResponse(rsp)
}

// CreateSeverityWithBodyWithResponse request with arbitrary body returning *CreateSeverityResponse
func (c *ClientWithResponses) CreateSeverityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateSeverityResponse, error) {
	rsp, err := c.CreateSeverityWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSeverityResponse(rsp)
}

// DeleteSeverityWithResponse request returning *DeleteSeverityResponse
func (c *ClientWithResponses) DeleteSeverityWithResponse(ctx context.Context, id string) (*DeleteSeverityResponse, error) {
	rsp, err := c.DeleteSeverity(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSeverityResponse(rsp)
}

// GetSeverityWithResponse request returning *GetSeverityResponse
func (c *ClientWithResponses) GetSeverityWithResponse(ctx context.Context, id string) (*GetSeverityResponse, error) {
	rsp, err := c.GetSeverity(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetSeverityResponse(rsp)
}

// UpdateSeverityWithBodyWithResponse request with arbitrary body returning *UpdateSeverityResponse
func (c *ClientWithResponses) UpdateSeverityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateSeverityResponse, error) {
	rsp, err := c.UpdateSeverityWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSeverityResponse(rsp)
}

// ListStatusPagesWithResponse request returning *ListStatusPagesResponse
func (c *ClientWithResponses) ListStatusPagesWithResponse(ctx context.Context, params *ListStatusPagesParams) (*ListStatusPagesResponse, error) {
	rsp, err := c.ListStatusPages(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListStatusPagesResponse(rsp)
}

// CreateStatusPageWithBodyWithResponse request with arbitrary body returning *CreateStatusPageResponse
func (c *ClientWithResponses) CreateStatusPageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateStatusPageResponse, error) {
	rsp, err := c.CreateStatusPageWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateStatusPageResponse(rsp)
}

// DeleteStatusPageWithResponse request returning *DeleteStatusPageResponse
func (c *ClientWithResponses) DeleteStatusPageWithResponse(ctx context.Context, id string) (*DeleteStatusPageResponse, error) {
	rsp, err := c.DeleteStatusPage(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStatusPageResponse(rsp)
}

// GetStatusPageWithResponse request returning *GetStatusPageResponse
func (c *ClientWithResponses) GetStatusPageWithResponse(ctx context.Context, id string) (*GetStatusPageResponse, error) {
	rsp, err := c.GetStatusPage(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusPageResponse(rsp)
}

// UpdateStatusPageWithBodyWithResponse request with arbitrary body returning *UpdateStatusPageResponse
func (c *ClientWithResponses) UpdateStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateStatusPageResponse, error) {
	rsp, err := c.UpdateStatusPageWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStatusPageResponse(rsp)
}

// ListTeamsWithResponse request returning *ListTeamsResponse
func (c *ClientWithResponses) ListTeamsWithResponse(ctx context.Context, params *ListTeamsParams) (*ListTeamsResponse, error) {
	rsp, err := c.ListTeams(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListTeamsResponse(rsp)
}

// CreateTeamWithBodyWithResponse request with arbitrary body returning *CreateTeamResponse
func (c *ClientWithResponses) CreateTeamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateTeamResponse, error) {
	rsp, err := c.CreateTeamWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamResponse(rsp)
}

// DeleteTeamWithResponse request returning *DeleteTeamResponse
func (c *ClientWithResponses) DeleteTeamWithResponse(ctx context.Context, id string) (*DeleteTeamResponse, error) {
	rsp, err := c.DeleteTeam(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamResponse(rsp)
}

// GetTeamWithResponse request returning *GetTeamResponse
func (c *ClientWithResponses) GetTeamWithResponse(ctx context.Context, id string) (*GetTeamResponse, error) {
	rsp, err := c.GetTeam(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamResponse(rsp)
}

// UpdateTeamWithBodyWithResponse request with arbitrary body returning *UpdateTeamResponse
func (c *ClientWithResponses) UpdateTeamWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateTeamResponse, error) {
	rsp, err := c.UpdateTeamWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamResponse(rsp)
}

// ParseDeleteIncidentActionItemResponse parses an HTTP response from a DeleteIncidentActionItemWithResponse call
func ParseDeleteIncidentActionItemResponse(rsp *http.Response) (*DeleteIncidentActionItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentActionItemsResponse parses an HTTP response from a GetIncidentActionItemsWithResponse call
func ParseGetIncidentActionItemsResponse(rsp *http.Response) (*GetIncidentActionItemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentActionItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentActionItemResponse parses an HTTP response from a UpdateIncidentActionItemWithResponse call
func ParseUpdateIncidentActionItemResponse(rsp *http.Response) (*UpdateIncidentActionItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListCausesResponse parses an HTTP response from a ListCausesWithResponse call
func ParseListCausesResponse(rsp *http.Response) (*ListCausesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListCausesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateCauseResponse parses an HTTP response from a CreateCauseWithResponse call
func ParseCreateCauseResponse(rsp *http.Response) (*CreateCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteCauseResponse parses an HTTP response from a DeleteCauseWithResponse call
func ParseDeleteCauseResponse(rsp *http.Response) (*DeleteCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCauseResponse parses an HTTP response from a GetCauseWithResponse call
func ParseGetCauseResponse(rsp *http.Response) (*GetCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateCauseResponse parses an HTTP response from a UpdateCauseWithResponse call
func ParseUpdateCauseResponse(rsp *http.Response) (*UpdateCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListEnvironmentsResponse parses an HTTP response from a ListEnvironmentsWithResponse call
func ParseListEnvironmentsResponse(rsp *http.Response) (*ListEnvironmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateEnvironmentResponse parses an HTTP response from a CreateEnvironmentWithResponse call
func ParseCreateEnvironmentResponse(rsp *http.Response) (*CreateEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteEnvironmentResponse parses an HTTP response from a DeleteEnvironmentWithResponse call
func ParseDeleteEnvironmentResponse(rsp *http.Response) (*DeleteEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetEnvironmentResponse parses an HTTP response from a GetEnvironmentWithResponse call
func ParseGetEnvironmentResponse(rsp *http.Response) (*GetEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateEnvironmentResponse parses an HTTP response from a UpdateEnvironmentWithResponse call
func ParseUpdateEnvironmentResponse(rsp *http.Response) (*UpdateEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIncidentEventResponse parses an HTTP response from a DeleteIncidentEventWithResponse call
func ParseDeleteIncidentEventResponse(rsp *http.Response) (*DeleteIncidentEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentEventsResponse parses an HTTP response from a GetIncidentEventsWithResponse call
func ParseGetIncidentEventsResponse(rsp *http.Response) (*GetIncidentEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentEventResponse parses an HTTP response from a UpdateIncidentEventWithResponse call
func ParseUpdateIncidentEventResponse(rsp *http.Response) (*UpdateIncidentEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListFunctionalitiesResponse parses an HTTP response from a ListFunctionalitiesWithResponse call
func ParseListFunctionalitiesResponse(rsp *http.Response) (*ListFunctionalitiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListFunctionalitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateFunctionalityResponse parses an HTTP response from a CreateFunctionalityWithResponse call
func ParseCreateFunctionalityResponse(rsp *http.Response) (*CreateFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteFunctionalityResponse parses an HTTP response from a DeleteFunctionalityWithResponse call
func ParseDeleteFunctionalityResponse(rsp *http.Response) (*DeleteFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetFunctionalityResponse parses an HTTP response from a GetFunctionalityWithResponse call
func ParseGetFunctionalityResponse(rsp *http.Response) (*GetFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateFunctionalityResponse parses an HTTP response from a UpdateFunctionalityWithResponse call
func ParseUpdateFunctionalityResponse(rsp *http.Response) (*UpdateFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentRolesResponse parses an HTTP response from a ListIncidentRolesWithResponse call
func ParseListIncidentRolesResponse(rsp *http.Response) (*ListIncidentRolesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentRoleResponse parses an HTTP response from a CreateIncidentRoleWithResponse call
func ParseCreateIncidentRoleResponse(rsp *http.Response) (*CreateIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIncidentRoleResponse parses an HTTP response from a DeleteIncidentRoleWithResponse call
func ParseDeleteIncidentRoleResponse(rsp *http.Response) (*DeleteIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentRoleResponse parses an HTTP response from a GetIncidentRoleWithResponse call
func ParseGetIncidentRoleResponse(rsp *http.Response) (*GetIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentRoleResponse parses an HTTP response from a UpdateIncidentRoleWithResponse call
func ParseUpdateIncidentRoleResponse(rsp *http.Response) (*UpdateIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIncidentTaskResponse parses an HTTP response from a DeleteIncidentTaskWithResponse call
func ParseDeleteIncidentTaskResponse(rsp *http.Response) (*DeleteIncidentTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentTasksResponse parses an HTTP response from a GetIncidentTasksWithResponse call
func ParseGetIncidentTasksResponse(rsp *http.Response) (*GetIncidentTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentTaskResponse parses an HTTP response from a UpdateIncidentTaskWithResponse call
func ParseUpdateIncidentTaskResponse(rsp *http.Response) (*UpdateIncidentTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentTypesResponse parses an HTTP response from a ListIncidentTypesWithResponse call
func ParseListIncidentTypesResponse(rsp *http.Response) (*ListIncidentTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentTypeResponse parses an HTTP response from a CreateIncidentTypeWithResponse call
func ParseCreateIncidentTypeResponse(rsp *http.Response) (*CreateIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIncidentTypeResponse parses an HTTP response from a DeleteIncidentTypeWithResponse call
func ParseDeleteIncidentTypeResponse(rsp *http.Response) (*DeleteIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentTypeResponse parses an HTTP response from a GetIncidentTypeWithResponse call
func ParseGetIncidentTypeResponse(rsp *http.Response) (*GetIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentTypeResponse parses an HTTP response from a UpdateIncidentTypeWithResponse call
func ParseUpdateIncidentTypeResponse(rsp *http.Response) (*UpdateIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentsResponse parses an HTTP response from a ListIncidentsWithResponse call
func ParseListIncidentsResponse(rsp *http.Response) (*ListIncidentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentResponse parses an HTTP response from a CreateIncidentWithResponse call
func ParseCreateIncidentResponse(rsp *http.Response) (*CreateIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIncidentResponse parses an HTTP response from a DeleteIncidentWithResponse call
func ParseDeleteIncidentResponse(rsp *http.Response) (*DeleteIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentResponse parses an HTTP response from a GetIncidentWithResponse call
func ParseGetIncidentResponse(rsp *http.Response) (*GetIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentResponse parses an HTTP response from a UpdateIncidentWithResponse call
func ParseUpdateIncidentResponse(rsp *http.Response) (*UpdateIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentActionItemsResponse parses an HTTP response from a ListIncidentActionItemsWithResponse call
func ParseListIncidentActionItemsResponse(rsp *http.Response) (*ListIncidentActionItemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentActionItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentActionItemResponse parses an HTTP response from a CreateIncidentActionItemWithResponse call
func ParseCreateIncidentActionItemResponse(rsp *http.Response) (*CreateIncidentActionItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentEventsResponse parses an HTTP response from a ListIncidentEventsWithResponse call
func ParseListIncidentEventsResponse(rsp *http.Response) (*ListIncidentEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentEventResponse parses an HTTP response from a CreateIncidentEventWithResponse call
func ParseCreateIncidentEventResponse(rsp *http.Response) (*CreateIncidentEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentTasksResponse parses an HTTP response from a ListIncidentTasksWithResponse call
func ParseListIncidentTasksResponse(rsp *http.Response) (*ListIncidentTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentTaskResponse parses an HTTP response from a CreateIncidentTaskWithResponse call
func ParseCreateIncidentTaskResponse(rsp *http.Response) (*CreateIncidentTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeletePlaybookTaskResponse parses an HTTP response from a DeletePlaybookTaskWithResponse call
func ParseDeletePlaybookTaskResponse(rsp *http.Response) (*DeletePlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPlaybookTasksResponse parses an HTTP response from a GetPlaybookTasksWithResponse call
func ParseGetPlaybookTasksResponse(rsp *http.Response) (*GetPlaybookTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPlaybookTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdatePlaybookTaskResponse parses an HTTP response from a UpdatePlaybookTaskWithResponse call
func ParseUpdatePlaybookTaskResponse(rsp *http.Response) (*UpdatePlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListPlaybooksResponse parses an HTTP response from a ListPlaybooksWithResponse call
func ParseListPlaybooksResponse(rsp *http.Response) (*ListPlaybooksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListPlaybooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreatePlaybookResponse parses an HTTP response from a CreatePlaybookWithResponse call
func ParseCreatePlaybookResponse(rsp *http.Response) (*CreatePlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeletePlaybookResponse parses an HTTP response from a DeletePlaybookWithResponse call
func ParseDeletePlaybookResponse(rsp *http.Response) (*DeletePlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPlaybookResponse parses an HTTP response from a GetPlaybookWithResponse call
func ParseGetPlaybookResponse(rsp *http.Response) (*GetPlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdatePlaybookResponse parses an HTTP response from a UpdatePlaybookWithResponse call
func ParseUpdatePlaybookResponse(rsp *http.Response) (*UpdatePlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListPlaybookTasksResponse parses an HTTP response from a ListPlaybookTasksWithResponse call
func ParseListPlaybookTasksResponse(rsp *http.Response) (*ListPlaybookTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListPlaybookTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreatePlaybookTaskResponse parses an HTTP response from a CreatePlaybookTaskWithResponse call
func ParseCreatePlaybookTaskResponse(rsp *http.Response) (*CreatePlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListPostmortemTemplatesResponse parses an HTTP response from a ListPostmortemTemplatesWithResponse call
func ParseListPostmortemTemplatesResponse(rsp *http.Response) (*ListPostmortemTemplatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListPostmortemTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreatePostmortemTemplateResponse parses an HTTP response from a CreatePostmortemTemplateWithResponse call
func ParseCreatePostmortemTemplateResponse(rsp *http.Response) (*CreatePostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeletePostmortemTemplateResponse parses an HTTP response from a DeletePostmortemTemplateWithResponse call
func ParseDeletePostmortemTemplateResponse(rsp *http.Response) (*DeletePostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPostmortemTemplateResponse parses an HTTP response from a GetPostmortemTemplateWithResponse call
func ParseGetPostmortemTemplateResponse(rsp *http.Response) (*GetPostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdatePostmortemTemplateResponse parses an HTTP response from a UpdatePostmortemTemplateWithResponse call
func ParseUpdatePostmortemTemplateResponse(rsp *http.Response) (*UpdatePostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdatePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentPostmortemResponse parses an HTTP response from a GetIncidentPostmortemWithResponse call
func ParseGetIncidentPostmortemResponse(rsp *http.Response) (*GetIncidentPostmortemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentPostmortemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentPostmortemResponse parses an HTTP response from a UpdateIncidentPostmortemWithResponse call
func ParseUpdateIncidentPostmortemResponse(rsp *http.Response) (*UpdateIncidentPostmortemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentPostmortemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListPulsesResponse parses an HTTP response from a ListPulsesWithResponse call
func ParseListPulsesResponse(rsp *http.Response) (*ListPulsesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListPulsesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreatePulseResponse parses an HTTP response from a CreatePulseWithResponse call
func ParseCreatePulseResponse(rsp *http.Response) (*CreatePulseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatePulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPulseResponse parses an HTTP response from a GetPulseWithResponse call
func ParseGetPulseResponse(rsp *http.Response) (*GetPulseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdatePulseResponse parses an HTTP response from a UpdatePulseWithResponse call
func ParseUpdatePulseResponse(rsp *http.Response) (*UpdatePulseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdatePulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListServicesResponse parses an HTTP response from a ListServicesWithResponse call
func ParseListServicesResponse(rsp *http.Response) (*ListServicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateServiceResponse parses an HTTP response from a CreateServiceWithResponse call
func ParseCreateServiceResponse(rsp *http.Response) (*CreateServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteServiceResponse parses an HTTP response from a DeleteServiceWithResponse call
func ParseDeleteServiceResponse(rsp *http.Response) (*DeleteServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetServiceResponse parses an HTTP response from a GetServiceWithResponse call
func ParseGetServiceResponse(rsp *http.Response) (*GetServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateServiceResponse parses an HTTP response from a UpdateServiceWithResponse call
func ParseUpdateServiceResponse(rsp *http.Response) (*UpdateServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListSeveritiesResponse parses an HTTP response from a ListSeveritiesWithResponse call
func ParseListSeveritiesResponse(rsp *http.Response) (*ListSeveritiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSeveritiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateSeverityResponse parses an HTTP response from a CreateSeverityWithResponse call
func ParseCreateSeverityResponse(rsp *http.Response) (*CreateSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteSeverityResponse parses an HTTP response from a DeleteSeverityWithResponse call
func ParseDeleteSeverityResponse(rsp *http.Response) (*DeleteSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSeverityResponse parses an HTTP response from a GetSeverityWithResponse call
func ParseGetSeverityResponse(rsp *http.Response) (*GetSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateSeverityResponse parses an HTTP response from a UpdateSeverityWithResponse call
func ParseUpdateSeverityResponse(rsp *http.Response) (*UpdateSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListStatusPagesResponse parses an HTTP response from a ListStatusPagesWithResponse call
func ParseListStatusPagesResponse(rsp *http.Response) (*ListStatusPagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListStatusPagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateStatusPageResponse parses an HTTP response from a CreateStatusPageWithResponse call
func ParseCreateStatusPageResponse(rsp *http.Response) (*CreateStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteStatusPageResponse parses an HTTP response from a DeleteStatusPageWithResponse call
func ParseDeleteStatusPageResponse(rsp *http.Response) (*DeleteStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetStatusPageResponse parses an HTTP response from a GetStatusPageWithResponse call
func ParseGetStatusPageResponse(rsp *http.Response) (*GetStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateStatusPageResponse parses an HTTP response from a UpdateStatusPageWithResponse call
func ParseUpdateStatusPageResponse(rsp *http.Response) (*UpdateStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListTeamsResponse parses an HTTP response from a ListTeamsWithResponse call
func ParseListTeamsResponse(rsp *http.Response) (*ListTeamsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateTeamResponse parses an HTTP response from a CreateTeamWithResponse call
func ParseCreateTeamResponse(rsp *http.Response) (*CreateTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteTeamResponse parses an HTTP response from a DeleteTeamWithResponse call
func ParseDeleteTeamResponse(rsp *http.Response) (*DeleteTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetTeamResponse parses an HTTP response from a GetTeamWithResponse call
func ParseGetTeamResponse(rsp *http.Response) (*GetTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateTeamResponse parses an HTTP response from a UpdateTeamWithResponse call
func ParseUpdateTeamResponse(rsp *http.Response) (*UpdateTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete a incident action item
	// (DELETE /v1/action_items/{id})
	DeleteIncidentActionItem(ctx echo.Context, id string) error
	// Retrieves a incident action item
	// (GET /v1/action_items/{id})
	GetIncidentActionItems(ctx echo.Context, id string) error
	// Update a incident action item
	// (PUT /v1/action_items/{id})
	UpdateIncidentActionItem(ctx echo.Context, id string) error
	// List causes
	// (GET /v1/causes)
	ListCauses(ctx echo.Context, params ListCausesParams) error
	// Creates a cause
	// (POST /v1/causes)
	CreateCause(ctx echo.Context) error
	// Delete a cause
	// (DELETE /v1/causes/{id})
	DeleteCause(ctx echo.Context, id string) error
	// Retrieves a cause
	// (GET /v1/causes/{id})
	GetCause(ctx echo.Context, id string) error
	// Update a cause
	// (PUT /v1/causes/{id})
	UpdateCause(ctx echo.Context, id string) error
	// List environments
	// (GET /v1/environments)
	ListEnvironments(ctx echo.Context, params ListEnvironmentsParams) error
	// Creates a environment
	// (POST /v1/environments)
	CreateEnvironment(ctx echo.Context) error
	// Delete a environment
	// (DELETE /v1/environments/{id})
	DeleteEnvironment(ctx echo.Context, id string) error
	// Retrieves a environment
	// (GET /v1/environments/{id})
	GetEnvironment(ctx echo.Context, id string) error
	// Update a environment
	// (PUT /v1/environments/{id})
	UpdateEnvironment(ctx echo.Context, id string) error
	// Delete a incident event
	// (DELETE /v1/events/{id})
	DeleteIncidentEvent(ctx echo.Context, id string) error
	// Retrieves a incident event
	// (GET /v1/events/{id})
	GetIncidentEvents(ctx echo.Context, id string) error
	// Update a incident event
	// (PUT /v1/events/{id})
	UpdateIncidentEvent(ctx echo.Context, id string) error
	// List functionalities
	// (GET /v1/functionalities)
	ListFunctionalities(ctx echo.Context, params ListFunctionalitiesParams) error
	// Creates a functionality
	// (POST /v1/functionalities)
	CreateFunctionality(ctx echo.Context) error
	// Delete a functionality
	// (DELETE /v1/functionalities/{id})
	DeleteFunctionality(ctx echo.Context, id string) error
	// Retrieves a functionality
	// (GET /v1/functionalities/{id})
	GetFunctionality(ctx echo.Context, id string) error
	// Update a functionality
	// (PUT /v1/functionalities/{id})
	UpdateFunctionality(ctx echo.Context, id string) error
	// List incident roles
	// (GET /v1/incident_roles)
	ListIncidentRoles(ctx echo.Context, params ListIncidentRolesParams) error
	// Creates a incident role
	// (POST /v1/incident_roles)
	CreateIncidentRole(ctx echo.Context) error
	// Delete a incident role
	// (DELETE /v1/incident_roles/{id})
	DeleteIncidentRole(ctx echo.Context, id string) error
	// Retrieves a incident role
	// (GET /v1/incident_roles/{id})
	GetIncidentRole(ctx echo.Context, id string) error
	// Update a incident role
	// (PUT /v1/incident_roles/{id})
	UpdateIncidentRole(ctx echo.Context, id string) error
	// Delete a incident task
	// (DELETE /v1/incident_tasks/{id})
	DeleteIncidentTask(ctx echo.Context, id string) error
	// Retrieves a incident task
	// (GET /v1/incident_tasks/{id})
	GetIncidentTasks(ctx echo.Context, id string) error
	// Update a incident task
	// (PUT /v1/incident_tasks/{id})
	UpdateIncidentTask(ctx echo.Context, id string) error
	// List incident_types
	// (GET /v1/incident_types)
	ListIncidentTypes(ctx echo.Context, params ListIncidentTypesParams) error
	// Creates a incident_type
	// (POST /v1/incident_types)
	CreateIncidentType(ctx echo.Context) error
	// Delete a incident_type
	// (DELETE /v1/incident_types/{id})
	DeleteIncidentType(ctx echo.Context, id string) error
	// Retrieves a incident_type
	// (GET /v1/incident_types/{id})
	GetIncidentType(ctx echo.Context, id string) error
	// Update a incident_type
	// (PUT /v1/incident_types/{id})
	UpdateIncidentType(ctx echo.Context, id string) error
	// List incidents
	// (GET /v1/incidents)
	ListIncidents(ctx echo.Context, params ListIncidentsParams) error
	// Creates a incident
	// (POST /v1/incidents)
	CreateIncident(ctx echo.Context) error
	// Delete a incident
	// (DELETE /v1/incidents/{id})
	DeleteIncident(ctx echo.Context, id string) error
	// Retrieves a incident
	// (GET /v1/incidents/{id})
	GetIncident(ctx echo.Context, id string) error
	// Update a incident
	// (PUT /v1/incidents/{id})
	UpdateIncident(ctx echo.Context, id string) error
	// List incident action items
	// (GET /v1/incidents/{incident_id}/action_items)
	ListIncidentActionItems(ctx echo.Context, incidentId string, params ListIncidentActionItemsParams) error
	// Creates a incident action item
	// (POST /v1/incidents/{incident_id}/action_items)
	CreateIncidentActionItem(ctx echo.Context, incidentId string) error
	// List incident events
	// (GET /v1/incidents/{incident_id}/events)
	ListIncidentEvents(ctx echo.Context, incidentId string, params ListIncidentEventsParams) error
	// Creates a incident event
	// (POST /v1/incidents/{incident_id}/events)
	CreateIncidentEvent(ctx echo.Context, incidentId string) error
	// List incident tasks
	// (GET /v1/incidents/{incident_id}/incident_tasks)
	ListIncidentTasks(ctx echo.Context, incidentId string, params ListIncidentTasksParams) error
	// Creates a incident task
	// (POST /v1/incidents/{incident_id}/incident_tasks)
	CreateIncidentTask(ctx echo.Context, incidentId string) error
	// Delete a playbook task
	// (DELETE /v1/playbook_tasks/{id})
	DeletePlaybookTask(ctx echo.Context, id string) error
	// Retrieves a playbook task
	// (GET /v1/playbook_tasks/{id})
	GetPlaybookTasks(ctx echo.Context, id string) error
	// Update a playbook task
	// (PUT /v1/playbook_tasks/{id})
	UpdatePlaybookTask(ctx echo.Context, id string) error
	// List playbooks
	// (GET /v1/playbooks)
	ListPlaybooks(ctx echo.Context, params ListPlaybooksParams) error
	// Creates a playbook
	// (POST /v1/playbooks)
	CreatePlaybook(ctx echo.Context) error
	// Delete a playbook
	// (DELETE /v1/playbooks/{id})
	DeletePlaybook(ctx echo.Context, id string) error
	// Retrieves a playbook
	// (GET /v1/playbooks/{id})
	GetPlaybook(ctx echo.Context, id string) error
	// Update a playbook
	// (PUT /v1/playbooks/{id})
	UpdatePlaybook(ctx echo.Context, id string) error
	// List playbook tasks
	// (GET /v1/playbooks/{playbook_id}/playbook_tasks)
	ListPlaybookTasks(ctx echo.Context, playbookId string, params ListPlaybookTasksParams) error
	// Creates a playbook task
	// (POST /v1/playbooks/{playbook_id}/playbook_tasks)
	CreatePlaybookTask(ctx echo.Context, playbookId string) error
	// List Postmortem Templates
	// (GET /v1/post_mortem_templates)
	ListPostmortemTemplates(ctx echo.Context, params ListPostmortemTemplatesParams) error
	// Creates a postmortem template
	// (POST /v1/post_mortem_templates)
	CreatePostmortemTemplate(ctx echo.Context) error
	// Delete a Postmortem Template
	// (DELETE /v1/post_mortem_templates/{id})
	DeletePostmortemTemplate(ctx echo.Context, id string) error
	// Retrieves a Postmortem Template
	// (GET /v1/post_mortem_templates/{id})
	GetPostmortemTemplate(ctx echo.Context, id string) error
	// Update a Postmortem Template
	// (PUT /v1/post_mortem_templates/{id})
	UpdatePostmortemTemplate(ctx echo.Context, id string) error
	// Retrieves a incident postmortem
	// (GET /v1/post_mortems/{id})
	GetIncidentPostmortem(ctx echo.Context, id string) error
	// Update a incident postmortem
	// (PUT /v1/post_mortems/{id})
	UpdateIncidentPostmortem(ctx echo.Context, id string) error
	// List pulses
	// (GET /v1/pulses)
	ListPulses(ctx echo.Context, params ListPulsesParams) error
	// Creates a pulse
	// (POST /v1/pulses)
	CreatePulse(ctx echo.Context) error
	// Retrieves a pulse
	// (GET /v1/pulses/{id})
	GetPulse(ctx echo.Context, id string) error
	// Update a pulse
	// (PUT /v1/pulses/{id})
	UpdatePulse(ctx echo.Context, id string) error
	// List services
	// (GET /v1/services)
	ListServices(ctx echo.Context, params ListServicesParams) error
	// Creates a service
	// (POST /v1/services)
	CreateService(ctx echo.Context) error
	// Delete a service
	// (DELETE /v1/services/{id})
	DeleteService(ctx echo.Context, id string) error
	// Retrieves a service
	// (GET /v1/services/{id})
	GetService(ctx echo.Context, id string) error
	// Update a service
	// (PUT /v1/services/{id})
	UpdateService(ctx echo.Context, id string) error
	// List severities
	// (GET /v1/severities)
	ListSeverities(ctx echo.Context, params ListSeveritiesParams) error
	// Creates a severity
	// (POST /v1/severities)
	CreateSeverity(ctx echo.Context) error
	// Delete a severity
	// (DELETE /v1/severities/{id})
	DeleteSeverity(ctx echo.Context, id string) error
	// Retrieves a severity
	// (GET /v1/severities/{id})
	GetSeverity(ctx echo.Context, id string) error
	// Update a severity
	// (PUT /v1/severities/{id})
	UpdateSeverity(ctx echo.Context, id string) error
	// List public status pages
	// (GET /v1/status-pages)
	ListStatusPages(ctx echo.Context, params ListStatusPagesParams) error
	// Creates a public status page
	// (POST /v1/status-pages)
	CreateStatusPage(ctx echo.Context) error
	// Delete a public status page
	// (DELETE /v1/status-pages/{id})
	DeleteStatusPage(ctx echo.Context, id string) error
	// Retrieves a public status page
	// (GET /v1/status-pages/{id})
	GetStatusPage(ctx echo.Context, id string) error
	// Update a public status page
	// (PUT /v1/status-pages/{id})
	UpdateStatusPage(ctx echo.Context, id string) error
	// List teams
	// (GET /v1/teams)
	ListTeams(ctx echo.Context, params ListTeamsParams) error
	// Creates a team
	// (POST /v1/teams)
	CreateTeam(ctx echo.Context) error
	// Delete a team
	// (DELETE /v1/teams/{id})
	DeleteTeam(ctx echo.Context, id string) error
	// Retrieves a team
	// (GET /v1/teams/{id})
	GetTeam(ctx echo.Context, id string) error
	// Update a team
	// (PUT /v1/teams/{id})
	UpdateTeam(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteIncidentActionItem converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentActionItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentActionItem(ctx, id)
	return err
}

// GetIncidentActionItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentActionItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentActionItems(ctx, id)
	return err
}

// UpdateIncidentActionItem converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentActionItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentActionItem(ctx, id)
	return err
}

// ListCauses converts echo context to params.
func (w *ServerInterfaceWrapper) ListCauses(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCausesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListCauses(ctx, params)
	return err
}

// CreateCause converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCause(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCause(ctx)
	return err
}

// DeleteCause converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCause(ctx, id)
	return err
}

// GetCause converts echo context to params.
func (w *ServerInterfaceWrapper) GetCause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCause(ctx, id)
	return err
}

// UpdateCause converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCause(ctx, id)
	return err
}

// ListEnvironments converts echo context to params.
func (w *ServerInterfaceWrapper) ListEnvironments(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEnvironmentsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListEnvironments(ctx, params)
	return err
}

// CreateEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) CreateEnvironment(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateEnvironment(ctx)
	return err
}

// DeleteEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEnvironment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteEnvironment(ctx, id)
	return err
}

// GetEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnvironment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnvironment(ctx, id)
	return err
}

// UpdateEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateEnvironment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateEnvironment(ctx, id)
	return err
}

// DeleteIncidentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentEvent(ctx, id)
	return err
}

// GetIncidentEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentEvents(ctx, id)
	return err
}

// UpdateIncidentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentEvent(ctx, id)
	return err
}

// ListFunctionalities converts echo context to params.
func (w *ServerInterfaceWrapper) ListFunctionalities(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFunctionalitiesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListFunctionalities(ctx, params)
	return err
}

// CreateFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFunctionality(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateFunctionality(ctx)
	return err
}

// DeleteFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFunctionality(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteFunctionality(ctx, id)
	return err
}

// GetFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) GetFunctionality(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFunctionality(ctx, id)
	return err
}

// UpdateFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateFunctionality(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateFunctionality(ctx, id)
	return err
}

// ListIncidentRoles converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentRoles(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentRolesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentRoles(ctx, params)
	return err
}

// CreateIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentRole(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentRole(ctx)
	return err
}

// DeleteIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentRole(ctx, id)
	return err
}

// GetIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentRole(ctx, id)
	return err
}

// UpdateIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentRole(ctx, id)
	return err
}

// DeleteIncidentTask converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentTask(ctx, id)
	return err
}

// GetIncidentTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentTasks(ctx, id)
	return err
}

// UpdateIncidentTask converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentTask(ctx, id)
	return err
}

// ListIncidentTypes converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentTypes(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentTypesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentTypes(ctx, params)
	return err
}

// CreateIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentType(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentType(ctx)
	return err
}

// DeleteIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentType(ctx, id)
	return err
}

// GetIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentType(ctx, id)
	return err
}

// UpdateIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentType(ctx, id)
	return err
}

// ListIncidents converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidents(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidents(ctx, params)
	return err
}

// CreateIncident converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncident(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncident(ctx)
	return err
}

// DeleteIncident converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncident(ctx, id)
	return err
}

// GetIncident converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncident(ctx, id)
	return err
}

// UpdateIncident converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncident(ctx, id)
	return err
}

// ListIncidentActionItems converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentActionItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameter("simple", false, "incident_id", ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentActionItemsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentActionItems(ctx, incidentId, params)
	return err
}

// CreateIncidentActionItem converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentActionItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameter("simple", false, "incident_id", ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentActionItem(ctx, incidentId)
	return err
}

// ListIncidentEvents converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameter("simple", false, "incident_id", ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentEventsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentEvents(ctx, incidentId, params)
	return err
}

// CreateIncidentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameter("simple", false, "incident_id", ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentEvent(ctx, incidentId)
	return err
}

// ListIncidentTasks converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameter("simple", false, "incident_id", ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentTasksParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentTasks(ctx, incidentId, params)
	return err
}

// CreateIncidentTask converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameter("simple", false, "incident_id", ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentTask(ctx, incidentId)
	return err
}

// DeletePlaybookTask converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePlaybookTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePlaybookTask(ctx, id)
	return err
}

// GetPlaybookTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlaybookTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlaybookTasks(ctx, id)
	return err
}

// UpdatePlaybookTask converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePlaybookTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePlaybookTask(ctx, id)
	return err
}

// ListPlaybooks converts echo context to params.
func (w *ServerInterfaceWrapper) ListPlaybooks(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPlaybooksParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPlaybooks(ctx, params)
	return err
}

// CreatePlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePlaybook(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePlaybook(ctx)
	return err
}

// DeletePlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePlaybook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePlaybook(ctx, id)
	return err
}

// GetPlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlaybook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlaybook(ctx, id)
	return err
}

// UpdatePlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePlaybook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePlaybook(ctx, id)
	return err
}

// ListPlaybookTasks converts echo context to params.
func (w *ServerInterfaceWrapper) ListPlaybookTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "playbook_id" -------------
	var playbookId string

	err = runtime.BindStyledParameter("simple", false, "playbook_id", ctx.Param("playbook_id"), &playbookId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter playbook_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPlaybookTasksParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPlaybookTasks(ctx, playbookId, params)
	return err
}

// CreatePlaybookTask converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePlaybookTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "playbook_id" -------------
	var playbookId string

	err = runtime.BindStyledParameter("simple", false, "playbook_id", ctx.Param("playbook_id"), &playbookId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter playbook_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePlaybookTask(ctx, playbookId)
	return err
}

// ListPostmortemTemplates converts echo context to params.
func (w *ServerInterfaceWrapper) ListPostmortemTemplates(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPostmortemTemplatesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPostmortemTemplates(ctx, params)
	return err
}

// CreatePostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePostmortemTemplate(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePostmortemTemplate(ctx)
	return err
}

// DeletePostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePostmortemTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePostmortemTemplate(ctx, id)
	return err
}

// GetPostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostmortemTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPostmortemTemplate(ctx, id)
	return err
}

// UpdatePostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePostmortemTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePostmortemTemplate(ctx, id)
	return err
}

// GetIncidentPostmortem converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentPostmortem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentPostmortem(ctx, id)
	return err
}

// UpdateIncidentPostmortem converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentPostmortem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentPostmortem(ctx, id)
	return err
}

// ListPulses converts echo context to params.
func (w *ServerInterfaceWrapper) ListPulses(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPulsesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPulses(ctx, params)
	return err
}

// CreatePulse converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePulse(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePulse(ctx)
	return err
}

// GetPulse converts echo context to params.
func (w *ServerInterfaceWrapper) GetPulse(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPulse(ctx, id)
	return err
}

// UpdatePulse converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePulse(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePulse(ctx, id)
	return err
}

// ListServices converts echo context to params.
func (w *ServerInterfaceWrapper) ListServices(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListServicesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListServices(ctx, params)
	return err
}

// CreateService converts echo context to params.
func (w *ServerInterfaceWrapper) CreateService(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateService(ctx)
	return err
}

// DeleteService converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteService(ctx, id)
	return err
}

// GetService converts echo context to params.
func (w *ServerInterfaceWrapper) GetService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetService(ctx, id)
	return err
}

// UpdateService converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateService(ctx, id)
	return err
}

// ListSeverities converts echo context to params.
func (w *ServerInterfaceWrapper) ListSeverities(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSeveritiesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListSeverities(ctx, params)
	return err
}

// CreateSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSeverity(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSeverity(ctx)
	return err
}

// DeleteSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSeverity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSeverity(ctx, id)
	return err
}

// GetSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) GetSeverity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSeverity(ctx, id)
	return err
}

// UpdateSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSeverity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateSeverity(ctx, id)
	return err
}

// ListStatusPages converts echo context to params.
func (w *ServerInterfaceWrapper) ListStatusPages(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListStatusPagesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListStatusPages(ctx, params)
	return err
}

// CreateStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) CreateStatusPage(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateStatusPage(ctx)
	return err
}

// DeleteStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteStatusPage(ctx, id)
	return err
}

// GetStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatusPage(ctx, id)
	return err
}

// UpdateStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateStatusPage(ctx, id)
	return err
}

// ListTeams converts echo context to params.
func (w *ServerInterfaceWrapper) ListTeams(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTeamsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTeams(ctx, params)
	return err
}

// CreateTeam converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTeam(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTeam(ctx)
	return err
}

// DeleteTeam converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTeam(ctx, id)
	return err
}

// GetTeam converts echo context to params.
func (w *ServerInterfaceWrapper) GetTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTeam(ctx, id)
	return err
}

// UpdateTeam converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTeam(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v1/action_items/:id", wrapper.DeleteIncidentActionItem)
	router.GET(baseURL+"/v1/action_items/:id", wrapper.GetIncidentActionItems)
	router.PUT(baseURL+"/v1/action_items/:id", wrapper.UpdateIncidentActionItem)
	router.GET(baseURL+"/v1/causes", wrapper.ListCauses)
	router.POST(baseURL+"/v1/causes", wrapper.CreateCause)
	router.DELETE(baseURL+"/v1/causes/:id", wrapper.DeleteCause)
	router.GET(baseURL+"/v1/causes/:id", wrapper.GetCause)
	router.PUT(baseURL+"/v1/causes/:id", wrapper.UpdateCause)
	router.GET(baseURL+"/v1/environments", wrapper.ListEnvironments)
	router.POST(baseURL+"/v1/environments", wrapper.CreateEnvironment)
	router.DELETE(baseURL+"/v1/environments/:id", wrapper.DeleteEnvironment)
	router.GET(baseURL+"/v1/environments/:id", wrapper.GetEnvironment)
	router.PUT(baseURL+"/v1/environments/:id", wrapper.UpdateEnvironment)
	router.DELETE(baseURL+"/v1/events/:id", wrapper.DeleteIncidentEvent)
	router.GET(baseURL+"/v1/events/:id", wrapper.GetIncidentEvents)
	router.PUT(baseURL+"/v1/events/:id", wrapper.UpdateIncidentEvent)
	router.GET(baseURL+"/v1/functionalities", wrapper.ListFunctionalities)
	router.POST(baseURL+"/v1/functionalities", wrapper.CreateFunctionality)
	router.DELETE(baseURL+"/v1/functionalities/:id", wrapper.DeleteFunctionality)
	router.GET(baseURL+"/v1/functionalities/:id", wrapper.GetFunctionality)
	router.PUT(baseURL+"/v1/functionalities/:id", wrapper.UpdateFunctionality)
	router.GET(baseURL+"/v1/incident_roles", wrapper.ListIncidentRoles)
	router.POST(baseURL+"/v1/incident_roles", wrapper.CreateIncidentRole)
	router.DELETE(baseURL+"/v1/incident_roles/:id", wrapper.DeleteIncidentRole)
	router.GET(baseURL+"/v1/incident_roles/:id", wrapper.GetIncidentRole)
	router.PUT(baseURL+"/v1/incident_roles/:id", wrapper.UpdateIncidentRole)
	router.DELETE(baseURL+"/v1/incident_tasks/:id", wrapper.DeleteIncidentTask)
	router.GET(baseURL+"/v1/incident_tasks/:id", wrapper.GetIncidentTasks)
	router.PUT(baseURL+"/v1/incident_tasks/:id", wrapper.UpdateIncidentTask)
	router.GET(baseURL+"/v1/incident_types", wrapper.ListIncidentTypes)
	router.POST(baseURL+"/v1/incident_types", wrapper.CreateIncidentType)
	router.DELETE(baseURL+"/v1/incident_types/:id", wrapper.DeleteIncidentType)
	router.GET(baseURL+"/v1/incident_types/:id", wrapper.GetIncidentType)
	router.PUT(baseURL+"/v1/incident_types/:id", wrapper.UpdateIncidentType)
	router.GET(baseURL+"/v1/incidents", wrapper.ListIncidents)
	router.POST(baseURL+"/v1/incidents", wrapper.CreateIncident)
	router.DELETE(baseURL+"/v1/incidents/:id", wrapper.DeleteIncident)
	router.GET(baseURL+"/v1/incidents/:id", wrapper.GetIncident)
	router.PUT(baseURL+"/v1/incidents/:id", wrapper.UpdateIncident)
	router.GET(baseURL+"/v1/incidents/:incident_id/action_items", wrapper.ListIncidentActionItems)
	router.POST(baseURL+"/v1/incidents/:incident_id/action_items", wrapper.CreateIncidentActionItem)
	router.GET(baseURL+"/v1/incidents/:incident_id/events", wrapper.ListIncidentEvents)
	router.POST(baseURL+"/v1/incidents/:incident_id/events", wrapper.CreateIncidentEvent)
	router.GET(baseURL+"/v1/incidents/:incident_id/incident_tasks", wrapper.ListIncidentTasks)
	router.POST(baseURL+"/v1/incidents/:incident_id/incident_tasks", wrapper.CreateIncidentTask)
	router.DELETE(baseURL+"/v1/playbook_tasks/:id", wrapper.DeletePlaybookTask)
	router.GET(baseURL+"/v1/playbook_tasks/:id", wrapper.GetPlaybookTasks)
	router.PUT(baseURL+"/v1/playbook_tasks/:id", wrapper.UpdatePlaybookTask)
	router.GET(baseURL+"/v1/playbooks", wrapper.ListPlaybooks)
	router.POST(baseURL+"/v1/playbooks", wrapper.CreatePlaybook)
	router.DELETE(baseURL+"/v1/playbooks/:id", wrapper.DeletePlaybook)
	router.GET(baseURL+"/v1/playbooks/:id", wrapper.GetPlaybook)
	router.PUT(baseURL+"/v1/playbooks/:id", wrapper.UpdatePlaybook)
	router.GET(baseURL+"/v1/playbooks/:playbook_id/playbook_tasks", wrapper.ListPlaybookTasks)
	router.POST(baseURL+"/v1/playbooks/:playbook_id/playbook_tasks", wrapper.CreatePlaybookTask)
	router.GET(baseURL+"/v1/post_mortem_templates", wrapper.ListPostmortemTemplates)
	router.POST(baseURL+"/v1/post_mortem_templates", wrapper.CreatePostmortemTemplate)
	router.DELETE(baseURL+"/v1/post_mortem_templates/:id", wrapper.DeletePostmortemTemplate)
	router.GET(baseURL+"/v1/post_mortem_templates/:id", wrapper.GetPostmortemTemplate)
	router.PUT(baseURL+"/v1/post_mortem_templates/:id", wrapper.UpdatePostmortemTemplate)
	router.GET(baseURL+"/v1/post_mortems/:id", wrapper.GetIncidentPostmortem)
	router.PUT(baseURL+"/v1/post_mortems/:id", wrapper.UpdateIncidentPostmortem)
	router.GET(baseURL+"/v1/pulses", wrapper.ListPulses)
	router.POST(baseURL+"/v1/pulses", wrapper.CreatePulse)
	router.GET(baseURL+"/v1/pulses/:id", wrapper.GetPulse)
	router.PUT(baseURL+"/v1/pulses/:id", wrapper.UpdatePulse)
	router.GET(baseURL+"/v1/services", wrapper.ListServices)
	router.POST(baseURL+"/v1/services", wrapper.CreateService)
	router.DELETE(baseURL+"/v1/services/:id", wrapper.DeleteService)
	router.GET(baseURL+"/v1/services/:id", wrapper.GetService)
	router.PUT(baseURL+"/v1/services/:id", wrapper.UpdateService)
	router.GET(baseURL+"/v1/severities", wrapper.ListSeverities)
	router.POST(baseURL+"/v1/severities", wrapper.CreateSeverity)
	router.DELETE(baseURL+"/v1/severities/:id", wrapper.DeleteSeverity)
	router.GET(baseURL+"/v1/severities/:id", wrapper.GetSeverity)
	router.PUT(baseURL+"/v1/severities/:id", wrapper.UpdateSeverity)
	router.GET(baseURL+"/v1/status-pages", wrapper.ListStatusPages)
	router.POST(baseURL+"/v1/status-pages", wrapper.CreateStatusPage)
	router.DELETE(baseURL+"/v1/status-pages/:id", wrapper.DeleteStatusPage)
	router.GET(baseURL+"/v1/status-pages/:id", wrapper.GetStatusPage)
	router.PUT(baseURL+"/v1/status-pages/:id", wrapper.UpdateStatusPage)
	router.GET(baseURL+"/v1/teams", wrapper.ListTeams)
	router.POST(baseURL+"/v1/teams", wrapper.CreateTeam)
	router.DELETE(baseURL+"/v1/teams/:id", wrapper.DeleteTeam)
	router.GET(baseURL+"/v1/teams/:id", wrapper.GetTeam)
	router.PUT(baseURL+"/v1/teams/:id", wrapper.UpdateTeam)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"FzHHruvliTT/fwEAAP//+R2mMG71BAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

