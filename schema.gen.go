// Package rootly provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package rootly

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Bearer_authScopes = "bearer_auth.Scopes"
)

// Alert defines model for alert.
type Alert struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Environments attached to the alert
	Environments *[]struct {
		// Embedded struct due to allOf(#/components/schemas/environment)
		Environment `yaml:",inline"`
	} `json:"environments,omitempty"`
	Labels *[]struct {

		// Key of the tag
		Key string `json:"key"`

		// Value of the tag
		Value string `json:"value"`
	} `json:"labels,omitempty"`

	// Services attached to the alert
	Services *[]struct {
		// Embedded struct due to allOf(#/components/schemas/service)
		Service `yaml:",inline"`
	} `json:"services,omitempty"`

	// The source of the alert
	Source string `json:"source"`

	// The summary of the alert
	Summary string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// AlertList defines model for alert_list.
type AlertList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/alert)
			Alert `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the alert
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// AlertResponse defines model for alert_response.
type AlertResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/alert)
			Alert `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the alert
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Cause defines model for cause.
type Cause struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the cause
	Description *string `json:"description"`

	// The name of the cause
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// CauseList defines model for cause_list.
type CauseList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/cause)
			Cause `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the cause
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// CauseResponse defines model for cause_response.
type CauseResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/cause)
			Cause `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the cause
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Environment defines model for environment.
type Environment struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the environment
	Description *string `json:"description"`

	// The name of the environment
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// EnvironmentList defines model for environment_list.
type EnvironmentList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/environment)
			Environment `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the environment
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// EnvironmentResponse defines model for environment_response.
type EnvironmentResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/environment)
			Environment `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the environment
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// ErrorsList defines model for errors_list.
type ErrorsList struct {
	Errors *[]struct {
		Code   *string `json:"code"`
		Detail *string `json:"detail"`
		Status string  `json:"status"`
		Title  string  `json:"title"`
	} `json:"errors,omitempty"`
}

// Functionality defines model for functionality.
type Functionality struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the functionality
	Description *string `json:"description"`

	// The name of the functionality
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// FunctionalityList defines model for functionality_list.
type FunctionalityList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/functionality)
			Functionality `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the functionality
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// FunctionalityResponse defines model for functionality_response.
type FunctionalityResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/functionality)
			Functionality `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the functionality
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Incident defines model for incident.
type Incident struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the incident
	Description *string `json:"description"`

	// The Environment ID to attach to the incident
	EnvironmentId *string `json:"environment_id"`

	// The Functionality ID's to attach to the incident
	FunctionalityIds *[]string `json:"functionality_ids"`

	// The Team ID's to attach to the incident
	GroupIds *[]string `json:"group_ids"`

	// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
	Labels *map[string]interface{} `json:"labels"`

	// The Service ID's to attach to the incident
	ServiceIds *[]string `json:"service_ids"`

	// The Severity ID to attach to the incident
	SeverityId *string `json:"severity_id"`

	// The title of the incident
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentActionItem defines model for incident_action_item.
type IncidentActionItem struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of incident action item
	Description *string `json:"description"`

	// The priority of the incident action item
	Priority *string `json:"priority,omitempty"`

	// The status of incident the action item
	Status *string `json:"status,omitempty"`

	// The summary of the incident action item
	Summary string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentActionItemList defines model for incident_action_item_list.
type IncidentActionItemList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_action_item)
			IncidentActionItem `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident action item
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentActionItemResponse defines model for incident_action_item_response.
type IncidentActionItemResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_action_item)
			IncidentActionItem `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident action item
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// IncidentEvent defines model for incident_event.
type IncidentEvent struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The summary of the incident event
	Event string `json:"event"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// The visibility of the incident action item
	Visibility *string `json:"visibility,omitempty"`
}

// IncidentEventList defines model for incident_event_list.
type IncidentEventList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_event)
			IncidentEvent `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident event
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentEventResponse defines model for incident_event_response.
type IncidentEventResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_event)
			IncidentEvent `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident event
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// IncidentList defines model for incident_list.
type IncidentList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident)
			Incident `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentPostMortem defines model for incident_post_mortem.
type IncidentPostMortem struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Date of mitigation
	MitigatedAt *string `json:"mitigated_at"`

	// Date of resolution
	ResolvedAt *string `json:"resolved_at"`

	// Show alerts attached to the incident
	ShowAlertsAttached *bool `json:"show_alerts_attached,omitempty"`

	// Show services impacted of the incident postmortem
	ShowFunctionalitiesImpacted *bool `json:"show_functionalities_impacted,omitempty"`

	// Show groups impacted of the incident postmortem
	ShowGroupsImpacted *bool `json:"show_groups_impacted,omitempty"`

	// Show functionalities impacted of the incident postmortem
	ShowServicesImpacted *bool `json:"show_services_impacted,omitempty"`

	// Show events timeline of the incident postmortem
	ShowTimeline *bool `json:"show_timeline,omitempty"`

	// Show action items in the timeline of the incident postmortem
	ShowTimelineActionItems *bool `json:"show_timeline_action_items,omitempty"`

	// Show genius events in the timeline of the incident postmortem
	ShowTimelineGenius *bool `json:"show_timeline_genius,omitempty"`

	// Show tasks in the timeline of the incident postmortem
	ShowTimelineTasks *bool `json:"show_timeline_tasks,omitempty"`

	// Show trail events in the timeline of the incident postmortem
	ShowTimelineTrail *bool `json:"show_timeline_trail,omitempty"`

	// Date of started at
	StartedAt *string `json:"started_at"`

	// The status of the incident postmortem
	Status *string `json:"status,omitempty"`

	// The title of the incident postmortem
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentPostMortemResponse defines model for incident_post_mortem_response.
type IncidentPostMortemResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_post_mortem)
			IncidentPostMortem `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident postmortem
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// IncidentResponse defines model for incident_response.
type IncidentResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident)
			Incident `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// IncidentRole defines model for incident_role.
type IncidentRole struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the incident role
	Description *string `json:"description"`

	// The name of the incident role
	Name string `json:"name"`

	// The summary of the incident role
	Summary *string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentRoleList defines model for incident_role_list.
type IncidentRoleList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_role)
			IncidentRole `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident role
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentRoleResponse defines model for incident_role_response.
type IncidentRoleResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_role)
			IncidentRole `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident role
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// IncidentTask defines model for incident_task.
type IncidentTask struct {
	Checked *bool `json:"checked,omitempty"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of incident task
	Description *string `json:"description"`

	// The task of the incident task
	Task string `json:"task"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentTaskList defines model for incident_task_list.
type IncidentTaskList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_task)
			IncidentTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentTaskResponse defines model for incident_task_response.
type IncidentTaskResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_task)
			IncidentTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// IncidentType defines model for incident_type.
type IncidentType struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the incident type
	Description *string `json:"description"`

	// The name of the incident type
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentTypeList defines model for incident_type_list.
type IncidentTypeList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_type)
			IncidentType `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident type
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentTypeResponse defines model for incident_type_response.
type IncidentTypeResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_type)
			IncidentType `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident type
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Links defines model for links.
type Links struct {
	First string  `json:"first"`
	Last  string  `json:"last"`
	Next  *string `json:"next"`
	Prev  *string `json:"prev"`
	Self  string  `json:"self"`
}

// MitigateIncident defines model for mitigate_incident.
type MitigateIncident struct {
	Data struct {
		Attributes struct {

			// How was the incident mitigated?
			MitigationMessage *string `json:"mitigation_message"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewAlert defines model for new_alert.
type NewAlert struct {
	Data struct {
		Attributes struct {

			// Alert Id to attach to the incident
			AlertIds *[]string `json:"alert_ids"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewCause defines model for new_cause.
type NewCause struct {
	Data struct {
		Attributes struct {

			// The description of the cause
			Description *string `json:"description"`

			// The name of the cause
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewEnvironment defines model for new_environment.
type NewEnvironment struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the environment
			Description *string `json:"description"`

			// The name of the environment
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewFunctionality defines model for new_functionality.
type NewFunctionality struct {
	Data struct {
		Attributes struct {

			// The description of the functionality
			Description *string `json:"description"`

			// The name of the functionality
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewIncident defines model for new_incident.
type NewIncident struct {
	Data struct {
		Attributes struct {

			// Create a task on Asana as well (if integration enabled)
			CreateOnAsana *bool `json:"create_on_asana"`

			// Create an story on Clubhouse as well (if integration enabled)
			CreateOnClubhouse *bool `json:"create_on_clubhouse"`

			// Create a Google meet meeting as well (if integration enabled)
			CreateOnGoogleMeet *bool `json:"create_on_google_meet"`

			// Create an issue on Jira as well (if integration enabled)
			CreateOnJira *bool `json:"create_on_jira"`

			// Create an issue on Linear as well (if integration enabled)
			CreateOnLinear *bool `json:"create_on_linear"`

			// Create a incident on Opsgenie as well  (if integration enabled)
			CreateOnOpsgenie *bool `json:"create_on_opsgenie"`

			// Create an incident on PagerDuty as well for specified PagerDuty services ids (if integration enabled)
			CreateOnPagerduty *bool `json:"create_on_pagerduty"`

			// Create an incident on ServiceNow as well (if integration enabled)
			CreateOnServiceNow *bool `json:"create_on_service_now"`

			// Create an incident on Slack as well (if integration enabled)
			CreateOnSlack *bool `json:"create_on_slack"`

			// Create a card on Trello as well (if integration enabled)
			CreateOnTrello *bool `json:"create_on_trello"`

			// Create an issue on Zendesk as well (if integration enabled)
			CreateOnZendesk *bool `json:"create_on_zendesk"`

			// Create a Zoom meeting as well (if integration enabled)
			CreateOnZoom *bool `json:"create_on_zoom"`

			// The description of the incident
			Description *string `json:"description"`

			// The Environment ID to attach to the incident
			EnvironmentId *string `json:"environment_id"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
			Labels *map[string]interface{} `json:"labels"`

			// Emails you want to notify
			NotifyEmails *[]string `json:"notify_emails"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID to attach to the incident
			SeverityId *string `json:"severity_id"`

			// The title of the incident
			Title string `json:"title"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewIncidentActionItem defines model for new_incident_action_item.
type NewIncidentActionItem struct {
	Data struct {
		Attributes struct {

			// Create a Asana task as well (if integration enabled)
			CreateOnAsana *bool `json:"create_on_asana"`

			// Create a Clubhouse task as well (if integration enabled)
			CreateOnClubhouse *bool `json:"create_on_clubhouse"`

			// Create an Jira issue as well (if integration enabled)
			CreateOnJira *bool `json:"create_on_jira"`

			// Create an Linear issue as well (if integration enabled)
			CreateOnLinear *bool `json:"create_on_linear"`

			// Create a Trello task as well (if integration enabled)
			CreateOnTrello *bool `json:"create_on_trello"`

			// Create an issue on Zendesk as well (if integration enabled)
			CreateOnZendesk *bool `json:"create_on_zendesk"`

			// The description of the incident action item
			Description *string `json:"description"`

			// The priority of the incident action item
			Priority *string `json:"priority,omitempty"`

			// The status of incident the action item
			Status *string `json:"status,omitempty"`

			// The summary of the incident action item
			Summary string `json:"summary"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewIncidentEvent defines model for new_incident_event.
type NewIncidentEvent struct {
	Data struct {
		Attributes struct {

			// The summary of the incident event
			Event string `json:"event"`

			// The visibility of the incident action item
			Visibility *string `json:"visibility,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewIncidentRole defines model for new_incident_role.
type NewIncidentRole struct {
	Data struct {
		Attributes struct {

			// The description of the incident role
			Description *string `json:"description"`

			// The name of the incident role
			Name string `json:"name"`

			// The summary of the incident role
			Summary *string `json:"summary"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewIncidentTask defines model for new_incident_task.
type NewIncidentTask struct {
	Data struct {
		Attributes struct {
			Checked *bool `json:"checked,omitempty"`

			// The description of the incident task
			Description *string `json:"description"`

			// The task of the incident task
			Task string `json:"task"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewIncidentType defines model for new_incident_type.
type NewIncidentType struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the incident type
			Description *string `json:"description"`

			// The name of the incident type
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewPlaybook defines model for new_playbook.
type NewPlaybook struct {
	Data struct {
		Attributes struct {

			// The summary of the playbook
			Summary *string `json:"summary"`

			// The title of the playbook
			Title string `json:"title"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewPlaybookTask defines model for new_playbook_task.
type NewPlaybookTask struct {
	Data struct {
		Attributes struct {

			// The description of the incident task
			Description *string `json:"description"`

			// The task of the incident task
			Task string `json:"task"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewPostMortemTemplate defines model for new_post_mortem_template.
type NewPostMortemTemplate struct {
	Data struct {
		Attributes struct {

			// Default selected template when editing a postmortem
			Default *bool `json:"default"`

			// The name of the postmortem template
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewPulse defines model for new_pulse.
type NewPulse struct {
	Data struct {
		Attributes struct {

			// Pulse end datetime
			EndedAt *time.Time `json:"ended_at"`

			// The Environment ID's to attach to the pulse
			EnvironmentIds *[]string `json:"environment_ids"`
			Labels         *[]struct {

				// Key of the tag
				Key string `json:"key"`

				// Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`

			// The Service ID's to attach to the pulse
			ServiceIds *[]string `json:"service_ids"`

			// Pulse start datetime
			StartedAt *time.Time `json:"started_at"`

			// The summary of the pulse
			Summary string `json:"summary"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewService defines model for new_service.
type NewService struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the service
			Description *string `json:"description"`

			// The name of the service
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewSeverity defines model for new_severity.
type NewSeverity struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the severity
			Description *string `json:"description"`

			// The name of the severity
			Name string `json:"name"`

			// The severity of the severity
			Severity *string `json:"severity,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewStatusPage defines model for new_status_page.
type NewStatusPage struct {
	Data struct {
		Attributes struct {

			// Allow search engines to include your public status page in search results.
			AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

			// The description of the status page
			Description *string `json:"description"`

			// Enabled / Disable the status page
			Enabled *bool `json:"enabled"`

			// The color of the footer. Eg. "#1F2F41"
			FooterColor *string `json:"footer_color"`

			// The color of the header. Eg. "#0061F2"
			HeaderColor *string `json:"header_color"`

			// Make the status page accessible to the public
			Public *bool `json:"public"`

			// Show uptime
			ShowUptime *bool `json:"show_uptime"`

			// Show uptime over x days
			ShowUptimeLastDays *int `json:"show_uptime_last_days"`

			// The title of the status page
			Title string `json:"title"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// NewTeam defines model for new_team.
type NewTeam struct {
	Data struct {
		Attributes struct {

			// The description of the team
			Description *string `json:"description"`

			// The name of the team
			Name string `json:"name"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// Playbook defines model for playbook.
type Playbook struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The summary of the playbook
	Summary *string `json:"summary"`

	// The title of the playbook
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PlaybookList defines model for playbook_list.
type PlaybookList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook)
			Playbook `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the playbook
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PlaybookResponse defines model for playbook_response.
type PlaybookResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook)
			Playbook `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the playbook
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// PlaybookTask defines model for playbook_task.
type PlaybookTask struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of incident task
	Description *string `json:"description"`

	// The task of the incident task
	Task string `json:"task"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PlaybookTaskList defines model for playbook_task_list.
type PlaybookTaskList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook_task)
			PlaybookTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PlaybookTaskResponse defines model for playbook_task_response.
type PlaybookTaskResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook_task)
			PlaybookTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// PostMortemTemplate defines model for post_mortem_template.
type PostMortemTemplate struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Default selected template when editing a postmortem
	Default *bool `json:"default"`

	// The name of the postmortem template
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PostMortemTemplateList defines model for post_mortem_template_list.
type PostMortemTemplateList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/post_mortem_template)
			PostMortemTemplate `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the post_mortem_template
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PostMortemTemplateResponse defines model for post_mortem_template_response.
type PostMortemTemplateResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/post_mortem_template)
			PostMortemTemplate `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the post_mortem_template
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Pulse defines model for pulse.
type Pulse struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Environments attached to the pulse
	Environments *[]struct {
		// Embedded struct due to allOf(#/components/schemas/environment)
		Environment `yaml:",inline"`
	} `json:"environments,omitempty"`
	Labels *[]struct {

		// Key of the tag
		Key string `json:"key"`

		// Value of the tag
		Value string `json:"value"`
	} `json:"labels,omitempty"`

	// Services attached to the pulse
	Services *[]struct {
		// Embedded struct due to allOf(#/components/schemas/service)
		Service `yaml:",inline"`
	} `json:"services,omitempty"`

	// The summary of the pulse
	Summary string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PulseList defines model for pulse_list.
type PulseList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/pulse)
			Pulse `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the pulse
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PulseResponse defines model for pulse_response.
type PulseResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/pulse)
			Pulse `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the pulse
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// ResolveIncident defines model for resolve_incident.
type ResolveIncident struct {
	Data struct {
		Attributes struct {

			// How was the incident resolved?
			ResolutionMessage *string `json:"resolution_message"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// Service defines model for service.
type Service struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the service
	Description *string `json:"description"`

	// The name of the service
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// ServiceList defines model for service_list.
type ServiceList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/service)
			Service `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the service
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// ServiceResponse defines model for service_response.
type ServiceResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/service)
			Service `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the service
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Severity defines model for severity.
type Severity struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the severity
	Description *string `json:"description"`

	// The name of the severity
	Name string `json:"name"`

	// The severity of the severity
	Severity *string `json:"severity,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// SeverityList defines model for severity_list.
type SeverityList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/severity)
			Severity `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the severity
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// SeverityResponse defines model for severity_response.
type SeverityResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/severity)
			Severity `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the severity
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// StatusPage defines model for status_page.
type StatusPage struct {

	// Allow search engines to include your public status page in search results.
	AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the status page
	Description *string `json:"description"`

	// Enabled / Disable the status page
	Enabled *bool `json:"enabled"`

	// The color of the footer. Eg. "#1F2F41"
	FooterColor *string `json:"footer_color"`

	// The color of the header. Eg. "#0061F2"
	HeaderColor *string `json:"header_color"`

	// Make the status page accessible to the public
	Public *bool `json:"public"`

	// Show uptime
	ShowUptime *bool `json:"show_uptime"`

	// Show uptime over x days
	ShowUptimeLastDays *int `json:"show_uptime_last_days"`

	// The title of the status page
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// StatusPageList defines model for status_page_list.
type StatusPageList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/status_page)
			StatusPage `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the status page
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// StatusPageResponse defines model for status_page_response.
type StatusPageResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/status_page)
			StatusPage `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the status page
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// Team defines model for team.
type Team struct {

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the team
	Description *string `json:"description"`

	// The name of the team
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// TeamList defines model for team_list.
type TeamList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/team)
			Team `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the team
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// TeamResponse defines model for team_response.
type TeamResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/team)
			Team `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the team
		Id   string `json:"id"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateCause defines model for update_cause.
type UpdateCause struct {
	Data struct {
		Attributes struct {

			// The description of the cause
			Description *string `json:"description"`

			// The name of the cause
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateEnvironment defines model for update_environment.
type UpdateEnvironment struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the environment
			Description *string `json:"description"`

			// The name of the environment
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateFunctionality defines model for update_functionality.
type UpdateFunctionality struct {
	Data struct {
		Attributes struct {

			// The description of the functionality
			Description *string `json:"description"`

			// The name of the functionality
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncident defines model for update_incident.
type UpdateIncident struct {
	Data struct {
		Attributes struct {

			// The description of the incident
			Description *string `json:"description"`

			// The Environment ID to attach to the incident
			EnvironmentId *string `json:"environment_id"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
			Labels *map[string]interface{} `json:"labels"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID to attach to the incident
			SeverityId *string `json:"severity_id"`

			// The title of the incident
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncidentActionItem defines model for update_incident_action_item.
type UpdateIncidentActionItem struct {
	Data struct {
		Attributes struct {

			// The description of the incident action item
			Description *string `json:"description"`

			// The priority of the incident action item
			Priority *string `json:"priority,omitempty"`

			// The status of incident the action item
			Status *string `json:"status,omitempty"`

			// The summary of the incident action item
			Summary *string `json:"summary,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncidentEvent defines model for update_incident_event.
type UpdateIncidentEvent struct {
	Data struct {
		Attributes struct {

			// The summary of the incident event
			Event *string `json:"event,omitempty"`

			// The visibility of the incident action item
			Visibility *string `json:"visibility,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncidentPostMortem defines model for update_incident_post_mortem.
type UpdateIncidentPostMortem struct {
	Data struct {
		Attributes struct {

			// The Cause ID's to attach to the incident postmortem
			CauseIds *[]string `json:"cause_ids"`

			// Date of mitigation
			MitigatedAt *string `json:"mitigated_at"`

			// Date of resolution
			ResolvedAt *string `json:"resolved_at"`

			// Show alerts attached to the incident
			ShowAlertsAttached *bool `json:"show_alerts_attached,omitempty"`

			// Show services impacted of the incident postmortem
			ShowFunctionalitiesImpacted *bool `json:"show_functionalities_impacted,omitempty"`

			// Show groups impacted of the incident postmortem
			ShowGroupsImpacted *bool `json:"show_groups_impacted,omitempty"`

			// Show functionalities impacted of the incident postmortem
			ShowServicesImpacted *bool `json:"show_services_impacted,omitempty"`

			// Show events timeline of the incident postmortem
			ShowTimeline *bool `json:"show_timeline,omitempty"`

			// Show action items in the timeline of the incident postmortem
			ShowTimelineActionItems *bool `json:"show_timeline_action_items,omitempty"`

			// Show genius events in the timeline of the incident postmortem
			ShowTimelineGenius *bool `json:"show_timeline_genius,omitempty"`

			// Show tasks in the timeline of the incident postmortem
			ShowTimelineTasks *bool `json:"show_timeline_tasks,omitempty"`

			// Show trail events in the timeline of the incident postmortem
			ShowTimelineTrail *bool `json:"show_timeline_trail,omitempty"`

			// Date of started at
			StartedAt *string `json:"started_at"`

			// The status of the incident postmortem
			Status *string `json:"status,omitempty"`

			// The title of the incident postmortem
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncidentRole defines model for update_incident_role.
type UpdateIncidentRole struct {
	Data struct {
		Attributes struct {

			// The description of the incident role
			Description *string `json:"description"`

			// The name of the incident role
			Name *string `json:"name,omitempty"`

			// The summary of the incident role
			Summary *string `json:"summary"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncidentTask defines model for update_incident_task.
type UpdateIncidentTask struct {
	Data struct {
		Attributes struct {
			Checked *bool `json:"checked,omitempty"`

			// The description of the incident task
			Description *string `json:"description"`

			// The task of the incident task
			Task *string `json:"task,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateIncidentType defines model for update_incident_type.
type UpdateIncidentType struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the incident type
			Description *string `json:"description"`

			// The name of the incident type
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdatePlaybook defines model for update_playbook.
type UpdatePlaybook struct {
	Data struct {
		Attributes struct {

			// The summary of the playbook
			Summary *string `json:"summary"`

			// The title of the playbook
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdatePlaybookTask defines model for update_playbook_task.
type UpdatePlaybookTask struct {
	Data struct {
		Attributes struct {

			// The description of the incident task
			Description *string `json:"description"`

			// The task of the incident task
			Task *string `json:"task,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdatePostMortemTemplate defines model for update_post_mortem_template.
type UpdatePostMortemTemplate struct {
	Data struct {
		Attributes struct {

			// Default selected template when editing a postmortem
			Default *bool `json:"default"`

			// The name of the postmortem template
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdatePulse defines model for update_pulse.
type UpdatePulse struct {
	Data struct {
		Attributes struct {

			// Pulse end datetime
			EndedAt *time.Time `json:"ended_at"`

			// The Environment ID's to attach to the pulse
			EnvironmentIds *[]string `json:"environment_ids"`
			Labels         *[]struct {

				// Key of the tag
				Key string `json:"key"`

				// Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`

			// The Service ID's to attach to the pulse
			ServiceIds *[]string `json:"service_ids"`

			// Pulse start datetime
			StartedAt *time.Time `json:"started_at"`

			// The summary of the pulse
			Summary *string `json:"summary,omitempty"`
		} `json:"attributes"`
		Type *string `json:"type,omitempty"`
	} `json:"data"`
}

// UpdateService defines model for update_service.
type UpdateService struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the service
			Description *string `json:"description"`

			// The name of the service
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateSeverity defines model for update_severity.
type UpdateSeverity struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the severity
			Description *string `json:"description"`

			// The name of the severity
			Name *string `json:"name,omitempty"`

			// The severity of the severity
			Severity *string `json:"severity,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateStatusPage defines model for update_status_page.
type UpdateStatusPage struct {
	Data struct {
		Attributes struct {

			// Allow search engines to include your public status page in search results.
			AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

			// The description of the status page
			Description *string `json:"description"`

			// Enabled / Disable the status page
			Enabled *bool `json:"enabled"`

			// The color of the footer. Eg. "#1F2F41"
			FooterColor *string `json:"footer_color"`

			// The color of the header. Eg. "#0061F2"
			HeaderColor *string `json:"header_color"`

			// Make the status page accessible to the public
			Public *bool `json:"public"`

			// Show uptime
			ShowUptime *bool `json:"show_uptime"`

			// Show uptime over x days
			ShowUptimeLastDays *int `json:"show_uptime_last_days"`

			// The title of the status page
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// UpdateTeam defines model for update_team.
type UpdateTeam struct {
	Data struct {
		Attributes struct {

			// The description of the team
			Description *string `json:"description"`

			// The name of the team
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type string `json:"type"`
	} `json:"data"`
}

// ListAlertsParams defines parameters for ListAlerts.
type ListAlertsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListCausesParams defines parameters for ListCauses.
type ListCausesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListEnvironmentsParams defines parameters for ListEnvironments.
type ListEnvironmentsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListFunctionalitiesParams defines parameters for ListFunctionalities.
type ListFunctionalitiesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentRolesParams defines parameters for ListIncidentRoles.
type ListIncidentRolesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentTypesParams defines parameters for ListIncidentTypes.
type ListIncidentTypesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentsParams defines parameters for ListIncidents.
type ListIncidentsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentActionItemsParams defines parameters for ListIncidentActionItems.
type ListIncidentActionItemsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListAlertParams defines parameters for ListAlert.
type ListAlertParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentEventsParams defines parameters for ListIncidentEvents.
type ListIncidentEventsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListIncidentTasksParams defines parameters for ListIncidentTasks.
type ListIncidentTasksParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListPlaybooksParams defines parameters for ListPlaybooks.
type ListPlaybooksParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListPlaybookTasksParams defines parameters for ListPlaybookTasks.
type ListPlaybookTasksParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListPostmortemTemplatesParams defines parameters for ListPostmortemTemplates.
type ListPostmortemTemplatesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListPulsesParams defines parameters for ListPulses.
type ListPulsesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListServicesParams defines parameters for ListServices.
type ListServicesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListSeveritiesParams defines parameters for ListSeverities.
type ListSeveritiesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListStatusPagesParams defines parameters for ListStatusPages.
type ListStatusPagesParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// ListTeamsParams defines parameters for ListTeams.
type ListTeamsParams struct {
	PageNumber *int `json:"page[number],omitempty"`
	PageSize   *int `json:"page[size],omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteIncidentActionItem request
	DeleteIncidentActionItem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentActionItems request
	GetIncidentActionItems(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentActionItem request  with any body
	UpdateIncidentActionItemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAlerts request
	ListAlerts(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlert request
	GetAlert(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCauses request
	ListCauses(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCause request  with any body
	CreateCauseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCause request
	DeleteCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCause request
	GetCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCause request  with any body
	UpdateCauseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEnvironments request
	ListEnvironments(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEnvironment request  with any body
	CreateEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnvironment request
	DeleteEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironment request
	GetEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEnvironment request  with any body
	UpdateEnvironmentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentEvent request
	DeleteIncidentEvent(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentEvents request
	GetIncidentEvents(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentEvent request  with any body
	UpdateIncidentEventWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFunctionalities request
	ListFunctionalities(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFunctionality request  with any body
	CreateFunctionalityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFunctionality request
	DeleteFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionality request
	GetFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFunctionality request  with any body
	UpdateFunctionalityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentRoles request
	ListIncidentRoles(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentRole request  with any body
	CreateIncidentRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentRole request
	DeleteIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentRole request
	GetIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentRole request  with any body
	UpdateIncidentRoleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentTask request
	DeleteIncidentTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentTasks request
	GetIncidentTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentTask request  with any body
	UpdateIncidentTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentTypes request
	ListIncidentTypes(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentType request  with any body
	CreateIncidentTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentType request
	DeleteIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentType request
	GetIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentType request  with any body
	UpdateIncidentTypeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidents request
	ListIncidents(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncident request  with any body
	CreateIncidentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncident request
	DeleteIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncident request
	GetIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncident request  with any body
	UpdateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MitigateIncident request  with any body
	MitigateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResolveIncident request  with any body
	ResolveIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentActionItems request
	ListIncidentActionItems(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentActionItem request  with any body
	CreateIncidentActionItemWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAlert request
	ListAlert(ctx context.Context, incidentId string, params *ListAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AttachAlert request  with any body
	AttachAlertWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentEvents request
	ListIncidentEvents(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentEvent request  with any body
	CreateIncidentEventWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentTasks request
	ListIncidentTasks(ctx context.Context, incidentId string, params *ListIncidentTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentTask request  with any body
	CreateIncidentTaskWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePlaybookTask request
	DeletePlaybookTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaybookTasks request
	GetPlaybookTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlaybookTask request  with any body
	UpdatePlaybookTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPlaybooks request
	ListPlaybooks(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlaybook request  with any body
	CreatePlaybookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePlaybook request
	DeletePlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaybook request
	GetPlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlaybook request  with any body
	UpdatePlaybookWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPlaybookTasks request
	ListPlaybookTasks(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlaybookTask request  with any body
	CreatePlaybookTaskWithBody(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPostmortemTemplates request
	ListPostmortemTemplates(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePostmortemTemplate request  with any body
	CreatePostmortemTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePostmortemTemplate request
	DeletePostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPostmortemTemplate request
	GetPostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePostmortemTemplate request  with any body
	UpdatePostmortemTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentPostmortem request
	GetIncidentPostmortem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentPostmortem request  with any body
	UpdateIncidentPostmortemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPulses request
	ListPulses(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePulse request  with any body
	CreatePulseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPulse request
	GetPulse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePulse request  with any body
	UpdatePulseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListServices request
	ListServices(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateService request  with any body
	CreateServiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteService request
	DeleteService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetService request
	GetService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateService request  with any body
	UpdateServiceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSeverities request
	ListSeverities(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSeverity request  with any body
	CreateSeverityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSeverity request
	DeleteSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSeverity request
	GetSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSeverity request  with any body
	UpdateSeverityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListStatusPages request
	ListStatusPages(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStatusPage request  with any body
	CreateStatusPageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStatusPage request
	DeleteStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusPage request
	GetStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateStatusPage request  with any body
	UpdateStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTeams request
	ListTeams(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTeam request  with any body
	CreateTeamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTeam request
	DeleteTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeam request
	GetTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTeam request  with any body
	UpdateTeamWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteIncidentActionItem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentActionItemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentActionItems(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentActionItemsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentActionItemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentActionItemRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAlerts(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAlertsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlert(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCauses(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCausesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCauseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCauseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCauseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCauseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCauseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCauseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEnvironments(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEnvironmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvironmentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnvironmentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEnvironmentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentEvent(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentEventRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentEvents(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentEventsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentEventWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentEventRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFunctionalities(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFunctionalitiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFunctionalityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFunctionalityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFunctionalityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionalityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFunctionalityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFunctionalityRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentRoles(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentRoleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRoleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentTasksRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentTaskRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentTypes(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentTypeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentTypeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentTypeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentTypeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidents(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MitigateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMitigateIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResolveIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResolveIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentActionItems(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentActionItemsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentActionItemWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentActionItemRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAlert(ctx context.Context, incidentId string, params *ListAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAlertRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AttachAlertWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAttachAlertRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentEvents(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentEventsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentEventWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentEventRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentTasks(ctx context.Context, incidentId string, params *ListIncidentTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentTasksRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentTaskWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentTaskRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePlaybookTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePlaybookTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaybookTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaybookTasksRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlaybookTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlaybookTaskRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPlaybooks(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPlaybooksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlaybookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlaybookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePlaybookRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaybookRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlaybookWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlaybookRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPlaybookTasks(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPlaybookTasksRequest(c.Server, playbookId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlaybookTaskWithBody(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlaybookTaskRequestWithBody(c.Server, playbookId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPostmortemTemplates(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPostmortemTemplatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePostmortemTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePostmortemTemplateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePostmortemTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPostmortemTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePostmortemTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePostmortemTemplateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentPostmortem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentPostmortemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentPostmortemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentPostmortemRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPulses(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPulsesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePulseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePulseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPulse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPulseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePulseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePulseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListServices(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListServicesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateServiceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateServiceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSeverities(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSeveritiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSeverityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSeverityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSeverityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSeverityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSeverityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSeverityRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListStatusPages(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListStatusPagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStatusPageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStatusPageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStatusPageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusPageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStatusPageRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTeams(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTeamsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTeamRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteIncidentActionItemRequest generates requests for DeleteIncidentActionItem
func NewDeleteIncidentActionItemRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentActionItemsRequest generates requests for GetIncidentActionItems
func NewGetIncidentActionItemsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentActionItemRequestWithBody generates requests for UpdateIncidentActionItem with any type of body
func NewUpdateIncidentActionItemRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAlertsRequest generates requests for ListAlerts
func NewListAlertsRequest(server string, params *ListAlertsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alerts")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlertRequest generates requests for GetAlert
func NewGetAlertRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alerts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListCausesRequest generates requests for ListCauses
func NewListCausesRequest(server string, params *ListCausesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCauseRequestWithBody generates requests for CreateCause with any type of body
func NewCreateCauseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCauseRequest generates requests for DeleteCause
func NewDeleteCauseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCauseRequest generates requests for GetCause
func NewGetCauseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCauseRequestWithBody generates requests for UpdateCause with any type of body
func NewUpdateCauseRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListEnvironmentsRequest generates requests for ListEnvironments
func NewListEnvironmentsRequest(server string, params *ListEnvironmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEnvironmentRequestWithBody generates requests for CreateEnvironment with any type of body
func NewCreateEnvironmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEnvironmentRequest generates requests for DeleteEnvironment
func NewDeleteEnvironmentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvironmentRequest generates requests for GetEnvironment
func NewGetEnvironmentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEnvironmentRequestWithBody generates requests for UpdateEnvironment with any type of body
func NewUpdateEnvironmentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentEventRequest generates requests for DeleteIncidentEvent
func NewDeleteIncidentEventRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentEventsRequest generates requests for GetIncidentEvents
func NewGetIncidentEventsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentEventRequestWithBody generates requests for UpdateIncidentEvent with any type of body
func NewUpdateIncidentEventRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListFunctionalitiesRequest generates requests for ListFunctionalities
func NewListFunctionalitiesRequest(server string, params *ListFunctionalitiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFunctionalityRequestWithBody generates requests for CreateFunctionality with any type of body
func NewCreateFunctionalityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFunctionalityRequest generates requests for DeleteFunctionality
func NewDeleteFunctionalityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFunctionalityRequest generates requests for GetFunctionality
func NewGetFunctionalityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFunctionalityRequestWithBody generates requests for UpdateFunctionality with any type of body
func NewUpdateFunctionalityRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentRolesRequest generates requests for ListIncidentRoles
func NewListIncidentRolesRequest(server string, params *ListIncidentRolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentRoleRequestWithBody generates requests for CreateIncidentRole with any type of body
func NewCreateIncidentRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentRoleRequest generates requests for DeleteIncidentRole
func NewDeleteIncidentRoleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentRoleRequest generates requests for GetIncidentRole
func NewGetIncidentRoleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentRoleRequestWithBody generates requests for UpdateIncidentRole with any type of body
func NewUpdateIncidentRoleRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentTaskRequest generates requests for DeleteIncidentTask
func NewDeleteIncidentTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentTasksRequest generates requests for GetIncidentTasks
func NewGetIncidentTasksRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentTaskRequestWithBody generates requests for UpdateIncidentTask with any type of body
func NewUpdateIncidentTaskRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentTypesRequest generates requests for ListIncidentTypes
func NewListIncidentTypesRequest(server string, params *ListIncidentTypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentTypeRequestWithBody generates requests for CreateIncidentType with any type of body
func NewCreateIncidentTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentTypeRequest generates requests for DeleteIncidentType
func NewDeleteIncidentTypeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentTypeRequest generates requests for GetIncidentType
func NewGetIncidentTypeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentTypeRequestWithBody generates requests for UpdateIncidentType with any type of body
func NewUpdateIncidentTypeRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentsRequest generates requests for ListIncidents
func NewListIncidentsRequest(server string, params *ListIncidentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentRequestWithBody generates requests for CreateIncident with any type of body
func NewCreateIncidentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentRequest generates requests for DeleteIncident
func NewDeleteIncidentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentRequest generates requests for GetIncident
func NewGetIncidentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentRequestWithBody generates requests for UpdateIncident with any type of body
func NewUpdateIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMitigateIncidentRequestWithBody generates requests for MitigateIncident with any type of body
func NewMitigateIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/mitigate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResolveIncidentRequestWithBody generates requests for ResolveIncident with any type of body
func NewResolveIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/resolve", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentActionItemsRequest generates requests for ListIncidentActionItems
func NewListIncidentActionItemsRequest(server string, incidentId string, params *ListIncidentActionItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/action_items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentActionItemRequestWithBody generates requests for CreateIncidentActionItem with any type of body
func NewCreateIncidentActionItemRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/action_items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAlertRequest generates requests for ListAlert
func NewListAlertRequest(server string, incidentId string, params *ListAlertParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/alerts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAttachAlertRequestWithBody generates requests for AttachAlert with any type of body
func NewAttachAlertRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/alerts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentEventsRequest generates requests for ListIncidentEvents
func NewListIncidentEventsRequest(server string, incidentId string, params *ListIncidentEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentEventRequestWithBody generates requests for CreateIncidentEvent with any type of body
func NewCreateIncidentEventRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentTasksRequest generates requests for ListIncidentTasks
func NewListIncidentTasksRequest(server string, incidentId string, params *ListIncidentTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/incident_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentTaskRequestWithBody generates requests for CreateIncidentTask with any type of body
func NewCreateIncidentTaskRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/incident_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePlaybookTaskRequest generates requests for DeletePlaybookTask
func NewDeletePlaybookTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlaybookTasksRequest generates requests for GetPlaybookTasks
func NewGetPlaybookTasksRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlaybookTaskRequestWithBody generates requests for UpdatePlaybookTask with any type of body
func NewUpdatePlaybookTaskRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPlaybooksRequest generates requests for ListPlaybooks
func NewListPlaybooksRequest(server string, params *ListPlaybooksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlaybookRequestWithBody generates requests for CreatePlaybook with any type of body
func NewCreatePlaybookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePlaybookRequest generates requests for DeletePlaybook
func NewDeletePlaybookRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlaybookRequest generates requests for GetPlaybook
func NewGetPlaybookRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlaybookRequestWithBody generates requests for UpdatePlaybook with any type of body
func NewUpdatePlaybookRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPlaybookTasksRequest generates requests for ListPlaybookTasks
func NewListPlaybookTasksRequest(server string, playbookId string, params *ListPlaybookTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "playbook_id", runtime.ParamLocationPath, playbookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s/playbook_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlaybookTaskRequestWithBody generates requests for CreatePlaybookTask with any type of body
func NewCreatePlaybookTaskRequestWithBody(server string, playbookId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "playbook_id", runtime.ParamLocationPath, playbookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s/playbook_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPostmortemTemplatesRequest generates requests for ListPostmortemTemplates
func NewListPostmortemTemplatesRequest(server string, params *ListPostmortemTemplatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePostmortemTemplateRequestWithBody generates requests for CreatePostmortemTemplate with any type of body
func NewCreatePostmortemTemplateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePostmortemTemplateRequest generates requests for DeletePostmortemTemplate
func NewDeletePostmortemTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPostmortemTemplateRequest generates requests for GetPostmortemTemplate
func NewGetPostmortemTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePostmortemTemplateRequestWithBody generates requests for UpdatePostmortemTemplate with any type of body
func NewUpdatePostmortemTemplateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIncidentPostmortemRequest generates requests for GetIncidentPostmortem
func NewGetIncidentPostmortemRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentPostmortemRequestWithBody generates requests for UpdateIncidentPostmortem with any type of body
func NewUpdateIncidentPostmortemRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPulsesRequest generates requests for ListPulses
func NewListPulsesRequest(server string, params *ListPulsesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePulseRequestWithBody generates requests for CreatePulse with any type of body
func NewCreatePulseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPulseRequest generates requests for GetPulse
func NewGetPulseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePulseRequestWithBody generates requests for UpdatePulse with any type of body
func NewUpdatePulseRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListServicesRequest generates requests for ListServices
func NewListServicesRequest(server string, params *ListServicesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateServiceRequestWithBody generates requests for CreateService with any type of body
func NewCreateServiceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServiceRequest generates requests for DeleteService
func NewDeleteServiceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceRequest generates requests for GetService
func NewGetServiceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateServiceRequestWithBody generates requests for UpdateService with any type of body
func NewUpdateServiceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSeveritiesRequest generates requests for ListSeverities
func NewListSeveritiesRequest(server string, params *ListSeveritiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSeverityRequestWithBody generates requests for CreateSeverity with any type of body
func NewCreateSeverityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSeverityRequest generates requests for DeleteSeverity
func NewDeleteSeverityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSeverityRequest generates requests for GetSeverity
func NewGetSeverityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSeverityRequestWithBody generates requests for UpdateSeverity with any type of body
func NewUpdateSeverityRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListStatusPagesRequest generates requests for ListStatusPages
func NewListStatusPagesRequest(server string, params *ListStatusPagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateStatusPageRequestWithBody generates requests for CreateStatusPage with any type of body
func NewCreateStatusPageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStatusPageRequest generates requests for DeleteStatusPage
func NewDeleteStatusPageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusPageRequest generates requests for GetStatusPage
func NewGetStatusPageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateStatusPageRequestWithBody generates requests for UpdateStatusPage with any type of body
func NewUpdateStatusPageRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListTeamsRequest generates requests for ListTeams
func NewListTeamsRequest(server string, params *ListTeamsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTeamRequestWithBody generates requests for CreateTeam with any type of body
func NewCreateTeamRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTeamRequest generates requests for DeleteTeam
func NewDeleteTeamRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamRequest generates requests for GetTeam
func NewGetTeamRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTeamRequestWithBody generates requests for UpdateTeam with any type of body
func NewUpdateTeamRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteIncidentActionItem request
	DeleteIncidentActionItemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentActionItemResponse, error)

	// GetIncidentActionItems request
	GetIncidentActionItemsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentActionItemsResponse, error)

	// UpdateIncidentActionItem request  with any body
	UpdateIncidentActionItemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentActionItemResponse, error)

	// ListAlerts request
	ListAlertsWithResponse(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*ListAlertsResponse, error)

	// GetAlert request
	GetAlertWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAlertResponse, error)

	// ListCauses request
	ListCausesWithResponse(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*ListCausesResponse, error)

	// CreateCause request  with any body
	CreateCauseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCauseResponse, error)

	// DeleteCause request
	DeleteCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCauseResponse, error)

	// GetCause request
	GetCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCauseResponse, error)

	// UpdateCause request  with any body
	UpdateCauseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCauseResponse, error)

	// ListEnvironments request
	ListEnvironmentsWithResponse(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error)

	// CreateEnvironment request  with any body
	CreateEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error)

	// DeleteEnvironment request
	DeleteEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error)

	// GetEnvironment request
	GetEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error)

	// UpdateEnvironment request  with any body
	UpdateEnvironmentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error)

	// DeleteIncidentEvent request
	DeleteIncidentEventWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentEventResponse, error)

	// GetIncidentEvents request
	GetIncidentEventsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentEventsResponse, error)

	// UpdateIncidentEvent request  with any body
	UpdateIncidentEventWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentEventResponse, error)

	// ListFunctionalities request
	ListFunctionalitiesWithResponse(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*ListFunctionalitiesResponse, error)

	// CreateFunctionality request  with any body
	CreateFunctionalityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFunctionalityResponse, error)

	// DeleteFunctionality request
	DeleteFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFunctionalityResponse, error)

	// GetFunctionality request
	GetFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFunctionalityResponse, error)

	// UpdateFunctionality request  with any body
	UpdateFunctionalityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFunctionalityResponse, error)

	// ListIncidentRoles request
	ListIncidentRolesWithResponse(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*ListIncidentRolesResponse, error)

	// CreateIncidentRole request  with any body
	CreateIncidentRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentRoleResponse, error)

	// DeleteIncidentRole request
	DeleteIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentRoleResponse, error)

	// GetIncidentRole request
	GetIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRoleResponse, error)

	// UpdateIncidentRole request  with any body
	UpdateIncidentRoleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleResponse, error)

	// DeleteIncidentTask request
	DeleteIncidentTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentTaskResponse, error)

	// GetIncidentTasks request
	GetIncidentTasksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentTasksResponse, error)

	// UpdateIncidentTask request  with any body
	UpdateIncidentTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentTaskResponse, error)

	// ListIncidentTypes request
	ListIncidentTypesWithResponse(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*ListIncidentTypesResponse, error)

	// CreateIncidentType request  with any body
	CreateIncidentTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentTypeResponse, error)

	// DeleteIncidentType request
	DeleteIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentTypeResponse, error)

	// GetIncidentType request
	GetIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentTypeResponse, error)

	// UpdateIncidentType request  with any body
	UpdateIncidentTypeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentTypeResponse, error)

	// ListIncidents request
	ListIncidentsWithResponse(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*ListIncidentsResponse, error)

	// CreateIncident request  with any body
	CreateIncidentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentResponse, error)

	// DeleteIncident request
	DeleteIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentResponse, error)

	// GetIncident request
	GetIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentResponse, error)

	// UpdateIncident request  with any body
	UpdateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentResponse, error)

	// MitigateIncident request  with any body
	MitigateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MitigateIncidentResponse, error)

	// ResolveIncident request  with any body
	ResolveIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResolveIncidentResponse, error)

	// ListIncidentActionItems request
	ListIncidentActionItemsWithResponse(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*ListIncidentActionItemsResponse, error)

	// CreateIncidentActionItem request  with any body
	CreateIncidentActionItemWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentActionItemResponse, error)

	// ListAlert request
	ListAlertWithResponse(ctx context.Context, incidentId string, params *ListAlertParams, reqEditors ...RequestEditorFn) (*ListAlertResponse, error)

	// AttachAlert request  with any body
	AttachAlertWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachAlertResponse, error)

	// ListIncidentEvents request
	ListIncidentEventsWithResponse(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*ListIncidentEventsResponse, error)

	// CreateIncidentEvent request  with any body
	CreateIncidentEventWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentEventResponse, error)

	// ListIncidentTasks request
	ListIncidentTasksWithResponse(ctx context.Context, incidentId string, params *ListIncidentTasksParams, reqEditors ...RequestEditorFn) (*ListIncidentTasksResponse, error)

	// CreateIncidentTask request  with any body
	CreateIncidentTaskWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentTaskResponse, error)

	// DeletePlaybookTask request
	DeletePlaybookTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookTaskResponse, error)

	// GetPlaybookTasks request
	GetPlaybookTasksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookTasksResponse, error)

	// UpdatePlaybookTask request  with any body
	UpdatePlaybookTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookTaskResponse, error)

	// ListPlaybooks request
	ListPlaybooksWithResponse(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*ListPlaybooksResponse, error)

	// CreatePlaybook request  with any body
	CreatePlaybookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookResponse, error)

	// DeletePlaybook request
	DeletePlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookResponse, error)

	// GetPlaybook request
	GetPlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookResponse, error)

	// UpdatePlaybook request  with any body
	UpdatePlaybookWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookResponse, error)

	// ListPlaybookTasks request
	ListPlaybookTasksWithResponse(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*ListPlaybookTasksResponse, error)

	// CreatePlaybookTask request  with any body
	CreatePlaybookTaskWithBodyWithResponse(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookTaskResponse, error)

	// ListPostmortemTemplates request
	ListPostmortemTemplatesWithResponse(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*ListPostmortemTemplatesResponse, error)

	// CreatePostmortemTemplate request  with any body
	CreatePostmortemTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePostmortemTemplateResponse, error)

	// DeletePostmortemTemplate request
	DeletePostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePostmortemTemplateResponse, error)

	// GetPostmortemTemplate request
	GetPostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPostmortemTemplateResponse, error)

	// UpdatePostmortemTemplate request  with any body
	UpdatePostmortemTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePostmortemTemplateResponse, error)

	// GetIncidentPostmortem request
	GetIncidentPostmortemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentPostmortemResponse, error)

	// UpdateIncidentPostmortem request  with any body
	UpdateIncidentPostmortemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPostmortemResponse, error)

	// ListPulses request
	ListPulsesWithResponse(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*ListPulsesResponse, error)

	// CreatePulse request  with any body
	CreatePulseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePulseResponse, error)

	// GetPulse request
	GetPulseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPulseResponse, error)

	// UpdatePulse request  with any body
	UpdatePulseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePulseResponse, error)

	// ListServices request
	ListServicesWithResponse(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*ListServicesResponse, error)

	// CreateService request  with any body
	CreateServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceResponse, error)

	// DeleteService request
	DeleteServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteServiceResponse, error)

	// GetService request
	GetServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceResponse, error)

	// UpdateService request  with any body
	UpdateServiceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceResponse, error)

	// ListSeverities request
	ListSeveritiesWithResponse(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*ListSeveritiesResponse, error)

	// CreateSeverity request  with any body
	CreateSeverityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSeverityResponse, error)

	// DeleteSeverity request
	DeleteSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSeverityResponse, error)

	// GetSeverity request
	GetSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSeverityResponse, error)

	// UpdateSeverity request  with any body
	UpdateSeverityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSeverityResponse, error)

	// ListStatusPages request
	ListStatusPagesWithResponse(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*ListStatusPagesResponse, error)

	// CreateStatusPage request  with any body
	CreateStatusPageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStatusPageResponse, error)

	// DeleteStatusPage request
	DeleteStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteStatusPageResponse, error)

	// GetStatusPage request
	GetStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStatusPageResponse, error)

	// UpdateStatusPage request  with any body
	UpdateStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStatusPageResponse, error)

	// ListTeams request
	ListTeamsWithResponse(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*ListTeamsResponse, error)

	// CreateTeam request  with any body
	CreateTeamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error)

	// DeleteTeam request
	DeleteTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error)

	// GetTeam request
	GetTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTeamResponse, error)

	// UpdateTeam request  with any body
	UpdateTeamWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error)
}

type DeleteIncidentActionItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentActionItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentActionItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentActionItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentActionItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCausesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListCausesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCausesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFunctionalitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListFunctionalitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFunctionalitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MitigateIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MitigateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MitigateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResolveIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResolveIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResolveIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentActionItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentActionItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentActionItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentActionItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AttachAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AttachAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AttachAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaybookTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlaybookTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaybookTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPlaybooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPlaybooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPlaybooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPlaybookTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPlaybookTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPlaybookTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPostmortemTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPostmortemTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPostmortemTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentPostmortemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentPostmortemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentPostmortemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentPostmortemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentPostmortemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentPostmortemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPulsesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPulsesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPulsesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSeveritiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListSeveritiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSeveritiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListStatusPagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListStatusPagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListStatusPagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteIncidentActionItemWithResponse request returning *DeleteIncidentActionItemResponse
func (c *ClientWithResponses) DeleteIncidentActionItemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentActionItemResponse, error) {
	rsp, err := c.DeleteIncidentActionItem(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentActionItemResponse(rsp)
}

// GetIncidentActionItemsWithResponse request returning *GetIncidentActionItemsResponse
func (c *ClientWithResponses) GetIncidentActionItemsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentActionItemsResponse, error) {
	rsp, err := c.GetIncidentActionItems(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentActionItemsResponse(rsp)
}

// UpdateIncidentActionItemWithBodyWithResponse request with arbitrary body returning *UpdateIncidentActionItemResponse
func (c *ClientWithResponses) UpdateIncidentActionItemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentActionItemResponse, error) {
	rsp, err := c.UpdateIncidentActionItemWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentActionItemResponse(rsp)
}

// ListAlertsWithResponse request returning *ListAlertsResponse
func (c *ClientWithResponses) ListAlertsWithResponse(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*ListAlertsResponse, error) {
	rsp, err := c.ListAlerts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAlertsResponse(rsp)
}

// GetAlertWithResponse request returning *GetAlertResponse
func (c *ClientWithResponses) GetAlertWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAlertResponse, error) {
	rsp, err := c.GetAlert(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertResponse(rsp)
}

// ListCausesWithResponse request returning *ListCausesResponse
func (c *ClientWithResponses) ListCausesWithResponse(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*ListCausesResponse, error) {
	rsp, err := c.ListCauses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCausesResponse(rsp)
}

// CreateCauseWithBodyWithResponse request with arbitrary body returning *CreateCauseResponse
func (c *ClientWithResponses) CreateCauseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCauseResponse, error) {
	rsp, err := c.CreateCauseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCauseResponse(rsp)
}

// DeleteCauseWithResponse request returning *DeleteCauseResponse
func (c *ClientWithResponses) DeleteCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCauseResponse, error) {
	rsp, err := c.DeleteCause(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCauseResponse(rsp)
}

// GetCauseWithResponse request returning *GetCauseResponse
func (c *ClientWithResponses) GetCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCauseResponse, error) {
	rsp, err := c.GetCause(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCauseResponse(rsp)
}

// UpdateCauseWithBodyWithResponse request with arbitrary body returning *UpdateCauseResponse
func (c *ClientWithResponses) UpdateCauseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCauseResponse, error) {
	rsp, err := c.UpdateCauseWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCauseResponse(rsp)
}

// ListEnvironmentsWithResponse request returning *ListEnvironmentsResponse
func (c *ClientWithResponses) ListEnvironmentsWithResponse(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error) {
	rsp, err := c.ListEnvironments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEnvironmentsResponse(rsp)
}

// CreateEnvironmentWithBodyWithResponse request with arbitrary body returning *CreateEnvironmentResponse
func (c *ClientWithResponses) CreateEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

// DeleteEnvironmentWithResponse request returning *DeleteEnvironmentResponse
func (c *ClientWithResponses) DeleteEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error) {
	rsp, err := c.DeleteEnvironment(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentResponse(rsp)
}

// GetEnvironmentWithResponse request returning *GetEnvironmentResponse
func (c *ClientWithResponses) GetEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error) {
	rsp, err := c.GetEnvironment(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentResponse(rsp)
}

// UpdateEnvironmentWithBodyWithResponse request with arbitrary body returning *UpdateEnvironmentResponse
func (c *ClientWithResponses) UpdateEnvironmentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error) {
	rsp, err := c.UpdateEnvironmentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnvironmentResponse(rsp)
}

// DeleteIncidentEventWithResponse request returning *DeleteIncidentEventResponse
func (c *ClientWithResponses) DeleteIncidentEventWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentEventResponse, error) {
	rsp, err := c.DeleteIncidentEvent(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentEventResponse(rsp)
}

// GetIncidentEventsWithResponse request returning *GetIncidentEventsResponse
func (c *ClientWithResponses) GetIncidentEventsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentEventsResponse, error) {
	rsp, err := c.GetIncidentEvents(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentEventsResponse(rsp)
}

// UpdateIncidentEventWithBodyWithResponse request with arbitrary body returning *UpdateIncidentEventResponse
func (c *ClientWithResponses) UpdateIncidentEventWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentEventResponse, error) {
	rsp, err := c.UpdateIncidentEventWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentEventResponse(rsp)
}

// ListFunctionalitiesWithResponse request returning *ListFunctionalitiesResponse
func (c *ClientWithResponses) ListFunctionalitiesWithResponse(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*ListFunctionalitiesResponse, error) {
	rsp, err := c.ListFunctionalities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFunctionalitiesResponse(rsp)
}

// CreateFunctionalityWithBodyWithResponse request with arbitrary body returning *CreateFunctionalityResponse
func (c *ClientWithResponses) CreateFunctionalityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFunctionalityResponse, error) {
	rsp, err := c.CreateFunctionalityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFunctionalityResponse(rsp)
}

// DeleteFunctionalityWithResponse request returning *DeleteFunctionalityResponse
func (c *ClientWithResponses) DeleteFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFunctionalityResponse, error) {
	rsp, err := c.DeleteFunctionality(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFunctionalityResponse(rsp)
}

// GetFunctionalityWithResponse request returning *GetFunctionalityResponse
func (c *ClientWithResponses) GetFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFunctionalityResponse, error) {
	rsp, err := c.GetFunctionality(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionalityResponse(rsp)
}

// UpdateFunctionalityWithBodyWithResponse request with arbitrary body returning *UpdateFunctionalityResponse
func (c *ClientWithResponses) UpdateFunctionalityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFunctionalityResponse, error) {
	rsp, err := c.UpdateFunctionalityWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFunctionalityResponse(rsp)
}

// ListIncidentRolesWithResponse request returning *ListIncidentRolesResponse
func (c *ClientWithResponses) ListIncidentRolesWithResponse(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*ListIncidentRolesResponse, error) {
	rsp, err := c.ListIncidentRoles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentRolesResponse(rsp)
}

// CreateIncidentRoleWithBodyWithResponse request with arbitrary body returning *CreateIncidentRoleResponse
func (c *ClientWithResponses) CreateIncidentRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentRoleResponse, error) {
	rsp, err := c.CreateIncidentRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentRoleResponse(rsp)
}

// DeleteIncidentRoleWithResponse request returning *DeleteIncidentRoleResponse
func (c *ClientWithResponses) DeleteIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentRoleResponse, error) {
	rsp, err := c.DeleteIncidentRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentRoleResponse(rsp)
}

// GetIncidentRoleWithResponse request returning *GetIncidentRoleResponse
func (c *ClientWithResponses) GetIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRoleResponse, error) {
	rsp, err := c.GetIncidentRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentRoleResponse(rsp)
}

// UpdateIncidentRoleWithBodyWithResponse request with arbitrary body returning *UpdateIncidentRoleResponse
func (c *ClientWithResponses) UpdateIncidentRoleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleResponse, error) {
	rsp, err := c.UpdateIncidentRoleWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentRoleResponse(rsp)
}

// DeleteIncidentTaskWithResponse request returning *DeleteIncidentTaskResponse
func (c *ClientWithResponses) DeleteIncidentTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentTaskResponse, error) {
	rsp, err := c.DeleteIncidentTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentTaskResponse(rsp)
}

// GetIncidentTasksWithResponse request returning *GetIncidentTasksResponse
func (c *ClientWithResponses) GetIncidentTasksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentTasksResponse, error) {
	rsp, err := c.GetIncidentTasks(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentTasksResponse(rsp)
}

// UpdateIncidentTaskWithBodyWithResponse request with arbitrary body returning *UpdateIncidentTaskResponse
func (c *ClientWithResponses) UpdateIncidentTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentTaskResponse, error) {
	rsp, err := c.UpdateIncidentTaskWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentTaskResponse(rsp)
}

// ListIncidentTypesWithResponse request returning *ListIncidentTypesResponse
func (c *ClientWithResponses) ListIncidentTypesWithResponse(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*ListIncidentTypesResponse, error) {
	rsp, err := c.ListIncidentTypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentTypesResponse(rsp)
}

// CreateIncidentTypeWithBodyWithResponse request with arbitrary body returning *CreateIncidentTypeResponse
func (c *ClientWithResponses) CreateIncidentTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentTypeResponse, error) {
	rsp, err := c.CreateIncidentTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentTypeResponse(rsp)
}

// DeleteIncidentTypeWithResponse request returning *DeleteIncidentTypeResponse
func (c *ClientWithResponses) DeleteIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentTypeResponse, error) {
	rsp, err := c.DeleteIncidentType(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentTypeResponse(rsp)
}

// GetIncidentTypeWithResponse request returning *GetIncidentTypeResponse
func (c *ClientWithResponses) GetIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentTypeResponse, error) {
	rsp, err := c.GetIncidentType(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentTypeResponse(rsp)
}

// UpdateIncidentTypeWithBodyWithResponse request with arbitrary body returning *UpdateIncidentTypeResponse
func (c *ClientWithResponses) UpdateIncidentTypeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentTypeResponse, error) {
	rsp, err := c.UpdateIncidentTypeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentTypeResponse(rsp)
}

// ListIncidentsWithResponse request returning *ListIncidentsResponse
func (c *ClientWithResponses) ListIncidentsWithResponse(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*ListIncidentsResponse, error) {
	rsp, err := c.ListIncidents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentsResponse(rsp)
}

// CreateIncidentWithBodyWithResponse request with arbitrary body returning *CreateIncidentResponse
func (c *ClientWithResponses) CreateIncidentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentResponse, error) {
	rsp, err := c.CreateIncidentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentResponse(rsp)
}

// DeleteIncidentWithResponse request returning *DeleteIncidentResponse
func (c *ClientWithResponses) DeleteIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentResponse, error) {
	rsp, err := c.DeleteIncident(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentResponse(rsp)
}

// GetIncidentWithResponse request returning *GetIncidentResponse
func (c *ClientWithResponses) GetIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentResponse, error) {
	rsp, err := c.GetIncident(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentResponse(rsp)
}

// UpdateIncidentWithBodyWithResponse request with arbitrary body returning *UpdateIncidentResponse
func (c *ClientWithResponses) UpdateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentResponse, error) {
	rsp, err := c.UpdateIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentResponse(rsp)
}

// MitigateIncidentWithBodyWithResponse request with arbitrary body returning *MitigateIncidentResponse
func (c *ClientWithResponses) MitigateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MitigateIncidentResponse, error) {
	rsp, err := c.MitigateIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMitigateIncidentResponse(rsp)
}

// ResolveIncidentWithBodyWithResponse request with arbitrary body returning *ResolveIncidentResponse
func (c *ClientWithResponses) ResolveIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResolveIncidentResponse, error) {
	rsp, err := c.ResolveIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResolveIncidentResponse(rsp)
}

// ListIncidentActionItemsWithResponse request returning *ListIncidentActionItemsResponse
func (c *ClientWithResponses) ListIncidentActionItemsWithResponse(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*ListIncidentActionItemsResponse, error) {
	rsp, err := c.ListIncidentActionItems(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentActionItemsResponse(rsp)
}

// CreateIncidentActionItemWithBodyWithResponse request with arbitrary body returning *CreateIncidentActionItemResponse
func (c *ClientWithResponses) CreateIncidentActionItemWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentActionItemResponse, error) {
	rsp, err := c.CreateIncidentActionItemWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentActionItemResponse(rsp)
}

// ListAlertWithResponse request returning *ListAlertResponse
func (c *ClientWithResponses) ListAlertWithResponse(ctx context.Context, incidentId string, params *ListAlertParams, reqEditors ...RequestEditorFn) (*ListAlertResponse, error) {
	rsp, err := c.ListAlert(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAlertResponse(rsp)
}

// AttachAlertWithBodyWithResponse request with arbitrary body returning *AttachAlertResponse
func (c *ClientWithResponses) AttachAlertWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachAlertResponse, error) {
	rsp, err := c.AttachAlertWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAttachAlertResponse(rsp)
}

// ListIncidentEventsWithResponse request returning *ListIncidentEventsResponse
func (c *ClientWithResponses) ListIncidentEventsWithResponse(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*ListIncidentEventsResponse, error) {
	rsp, err := c.ListIncidentEvents(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentEventsResponse(rsp)
}

// CreateIncidentEventWithBodyWithResponse request with arbitrary body returning *CreateIncidentEventResponse
func (c *ClientWithResponses) CreateIncidentEventWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentEventResponse, error) {
	rsp, err := c.CreateIncidentEventWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentEventResponse(rsp)
}

// ListIncidentTasksWithResponse request returning *ListIncidentTasksResponse
func (c *ClientWithResponses) ListIncidentTasksWithResponse(ctx context.Context, incidentId string, params *ListIncidentTasksParams, reqEditors ...RequestEditorFn) (*ListIncidentTasksResponse, error) {
	rsp, err := c.ListIncidentTasks(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentTasksResponse(rsp)
}

// CreateIncidentTaskWithBodyWithResponse request with arbitrary body returning *CreateIncidentTaskResponse
func (c *ClientWithResponses) CreateIncidentTaskWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentTaskResponse, error) {
	rsp, err := c.CreateIncidentTaskWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentTaskResponse(rsp)
}

// DeletePlaybookTaskWithResponse request returning *DeletePlaybookTaskResponse
func (c *ClientWithResponses) DeletePlaybookTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookTaskResponse, error) {
	rsp, err := c.DeletePlaybookTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePlaybookTaskResponse(rsp)
}

// GetPlaybookTasksWithResponse request returning *GetPlaybookTasksResponse
func (c *ClientWithResponses) GetPlaybookTasksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookTasksResponse, error) {
	rsp, err := c.GetPlaybookTasks(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaybookTasksResponse(rsp)
}

// UpdatePlaybookTaskWithBodyWithResponse request with arbitrary body returning *UpdatePlaybookTaskResponse
func (c *ClientWithResponses) UpdatePlaybookTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookTaskResponse, error) {
	rsp, err := c.UpdatePlaybookTaskWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlaybookTaskResponse(rsp)
}

// ListPlaybooksWithResponse request returning *ListPlaybooksResponse
func (c *ClientWithResponses) ListPlaybooksWithResponse(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*ListPlaybooksResponse, error) {
	rsp, err := c.ListPlaybooks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPlaybooksResponse(rsp)
}

// CreatePlaybookWithBodyWithResponse request with arbitrary body returning *CreatePlaybookResponse
func (c *ClientWithResponses) CreatePlaybookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookResponse, error) {
	rsp, err := c.CreatePlaybookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlaybookResponse(rsp)
}

// DeletePlaybookWithResponse request returning *DeletePlaybookResponse
func (c *ClientWithResponses) DeletePlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookResponse, error) {
	rsp, err := c.DeletePlaybook(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePlaybookResponse(rsp)
}

// GetPlaybookWithResponse request returning *GetPlaybookResponse
func (c *ClientWithResponses) GetPlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookResponse, error) {
	rsp, err := c.GetPlaybook(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaybookResponse(rsp)
}

// UpdatePlaybookWithBodyWithResponse request with arbitrary body returning *UpdatePlaybookResponse
func (c *ClientWithResponses) UpdatePlaybookWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookResponse, error) {
	rsp, err := c.UpdatePlaybookWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlaybookResponse(rsp)
}

// ListPlaybookTasksWithResponse request returning *ListPlaybookTasksResponse
func (c *ClientWithResponses) ListPlaybookTasksWithResponse(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*ListPlaybookTasksResponse, error) {
	rsp, err := c.ListPlaybookTasks(ctx, playbookId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPlaybookTasksResponse(rsp)
}

// CreatePlaybookTaskWithBodyWithResponse request with arbitrary body returning *CreatePlaybookTaskResponse
func (c *ClientWithResponses) CreatePlaybookTaskWithBodyWithResponse(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookTaskResponse, error) {
	rsp, err := c.CreatePlaybookTaskWithBody(ctx, playbookId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlaybookTaskResponse(rsp)
}

// ListPostmortemTemplatesWithResponse request returning *ListPostmortemTemplatesResponse
func (c *ClientWithResponses) ListPostmortemTemplatesWithResponse(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*ListPostmortemTemplatesResponse, error) {
	rsp, err := c.ListPostmortemTemplates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPostmortemTemplatesResponse(rsp)
}

// CreatePostmortemTemplateWithBodyWithResponse request with arbitrary body returning *CreatePostmortemTemplateResponse
func (c *ClientWithResponses) CreatePostmortemTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePostmortemTemplateResponse, error) {
	rsp, err := c.CreatePostmortemTemplateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePostmortemTemplateResponse(rsp)
}

// DeletePostmortemTemplateWithResponse request returning *DeletePostmortemTemplateResponse
func (c *ClientWithResponses) DeletePostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePostmortemTemplateResponse, error) {
	rsp, err := c.DeletePostmortemTemplate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePostmortemTemplateResponse(rsp)
}

// GetPostmortemTemplateWithResponse request returning *GetPostmortemTemplateResponse
func (c *ClientWithResponses) GetPostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPostmortemTemplateResponse, error) {
	rsp, err := c.GetPostmortemTemplate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPostmortemTemplateResponse(rsp)
}

// UpdatePostmortemTemplateWithBodyWithResponse request with arbitrary body returning *UpdatePostmortemTemplateResponse
func (c *ClientWithResponses) UpdatePostmortemTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePostmortemTemplateResponse, error) {
	rsp, err := c.UpdatePostmortemTemplateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePostmortemTemplateResponse(rsp)
}

// GetIncidentPostmortemWithResponse request returning *GetIncidentPostmortemResponse
func (c *ClientWithResponses) GetIncidentPostmortemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentPostmortemResponse, error) {
	rsp, err := c.GetIncidentPostmortem(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentPostmortemResponse(rsp)
}

// UpdateIncidentPostmortemWithBodyWithResponse request with arbitrary body returning *UpdateIncidentPostmortemResponse
func (c *ClientWithResponses) UpdateIncidentPostmortemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPostmortemResponse, error) {
	rsp, err := c.UpdateIncidentPostmortemWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentPostmortemResponse(rsp)
}

// ListPulsesWithResponse request returning *ListPulsesResponse
func (c *ClientWithResponses) ListPulsesWithResponse(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*ListPulsesResponse, error) {
	rsp, err := c.ListPulses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPulsesResponse(rsp)
}

// CreatePulseWithBodyWithResponse request with arbitrary body returning *CreatePulseResponse
func (c *ClientWithResponses) CreatePulseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePulseResponse, error) {
	rsp, err := c.CreatePulseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePulseResponse(rsp)
}

// GetPulseWithResponse request returning *GetPulseResponse
func (c *ClientWithResponses) GetPulseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPulseResponse, error) {
	rsp, err := c.GetPulse(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPulseResponse(rsp)
}

// UpdatePulseWithBodyWithResponse request with arbitrary body returning *UpdatePulseResponse
func (c *ClientWithResponses) UpdatePulseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePulseResponse, error) {
	rsp, err := c.UpdatePulseWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePulseResponse(rsp)
}

// ListServicesWithResponse request returning *ListServicesResponse
func (c *ClientWithResponses) ListServicesWithResponse(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*ListServicesResponse, error) {
	rsp, err := c.ListServices(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListServicesResponse(rsp)
}

// CreateServiceWithBodyWithResponse request with arbitrary body returning *CreateServiceResponse
func (c *ClientWithResponses) CreateServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceResponse, error) {
	rsp, err := c.CreateServiceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceResponse(rsp)
}

// DeleteServiceWithResponse request returning *DeleteServiceResponse
func (c *ClientWithResponses) DeleteServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteServiceResponse, error) {
	rsp, err := c.DeleteService(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceResponse(rsp)
}

// GetServiceWithResponse request returning *GetServiceResponse
func (c *ClientWithResponses) GetServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceResponse, error) {
	rsp, err := c.GetService(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceResponse(rsp)
}

// UpdateServiceWithBodyWithResponse request with arbitrary body returning *UpdateServiceResponse
func (c *ClientWithResponses) UpdateServiceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceResponse, error) {
	rsp, err := c.UpdateServiceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateServiceResponse(rsp)
}

// ListSeveritiesWithResponse request returning *ListSeveritiesResponse
func (c *ClientWithResponses) ListSeveritiesWithResponse(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*ListSeveritiesResponse, error) {
	rsp, err := c.ListSeverities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSeveritiesResponse(rsp)
}

// CreateSeverityWithBodyWithResponse request with arbitrary body returning *CreateSeverityResponse
func (c *ClientWithResponses) CreateSeverityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSeverityResponse, error) {
	rsp, err := c.CreateSeverityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSeverityResponse(rsp)
}

// DeleteSeverityWithResponse request returning *DeleteSeverityResponse
func (c *ClientWithResponses) DeleteSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSeverityResponse, error) {
	rsp, err := c.DeleteSeverity(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSeverityResponse(rsp)
}

// GetSeverityWithResponse request returning *GetSeverityResponse
func (c *ClientWithResponses) GetSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSeverityResponse, error) {
	rsp, err := c.GetSeverity(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSeverityResponse(rsp)
}

// UpdateSeverityWithBodyWithResponse request with arbitrary body returning *UpdateSeverityResponse
func (c *ClientWithResponses) UpdateSeverityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSeverityResponse, error) {
	rsp, err := c.UpdateSeverityWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSeverityResponse(rsp)
}

// ListStatusPagesWithResponse request returning *ListStatusPagesResponse
func (c *ClientWithResponses) ListStatusPagesWithResponse(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*ListStatusPagesResponse, error) {
	rsp, err := c.ListStatusPages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListStatusPagesResponse(rsp)
}

// CreateStatusPageWithBodyWithResponse request with arbitrary body returning *CreateStatusPageResponse
func (c *ClientWithResponses) CreateStatusPageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStatusPageResponse, error) {
	rsp, err := c.CreateStatusPageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStatusPageResponse(rsp)
}

// DeleteStatusPageWithResponse request returning *DeleteStatusPageResponse
func (c *ClientWithResponses) DeleteStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteStatusPageResponse, error) {
	rsp, err := c.DeleteStatusPage(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStatusPageResponse(rsp)
}

// GetStatusPageWithResponse request returning *GetStatusPageResponse
func (c *ClientWithResponses) GetStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStatusPageResponse, error) {
	rsp, err := c.GetStatusPage(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusPageResponse(rsp)
}

// UpdateStatusPageWithBodyWithResponse request with arbitrary body returning *UpdateStatusPageResponse
func (c *ClientWithResponses) UpdateStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStatusPageResponse, error) {
	rsp, err := c.UpdateStatusPageWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStatusPageResponse(rsp)
}

// ListTeamsWithResponse request returning *ListTeamsResponse
func (c *ClientWithResponses) ListTeamsWithResponse(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*ListTeamsResponse, error) {
	rsp, err := c.ListTeams(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTeamsResponse(rsp)
}

// CreateTeamWithBodyWithResponse request with arbitrary body returning *CreateTeamResponse
func (c *ClientWithResponses) CreateTeamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error) {
	rsp, err := c.CreateTeamWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamResponse(rsp)
}

// DeleteTeamWithResponse request returning *DeleteTeamResponse
func (c *ClientWithResponses) DeleteTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error) {
	rsp, err := c.DeleteTeam(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamResponse(rsp)
}

// GetTeamWithResponse request returning *GetTeamResponse
func (c *ClientWithResponses) GetTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTeamResponse, error) {
	rsp, err := c.GetTeam(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamResponse(rsp)
}

// UpdateTeamWithBodyWithResponse request with arbitrary body returning *UpdateTeamResponse
func (c *ClientWithResponses) UpdateTeamWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error) {
	rsp, err := c.UpdateTeamWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamResponse(rsp)
}

// ParseDeleteIncidentActionItemResponse parses an HTTP response from a DeleteIncidentActionItemWithResponse call
func ParseDeleteIncidentActionItemResponse(rsp *http.Response) (*DeleteIncidentActionItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentActionItemsResponse parses an HTTP response from a GetIncidentActionItemsWithResponse call
func ParseGetIncidentActionItemsResponse(rsp *http.Response) (*GetIncidentActionItemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentActionItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentActionItemResponse parses an HTTP response from a UpdateIncidentActionItemWithResponse call
func ParseUpdateIncidentActionItemResponse(rsp *http.Response) (*UpdateIncidentActionItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListAlertsResponse parses an HTTP response from a ListAlertsWithResponse call
func ParseListAlertsResponse(rsp *http.Response) (*ListAlertsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetAlertResponse parses an HTTP response from a GetAlertWithResponse call
func ParseGetAlertResponse(rsp *http.Response) (*GetAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListCausesResponse parses an HTTP response from a ListCausesWithResponse call
func ParseListCausesResponse(rsp *http.Response) (*ListCausesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListCausesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateCauseResponse parses an HTTP response from a CreateCauseWithResponse call
func ParseCreateCauseResponse(rsp *http.Response) (*CreateCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteCauseResponse parses an HTTP response from a DeleteCauseWithResponse call
func ParseDeleteCauseResponse(rsp *http.Response) (*DeleteCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCauseResponse parses an HTTP response from a GetCauseWithResponse call
func ParseGetCauseResponse(rsp *http.Response) (*GetCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateCauseResponse parses an HTTP response from a UpdateCauseWithResponse call
func ParseUpdateCauseResponse(rsp *http.Response) (*UpdateCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListEnvironmentsResponse parses an HTTP response from a ListEnvironmentsWithResponse call
func ParseListEnvironmentsResponse(rsp *http.Response) (*ListEnvironmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateEnvironmentResponse parses an HTTP response from a CreateEnvironmentWithResponse call
func ParseCreateEnvironmentResponse(rsp *http.Response) (*CreateEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteEnvironmentResponse parses an HTTP response from a DeleteEnvironmentWithResponse call
func ParseDeleteEnvironmentResponse(rsp *http.Response) (*DeleteEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetEnvironmentResponse parses an HTTP response from a GetEnvironmentWithResponse call
func ParseGetEnvironmentResponse(rsp *http.Response) (*GetEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateEnvironmentResponse parses an HTTP response from a UpdateEnvironmentWithResponse call
func ParseUpdateEnvironmentResponse(rsp *http.Response) (*UpdateEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIncidentEventResponse parses an HTTP response from a DeleteIncidentEventWithResponse call
func ParseDeleteIncidentEventResponse(rsp *http.Response) (*DeleteIncidentEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentEventsResponse parses an HTTP response from a GetIncidentEventsWithResponse call
func ParseGetIncidentEventsResponse(rsp *http.Response) (*GetIncidentEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentEventResponse parses an HTTP response from a UpdateIncidentEventWithResponse call
func ParseUpdateIncidentEventResponse(rsp *http.Response) (*UpdateIncidentEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListFunctionalitiesResponse parses an HTTP response from a ListFunctionalitiesWithResponse call
func ParseListFunctionalitiesResponse(rsp *http.Response) (*ListFunctionalitiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListFunctionalitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateFunctionalityResponse parses an HTTP response from a CreateFunctionalityWithResponse call
func ParseCreateFunctionalityResponse(rsp *http.Response) (*CreateFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteFunctionalityResponse parses an HTTP response from a DeleteFunctionalityWithResponse call
func ParseDeleteFunctionalityResponse(rsp *http.Response) (*DeleteFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetFunctionalityResponse parses an HTTP response from a GetFunctionalityWithResponse call
func ParseGetFunctionalityResponse(rsp *http.Response) (*GetFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateFunctionalityResponse parses an HTTP response from a UpdateFunctionalityWithResponse call
func ParseUpdateFunctionalityResponse(rsp *http.Response) (*UpdateFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentRolesResponse parses an HTTP response from a ListIncidentRolesWithResponse call
func ParseListIncidentRolesResponse(rsp *http.Response) (*ListIncidentRolesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentRoleResponse parses an HTTP response from a CreateIncidentRoleWithResponse call
func ParseCreateIncidentRoleResponse(rsp *http.Response) (*CreateIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIncidentRoleResponse parses an HTTP response from a DeleteIncidentRoleWithResponse call
func ParseDeleteIncidentRoleResponse(rsp *http.Response) (*DeleteIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentRoleResponse parses an HTTP response from a GetIncidentRoleWithResponse call
func ParseGetIncidentRoleResponse(rsp *http.Response) (*GetIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentRoleResponse parses an HTTP response from a UpdateIncidentRoleWithResponse call
func ParseUpdateIncidentRoleResponse(rsp *http.Response) (*UpdateIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIncidentTaskResponse parses an HTTP response from a DeleteIncidentTaskWithResponse call
func ParseDeleteIncidentTaskResponse(rsp *http.Response) (*DeleteIncidentTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentTasksResponse parses an HTTP response from a GetIncidentTasksWithResponse call
func ParseGetIncidentTasksResponse(rsp *http.Response) (*GetIncidentTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentTaskResponse parses an HTTP response from a UpdateIncidentTaskWithResponse call
func ParseUpdateIncidentTaskResponse(rsp *http.Response) (*UpdateIncidentTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentTypesResponse parses an HTTP response from a ListIncidentTypesWithResponse call
func ParseListIncidentTypesResponse(rsp *http.Response) (*ListIncidentTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentTypeResponse parses an HTTP response from a CreateIncidentTypeWithResponse call
func ParseCreateIncidentTypeResponse(rsp *http.Response) (*CreateIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIncidentTypeResponse parses an HTTP response from a DeleteIncidentTypeWithResponse call
func ParseDeleteIncidentTypeResponse(rsp *http.Response) (*DeleteIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentTypeResponse parses an HTTP response from a GetIncidentTypeWithResponse call
func ParseGetIncidentTypeResponse(rsp *http.Response) (*GetIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentTypeResponse parses an HTTP response from a UpdateIncidentTypeWithResponse call
func ParseUpdateIncidentTypeResponse(rsp *http.Response) (*UpdateIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentsResponse parses an HTTP response from a ListIncidentsWithResponse call
func ParseListIncidentsResponse(rsp *http.Response) (*ListIncidentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentResponse parses an HTTP response from a CreateIncidentWithResponse call
func ParseCreateIncidentResponse(rsp *http.Response) (*CreateIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIncidentResponse parses an HTTP response from a DeleteIncidentWithResponse call
func ParseDeleteIncidentResponse(rsp *http.Response) (*DeleteIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentResponse parses an HTTP response from a GetIncidentWithResponse call
func ParseGetIncidentResponse(rsp *http.Response) (*GetIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentResponse parses an HTTP response from a UpdateIncidentWithResponse call
func ParseUpdateIncidentResponse(rsp *http.Response) (*UpdateIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseMitigateIncidentResponse parses an HTTP response from a MitigateIncidentWithResponse call
func ParseMitigateIncidentResponse(rsp *http.Response) (*MitigateIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &MitigateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseResolveIncidentResponse parses an HTTP response from a ResolveIncidentWithResponse call
func ParseResolveIncidentResponse(rsp *http.Response) (*ResolveIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ResolveIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentActionItemsResponse parses an HTTP response from a ListIncidentActionItemsWithResponse call
func ParseListIncidentActionItemsResponse(rsp *http.Response) (*ListIncidentActionItemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentActionItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentActionItemResponse parses an HTTP response from a CreateIncidentActionItemWithResponse call
func ParseCreateIncidentActionItemResponse(rsp *http.Response) (*CreateIncidentActionItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListAlertResponse parses an HTTP response from a ListAlertWithResponse call
func ParseListAlertResponse(rsp *http.Response) (*ListAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseAttachAlertResponse parses an HTTP response from a AttachAlertWithResponse call
func ParseAttachAlertResponse(rsp *http.Response) (*AttachAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AttachAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentEventsResponse parses an HTTP response from a ListIncidentEventsWithResponse call
func ParseListIncidentEventsResponse(rsp *http.Response) (*ListIncidentEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentEventResponse parses an HTTP response from a CreateIncidentEventWithResponse call
func ParseCreateIncidentEventResponse(rsp *http.Response) (*CreateIncidentEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListIncidentTasksResponse parses an HTTP response from a ListIncidentTasksWithResponse call
func ParseListIncidentTasksResponse(rsp *http.Response) (*ListIncidentTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateIncidentTaskResponse parses an HTTP response from a CreateIncidentTaskWithResponse call
func ParseCreateIncidentTaskResponse(rsp *http.Response) (*CreateIncidentTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeletePlaybookTaskResponse parses an HTTP response from a DeletePlaybookTaskWithResponse call
func ParseDeletePlaybookTaskResponse(rsp *http.Response) (*DeletePlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPlaybookTasksResponse parses an HTTP response from a GetPlaybookTasksWithResponse call
func ParseGetPlaybookTasksResponse(rsp *http.Response) (*GetPlaybookTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPlaybookTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdatePlaybookTaskResponse parses an HTTP response from a UpdatePlaybookTaskWithResponse call
func ParseUpdatePlaybookTaskResponse(rsp *http.Response) (*UpdatePlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListPlaybooksResponse parses an HTTP response from a ListPlaybooksWithResponse call
func ParseListPlaybooksResponse(rsp *http.Response) (*ListPlaybooksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListPlaybooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreatePlaybookResponse parses an HTTP response from a CreatePlaybookWithResponse call
func ParseCreatePlaybookResponse(rsp *http.Response) (*CreatePlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeletePlaybookResponse parses an HTTP response from a DeletePlaybookWithResponse call
func ParseDeletePlaybookResponse(rsp *http.Response) (*DeletePlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPlaybookResponse parses an HTTP response from a GetPlaybookWithResponse call
func ParseGetPlaybookResponse(rsp *http.Response) (*GetPlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdatePlaybookResponse parses an HTTP response from a UpdatePlaybookWithResponse call
func ParseUpdatePlaybookResponse(rsp *http.Response) (*UpdatePlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListPlaybookTasksResponse parses an HTTP response from a ListPlaybookTasksWithResponse call
func ParseListPlaybookTasksResponse(rsp *http.Response) (*ListPlaybookTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListPlaybookTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreatePlaybookTaskResponse parses an HTTP response from a CreatePlaybookTaskWithResponse call
func ParseCreatePlaybookTaskResponse(rsp *http.Response) (*CreatePlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListPostmortemTemplatesResponse parses an HTTP response from a ListPostmortemTemplatesWithResponse call
func ParseListPostmortemTemplatesResponse(rsp *http.Response) (*ListPostmortemTemplatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListPostmortemTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreatePostmortemTemplateResponse parses an HTTP response from a CreatePostmortemTemplateWithResponse call
func ParseCreatePostmortemTemplateResponse(rsp *http.Response) (*CreatePostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeletePostmortemTemplateResponse parses an HTTP response from a DeletePostmortemTemplateWithResponse call
func ParseDeletePostmortemTemplateResponse(rsp *http.Response) (*DeletePostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPostmortemTemplateResponse parses an HTTP response from a GetPostmortemTemplateWithResponse call
func ParseGetPostmortemTemplateResponse(rsp *http.Response) (*GetPostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdatePostmortemTemplateResponse parses an HTTP response from a UpdatePostmortemTemplateWithResponse call
func ParseUpdatePostmortemTemplateResponse(rsp *http.Response) (*UpdatePostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdatePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIncidentPostmortemResponse parses an HTTP response from a GetIncidentPostmortemWithResponse call
func ParseGetIncidentPostmortemResponse(rsp *http.Response) (*GetIncidentPostmortemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentPostmortemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateIncidentPostmortemResponse parses an HTTP response from a UpdateIncidentPostmortemWithResponse call
func ParseUpdateIncidentPostmortemResponse(rsp *http.Response) (*UpdateIncidentPostmortemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentPostmortemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListPulsesResponse parses an HTTP response from a ListPulsesWithResponse call
func ParseListPulsesResponse(rsp *http.Response) (*ListPulsesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListPulsesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreatePulseResponse parses an HTTP response from a CreatePulseWithResponse call
func ParseCreatePulseResponse(rsp *http.Response) (*CreatePulseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatePulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPulseResponse parses an HTTP response from a GetPulseWithResponse call
func ParseGetPulseResponse(rsp *http.Response) (*GetPulseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdatePulseResponse parses an HTTP response from a UpdatePulseWithResponse call
func ParseUpdatePulseResponse(rsp *http.Response) (*UpdatePulseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdatePulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListServicesResponse parses an HTTP response from a ListServicesWithResponse call
func ParseListServicesResponse(rsp *http.Response) (*ListServicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateServiceResponse parses an HTTP response from a CreateServiceWithResponse call
func ParseCreateServiceResponse(rsp *http.Response) (*CreateServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteServiceResponse parses an HTTP response from a DeleteServiceWithResponse call
func ParseDeleteServiceResponse(rsp *http.Response) (*DeleteServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetServiceResponse parses an HTTP response from a GetServiceWithResponse call
func ParseGetServiceResponse(rsp *http.Response) (*GetServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateServiceResponse parses an HTTP response from a UpdateServiceWithResponse call
func ParseUpdateServiceResponse(rsp *http.Response) (*UpdateServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListSeveritiesResponse parses an HTTP response from a ListSeveritiesWithResponse call
func ParseListSeveritiesResponse(rsp *http.Response) (*ListSeveritiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSeveritiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateSeverityResponse parses an HTTP response from a CreateSeverityWithResponse call
func ParseCreateSeverityResponse(rsp *http.Response) (*CreateSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteSeverityResponse parses an HTTP response from a DeleteSeverityWithResponse call
func ParseDeleteSeverityResponse(rsp *http.Response) (*DeleteSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSeverityResponse parses an HTTP response from a GetSeverityWithResponse call
func ParseGetSeverityResponse(rsp *http.Response) (*GetSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateSeverityResponse parses an HTTP response from a UpdateSeverityWithResponse call
func ParseUpdateSeverityResponse(rsp *http.Response) (*UpdateSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListStatusPagesResponse parses an HTTP response from a ListStatusPagesWithResponse call
func ParseListStatusPagesResponse(rsp *http.Response) (*ListStatusPagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListStatusPagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateStatusPageResponse parses an HTTP response from a CreateStatusPageWithResponse call
func ParseCreateStatusPageResponse(rsp *http.Response) (*CreateStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteStatusPageResponse parses an HTTP response from a DeleteStatusPageWithResponse call
func ParseDeleteStatusPageResponse(rsp *http.Response) (*DeleteStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetStatusPageResponse parses an HTTP response from a GetStatusPageWithResponse call
func ParseGetStatusPageResponse(rsp *http.Response) (*GetStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateStatusPageResponse parses an HTTP response from a UpdateStatusPageWithResponse call
func ParseUpdateStatusPageResponse(rsp *http.Response) (*UpdateStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListTeamsResponse parses an HTTP response from a ListTeamsWithResponse call
func ParseListTeamsResponse(rsp *http.Response) (*ListTeamsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateTeamResponse parses an HTTP response from a CreateTeamWithResponse call
func ParseCreateTeamResponse(rsp *http.Response) (*CreateTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteTeamResponse parses an HTTP response from a DeleteTeamWithResponse call
func ParseDeleteTeamResponse(rsp *http.Response) (*DeleteTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetTeamResponse parses an HTTP response from a GetTeamWithResponse call
func ParseGetTeamResponse(rsp *http.Response) (*GetTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateTeamResponse parses an HTTP response from a UpdateTeamWithResponse call
func ParseUpdateTeamResponse(rsp *http.Response) (*UpdateTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete a incident action item
	// (DELETE /v1/action_items/{id})
	DeleteIncidentActionItem(ctx echo.Context, id string) error
	// Retrieves a incident action item
	// (GET /v1/action_items/{id})
	GetIncidentActionItems(ctx echo.Context, id string) error
	// Update a incident action item
	// (PUT /v1/action_items/{id})
	UpdateIncidentActionItem(ctx echo.Context, id string) error
	// List alerts
	// (GET /v1/alerts)
	ListAlerts(ctx echo.Context, params ListAlertsParams) error
	// Retrieves a alert
	// (GET /v1/alerts/{id})
	GetAlert(ctx echo.Context, id string) error
	// List causes
	// (GET /v1/causes)
	ListCauses(ctx echo.Context, params ListCausesParams) error
	// Creates a cause
	// (POST /v1/causes)
	CreateCause(ctx echo.Context) error
	// Delete a cause
	// (DELETE /v1/causes/{id})
	DeleteCause(ctx echo.Context, id string) error
	// Retrieves a cause
	// (GET /v1/causes/{id})
	GetCause(ctx echo.Context, id string) error
	// Update a cause
	// (PUT /v1/causes/{id})
	UpdateCause(ctx echo.Context, id string) error
	// List environments
	// (GET /v1/environments)
	ListEnvironments(ctx echo.Context, params ListEnvironmentsParams) error
	// Creates a environment
	// (POST /v1/environments)
	CreateEnvironment(ctx echo.Context) error
	// Delete a environment
	// (DELETE /v1/environments/{id})
	DeleteEnvironment(ctx echo.Context, id string) error
	// Retrieves a environment
	// (GET /v1/environments/{id})
	GetEnvironment(ctx echo.Context, id string) error
	// Update a environment
	// (PUT /v1/environments/{id})
	UpdateEnvironment(ctx echo.Context, id string) error
	// Delete a incident event
	// (DELETE /v1/events/{id})
	DeleteIncidentEvent(ctx echo.Context, id string) error
	// Retrieves a incident event
	// (GET /v1/events/{id})
	GetIncidentEvents(ctx echo.Context, id string) error
	// Update a incident event
	// (PUT /v1/events/{id})
	UpdateIncidentEvent(ctx echo.Context, id string) error
	// List functionalities
	// (GET /v1/functionalities)
	ListFunctionalities(ctx echo.Context, params ListFunctionalitiesParams) error
	// Creates a functionality
	// (POST /v1/functionalities)
	CreateFunctionality(ctx echo.Context) error
	// Delete a functionality
	// (DELETE /v1/functionalities/{id})
	DeleteFunctionality(ctx echo.Context, id string) error
	// Retrieves a functionality
	// (GET /v1/functionalities/{id})
	GetFunctionality(ctx echo.Context, id string) error
	// Update a functionality
	// (PUT /v1/functionalities/{id})
	UpdateFunctionality(ctx echo.Context, id string) error
	// List incident roles
	// (GET /v1/incident_roles)
	ListIncidentRoles(ctx echo.Context, params ListIncidentRolesParams) error
	// Creates a incident role
	// (POST /v1/incident_roles)
	CreateIncidentRole(ctx echo.Context) error
	// Delete a incident role
	// (DELETE /v1/incident_roles/{id})
	DeleteIncidentRole(ctx echo.Context, id string) error
	// Retrieves a incident role
	// (GET /v1/incident_roles/{id})
	GetIncidentRole(ctx echo.Context, id string) error
	// Update a incident role
	// (PUT /v1/incident_roles/{id})
	UpdateIncidentRole(ctx echo.Context, id string) error
	// Delete a incident task
	// (DELETE /v1/incident_tasks/{id})
	DeleteIncidentTask(ctx echo.Context, id string) error
	// Retrieves a incident task
	// (GET /v1/incident_tasks/{id})
	GetIncidentTasks(ctx echo.Context, id string) error
	// Update a incident task
	// (PUT /v1/incident_tasks/{id})
	UpdateIncidentTask(ctx echo.Context, id string) error
	// List incident_types
	// (GET /v1/incident_types)
	ListIncidentTypes(ctx echo.Context, params ListIncidentTypesParams) error
	// Creates a incident_type
	// (POST /v1/incident_types)
	CreateIncidentType(ctx echo.Context) error
	// Delete a incident_type
	// (DELETE /v1/incident_types/{id})
	DeleteIncidentType(ctx echo.Context, id string) error
	// Retrieves a incident_type
	// (GET /v1/incident_types/{id})
	GetIncidentType(ctx echo.Context, id string) error
	// Update a incident_type
	// (PUT /v1/incident_types/{id})
	UpdateIncidentType(ctx echo.Context, id string) error
	// List incidents
	// (GET /v1/incidents)
	ListIncidents(ctx echo.Context, params ListIncidentsParams) error
	// Creates a incident
	// (POST /v1/incidents)
	CreateIncident(ctx echo.Context) error
	// Delete a incident
	// (DELETE /v1/incidents/{id})
	DeleteIncident(ctx echo.Context, id string) error
	// Retrieves a incident
	// (GET /v1/incidents/{id})
	GetIncident(ctx echo.Context, id string) error
	// Update a incident
	// (PUT /v1/incidents/{id})
	UpdateIncident(ctx echo.Context, id string) error
	// Mitigate an incident
	// (PUT /v1/incidents/{id}/mitigate)
	MitigateIncident(ctx echo.Context, id string) error
	// Resolve an incident
	// (PUT /v1/incidents/{id}/resolve)
	ResolveIncident(ctx echo.Context, id string) error
	// List incident action items
	// (GET /v1/incidents/{incident_id}/action_items)
	ListIncidentActionItems(ctx echo.Context, incidentId string, params ListIncidentActionItemsParams) error
	// Creates a incident action item
	// (POST /v1/incidents/{incident_id}/action_items)
	CreateIncidentActionItem(ctx echo.Context, incidentId string) error
	// List alerts
	// (GET /v1/incidents/{incident_id}/alerts)
	ListAlert(ctx echo.Context, incidentId string, params ListAlertParams) error
	// Attach alerts to an incident
	// (POST /v1/incidents/{incident_id}/alerts)
	AttachAlert(ctx echo.Context, incidentId string) error
	// List incident events
	// (GET /v1/incidents/{incident_id}/events)
	ListIncidentEvents(ctx echo.Context, incidentId string, params ListIncidentEventsParams) error
	// Creates a incident event
	// (POST /v1/incidents/{incident_id}/events)
	CreateIncidentEvent(ctx echo.Context, incidentId string) error
	// List incident tasks
	// (GET /v1/incidents/{incident_id}/incident_tasks)
	ListIncidentTasks(ctx echo.Context, incidentId string, params ListIncidentTasksParams) error
	// Creates a incident task
	// (POST /v1/incidents/{incident_id}/incident_tasks)
	CreateIncidentTask(ctx echo.Context, incidentId string) error
	// Delete a playbook task
	// (DELETE /v1/playbook_tasks/{id})
	DeletePlaybookTask(ctx echo.Context, id string) error
	// Retrieves a playbook task
	// (GET /v1/playbook_tasks/{id})
	GetPlaybookTasks(ctx echo.Context, id string) error
	// Update a playbook task
	// (PUT /v1/playbook_tasks/{id})
	UpdatePlaybookTask(ctx echo.Context, id string) error
	// List playbooks
	// (GET /v1/playbooks)
	ListPlaybooks(ctx echo.Context, params ListPlaybooksParams) error
	// Creates a playbook
	// (POST /v1/playbooks)
	CreatePlaybook(ctx echo.Context) error
	// Delete a playbook
	// (DELETE /v1/playbooks/{id})
	DeletePlaybook(ctx echo.Context, id string) error
	// Retrieves a playbook
	// (GET /v1/playbooks/{id})
	GetPlaybook(ctx echo.Context, id string) error
	// Update a playbook
	// (PUT /v1/playbooks/{id})
	UpdatePlaybook(ctx echo.Context, id string) error
	// List playbook tasks
	// (GET /v1/playbooks/{playbook_id}/playbook_tasks)
	ListPlaybookTasks(ctx echo.Context, playbookId string, params ListPlaybookTasksParams) error
	// Creates a playbook task
	// (POST /v1/playbooks/{playbook_id}/playbook_tasks)
	CreatePlaybookTask(ctx echo.Context, playbookId string) error
	// List Postmortem Templates
	// (GET /v1/post_mortem_templates)
	ListPostmortemTemplates(ctx echo.Context, params ListPostmortemTemplatesParams) error
	// Creates a postmortem template
	// (POST /v1/post_mortem_templates)
	CreatePostmortemTemplate(ctx echo.Context) error
	// Delete a Postmortem Template
	// (DELETE /v1/post_mortem_templates/{id})
	DeletePostmortemTemplate(ctx echo.Context, id string) error
	// Retrieves a Postmortem Template
	// (GET /v1/post_mortem_templates/{id})
	GetPostmortemTemplate(ctx echo.Context, id string) error
	// Update a Postmortem Template
	// (PUT /v1/post_mortem_templates/{id})
	UpdatePostmortemTemplate(ctx echo.Context, id string) error
	// Retrieves a incident postmortem
	// (GET /v1/post_mortems/{id})
	GetIncidentPostmortem(ctx echo.Context, id string) error
	// Update a incident postmortem
	// (PUT /v1/post_mortems/{id})
	UpdateIncidentPostmortem(ctx echo.Context, id string) error
	// List pulses
	// (GET /v1/pulses)
	ListPulses(ctx echo.Context, params ListPulsesParams) error
	// Creates a pulse
	// (POST /v1/pulses)
	CreatePulse(ctx echo.Context) error
	// Retrieves a pulse
	// (GET /v1/pulses/{id})
	GetPulse(ctx echo.Context, id string) error
	// Update a pulse
	// (PUT /v1/pulses/{id})
	UpdatePulse(ctx echo.Context, id string) error
	// List services
	// (GET /v1/services)
	ListServices(ctx echo.Context, params ListServicesParams) error
	// Creates a service
	// (POST /v1/services)
	CreateService(ctx echo.Context) error
	// Delete a service
	// (DELETE /v1/services/{id})
	DeleteService(ctx echo.Context, id string) error
	// Retrieves a service
	// (GET /v1/services/{id})
	GetService(ctx echo.Context, id string) error
	// Update a service
	// (PUT /v1/services/{id})
	UpdateService(ctx echo.Context, id string) error
	// List severities
	// (GET /v1/severities)
	ListSeverities(ctx echo.Context, params ListSeveritiesParams) error
	// Creates a severity
	// (POST /v1/severities)
	CreateSeverity(ctx echo.Context) error
	// Delete a severity
	// (DELETE /v1/severities/{id})
	DeleteSeverity(ctx echo.Context, id string) error
	// Retrieves a severity
	// (GET /v1/severities/{id})
	GetSeverity(ctx echo.Context, id string) error
	// Update a severity
	// (PUT /v1/severities/{id})
	UpdateSeverity(ctx echo.Context, id string) error
	// List public status pages
	// (GET /v1/status-pages)
	ListStatusPages(ctx echo.Context, params ListStatusPagesParams) error
	// Creates a public status page
	// (POST /v1/status-pages)
	CreateStatusPage(ctx echo.Context) error
	// Delete a public status page
	// (DELETE /v1/status-pages/{id})
	DeleteStatusPage(ctx echo.Context, id string) error
	// Retrieves a public status page
	// (GET /v1/status-pages/{id})
	GetStatusPage(ctx echo.Context, id string) error
	// Update a public status page
	// (PUT /v1/status-pages/{id})
	UpdateStatusPage(ctx echo.Context, id string) error
	// List teams
	// (GET /v1/teams)
	ListTeams(ctx echo.Context, params ListTeamsParams) error
	// Creates a team
	// (POST /v1/teams)
	CreateTeam(ctx echo.Context) error
	// Delete a team
	// (DELETE /v1/teams/{id})
	DeleteTeam(ctx echo.Context, id string) error
	// Retrieves a team
	// (GET /v1/teams/{id})
	GetTeam(ctx echo.Context, id string) error
	// Update a team
	// (PUT /v1/teams/{id})
	UpdateTeam(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteIncidentActionItem converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentActionItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentActionItem(ctx, id)
	return err
}

// GetIncidentActionItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentActionItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentActionItems(ctx, id)
	return err
}

// UpdateIncidentActionItem converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentActionItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentActionItem(ctx, id)
	return err
}

// ListAlerts converts echo context to params.
func (w *ServerInterfaceWrapper) ListAlerts(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAlertsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAlerts(ctx, params)
	return err
}

// GetAlert converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlert(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAlert(ctx, id)
	return err
}

// ListCauses converts echo context to params.
func (w *ServerInterfaceWrapper) ListCauses(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCausesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListCauses(ctx, params)
	return err
}

// CreateCause converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCause(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCause(ctx)
	return err
}

// DeleteCause converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCause(ctx, id)
	return err
}

// GetCause converts echo context to params.
func (w *ServerInterfaceWrapper) GetCause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCause(ctx, id)
	return err
}

// UpdateCause converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCause(ctx, id)
	return err
}

// ListEnvironments converts echo context to params.
func (w *ServerInterfaceWrapper) ListEnvironments(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEnvironmentsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListEnvironments(ctx, params)
	return err
}

// CreateEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) CreateEnvironment(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateEnvironment(ctx)
	return err
}

// DeleteEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEnvironment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteEnvironment(ctx, id)
	return err
}

// GetEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnvironment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnvironment(ctx, id)
	return err
}

// UpdateEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateEnvironment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateEnvironment(ctx, id)
	return err
}

// DeleteIncidentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentEvent(ctx, id)
	return err
}

// GetIncidentEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentEvents(ctx, id)
	return err
}

// UpdateIncidentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentEvent(ctx, id)
	return err
}

// ListFunctionalities converts echo context to params.
func (w *ServerInterfaceWrapper) ListFunctionalities(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFunctionalitiesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListFunctionalities(ctx, params)
	return err
}

// CreateFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFunctionality(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateFunctionality(ctx)
	return err
}

// DeleteFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFunctionality(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteFunctionality(ctx, id)
	return err
}

// GetFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) GetFunctionality(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFunctionality(ctx, id)
	return err
}

// UpdateFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateFunctionality(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateFunctionality(ctx, id)
	return err
}

// ListIncidentRoles converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentRoles(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentRolesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentRoles(ctx, params)
	return err
}

// CreateIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentRole(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentRole(ctx)
	return err
}

// DeleteIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentRole(ctx, id)
	return err
}

// GetIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentRole(ctx, id)
	return err
}

// UpdateIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentRole(ctx, id)
	return err
}

// DeleteIncidentTask converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentTask(ctx, id)
	return err
}

// GetIncidentTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentTasks(ctx, id)
	return err
}

// UpdateIncidentTask converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentTask(ctx, id)
	return err
}

// ListIncidentTypes converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentTypes(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentTypesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentTypes(ctx, params)
	return err
}

// CreateIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentType(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentType(ctx)
	return err
}

// DeleteIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentType(ctx, id)
	return err
}

// GetIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentType(ctx, id)
	return err
}

// UpdateIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentType(ctx, id)
	return err
}

// ListIncidents converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidents(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidents(ctx, params)
	return err
}

// CreateIncident converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncident(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncident(ctx)
	return err
}

// DeleteIncident converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncident(ctx, id)
	return err
}

// GetIncident converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncident(ctx, id)
	return err
}

// UpdateIncident converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncident(ctx, id)
	return err
}

// MitigateIncident converts echo context to params.
func (w *ServerInterfaceWrapper) MitigateIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MitigateIncident(ctx, id)
	return err
}

// ResolveIncident converts echo context to params.
func (w *ServerInterfaceWrapper) ResolveIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ResolveIncident(ctx, id)
	return err
}

// ListIncidentActionItems converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentActionItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentActionItemsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentActionItems(ctx, incidentId, params)
	return err
}

// CreateIncidentActionItem converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentActionItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentActionItem(ctx, incidentId)
	return err
}

// ListAlert converts echo context to params.
func (w *ServerInterfaceWrapper) ListAlert(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAlertParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAlert(ctx, incidentId, params)
	return err
}

// AttachAlert converts echo context to params.
func (w *ServerInterfaceWrapper) AttachAlert(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AttachAlert(ctx, incidentId)
	return err
}

// ListIncidentEvents converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentEventsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentEvents(ctx, incidentId, params)
	return err
}

// CreateIncidentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentEvent(ctx, incidentId)
	return err
}

// ListIncidentTasks converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentTasksParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentTasks(ctx, incidentId, params)
	return err
}

// CreateIncidentTask converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentTask(ctx, incidentId)
	return err
}

// DeletePlaybookTask converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePlaybookTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePlaybookTask(ctx, id)
	return err
}

// GetPlaybookTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlaybookTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlaybookTasks(ctx, id)
	return err
}

// UpdatePlaybookTask converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePlaybookTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePlaybookTask(ctx, id)
	return err
}

// ListPlaybooks converts echo context to params.
func (w *ServerInterfaceWrapper) ListPlaybooks(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPlaybooksParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPlaybooks(ctx, params)
	return err
}

// CreatePlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePlaybook(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePlaybook(ctx)
	return err
}

// DeletePlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePlaybook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePlaybook(ctx, id)
	return err
}

// GetPlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlaybook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlaybook(ctx, id)
	return err
}

// UpdatePlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePlaybook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePlaybook(ctx, id)
	return err
}

// ListPlaybookTasks converts echo context to params.
func (w *ServerInterfaceWrapper) ListPlaybookTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "playbook_id" -------------
	var playbookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "playbook_id", runtime.ParamLocationPath, ctx.Param("playbook_id"), &playbookId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter playbook_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPlaybookTasksParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPlaybookTasks(ctx, playbookId, params)
	return err
}

// CreatePlaybookTask converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePlaybookTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "playbook_id" -------------
	var playbookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "playbook_id", runtime.ParamLocationPath, ctx.Param("playbook_id"), &playbookId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter playbook_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePlaybookTask(ctx, playbookId)
	return err
}

// ListPostmortemTemplates converts echo context to params.
func (w *ServerInterfaceWrapper) ListPostmortemTemplates(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPostmortemTemplatesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPostmortemTemplates(ctx, params)
	return err
}

// CreatePostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePostmortemTemplate(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePostmortemTemplate(ctx)
	return err
}

// DeletePostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePostmortemTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePostmortemTemplate(ctx, id)
	return err
}

// GetPostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostmortemTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPostmortemTemplate(ctx, id)
	return err
}

// UpdatePostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePostmortemTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePostmortemTemplate(ctx, id)
	return err
}

// GetIncidentPostmortem converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentPostmortem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentPostmortem(ctx, id)
	return err
}

// UpdateIncidentPostmortem converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentPostmortem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentPostmortem(ctx, id)
	return err
}

// ListPulses converts echo context to params.
func (w *ServerInterfaceWrapper) ListPulses(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPulsesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPulses(ctx, params)
	return err
}

// CreatePulse converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePulse(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePulse(ctx)
	return err
}

// GetPulse converts echo context to params.
func (w *ServerInterfaceWrapper) GetPulse(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPulse(ctx, id)
	return err
}

// UpdatePulse converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePulse(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePulse(ctx, id)
	return err
}

// ListServices converts echo context to params.
func (w *ServerInterfaceWrapper) ListServices(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListServicesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListServices(ctx, params)
	return err
}

// CreateService converts echo context to params.
func (w *ServerInterfaceWrapper) CreateService(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateService(ctx)
	return err
}

// DeleteService converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteService(ctx, id)
	return err
}

// GetService converts echo context to params.
func (w *ServerInterfaceWrapper) GetService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetService(ctx, id)
	return err
}

// UpdateService converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateService(ctx, id)
	return err
}

// ListSeverities converts echo context to params.
func (w *ServerInterfaceWrapper) ListSeverities(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSeveritiesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListSeverities(ctx, params)
	return err
}

// CreateSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSeverity(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSeverity(ctx)
	return err
}

// DeleteSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSeverity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSeverity(ctx, id)
	return err
}

// GetSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) GetSeverity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSeverity(ctx, id)
	return err
}

// UpdateSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSeverity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateSeverity(ctx, id)
	return err
}

// ListStatusPages converts echo context to params.
func (w *ServerInterfaceWrapper) ListStatusPages(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListStatusPagesParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListStatusPages(ctx, params)
	return err
}

// CreateStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) CreateStatusPage(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateStatusPage(ctx)
	return err
}

// DeleteStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteStatusPage(ctx, id)
	return err
}

// GetStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatusPage(ctx, id)
	return err
}

// UpdateStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateStatusPage(ctx, id)
	return err
}

// ListTeams converts echo context to params.
func (w *ServerInterfaceWrapper) ListTeams(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTeamsParams
	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTeams(ctx, params)
	return err
}

// CreateTeam converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTeam(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTeam(ctx)
	return err
}

// DeleteTeam converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTeam(ctx, id)
	return err
}

// GetTeam converts echo context to params.
func (w *ServerInterfaceWrapper) GetTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTeam(ctx, id)
	return err
}

// UpdateTeam converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTeam(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v1/action_items/:id", wrapper.DeleteIncidentActionItem)
	router.GET(baseURL+"/v1/action_items/:id", wrapper.GetIncidentActionItems)
	router.PUT(baseURL+"/v1/action_items/:id", wrapper.UpdateIncidentActionItem)
	router.GET(baseURL+"/v1/alerts", wrapper.ListAlerts)
	router.GET(baseURL+"/v1/alerts/:id", wrapper.GetAlert)
	router.GET(baseURL+"/v1/causes", wrapper.ListCauses)
	router.POST(baseURL+"/v1/causes", wrapper.CreateCause)
	router.DELETE(baseURL+"/v1/causes/:id", wrapper.DeleteCause)
	router.GET(baseURL+"/v1/causes/:id", wrapper.GetCause)
	router.PUT(baseURL+"/v1/causes/:id", wrapper.UpdateCause)
	router.GET(baseURL+"/v1/environments", wrapper.ListEnvironments)
	router.POST(baseURL+"/v1/environments", wrapper.CreateEnvironment)
	router.DELETE(baseURL+"/v1/environments/:id", wrapper.DeleteEnvironment)
	router.GET(baseURL+"/v1/environments/:id", wrapper.GetEnvironment)
	router.PUT(baseURL+"/v1/environments/:id", wrapper.UpdateEnvironment)
	router.DELETE(baseURL+"/v1/events/:id", wrapper.DeleteIncidentEvent)
	router.GET(baseURL+"/v1/events/:id", wrapper.GetIncidentEvents)
	router.PUT(baseURL+"/v1/events/:id", wrapper.UpdateIncidentEvent)
	router.GET(baseURL+"/v1/functionalities", wrapper.ListFunctionalities)
	router.POST(baseURL+"/v1/functionalities", wrapper.CreateFunctionality)
	router.DELETE(baseURL+"/v1/functionalities/:id", wrapper.DeleteFunctionality)
	router.GET(baseURL+"/v1/functionalities/:id", wrapper.GetFunctionality)
	router.PUT(baseURL+"/v1/functionalities/:id", wrapper.UpdateFunctionality)
	router.GET(baseURL+"/v1/incident_roles", wrapper.ListIncidentRoles)
	router.POST(baseURL+"/v1/incident_roles", wrapper.CreateIncidentRole)
	router.DELETE(baseURL+"/v1/incident_roles/:id", wrapper.DeleteIncidentRole)
	router.GET(baseURL+"/v1/incident_roles/:id", wrapper.GetIncidentRole)
	router.PUT(baseURL+"/v1/incident_roles/:id", wrapper.UpdateIncidentRole)
	router.DELETE(baseURL+"/v1/incident_tasks/:id", wrapper.DeleteIncidentTask)
	router.GET(baseURL+"/v1/incident_tasks/:id", wrapper.GetIncidentTasks)
	router.PUT(baseURL+"/v1/incident_tasks/:id", wrapper.UpdateIncidentTask)
	router.GET(baseURL+"/v1/incident_types", wrapper.ListIncidentTypes)
	router.POST(baseURL+"/v1/incident_types", wrapper.CreateIncidentType)
	router.DELETE(baseURL+"/v1/incident_types/:id", wrapper.DeleteIncidentType)
	router.GET(baseURL+"/v1/incident_types/:id", wrapper.GetIncidentType)
	router.PUT(baseURL+"/v1/incident_types/:id", wrapper.UpdateIncidentType)
	router.GET(baseURL+"/v1/incidents", wrapper.ListIncidents)
	router.POST(baseURL+"/v1/incidents", wrapper.CreateIncident)
	router.DELETE(baseURL+"/v1/incidents/:id", wrapper.DeleteIncident)
	router.GET(baseURL+"/v1/incidents/:id", wrapper.GetIncident)
	router.PUT(baseURL+"/v1/incidents/:id", wrapper.UpdateIncident)
	router.PUT(baseURL+"/v1/incidents/:id/mitigate", wrapper.MitigateIncident)
	router.PUT(baseURL+"/v1/incidents/:id/resolve", wrapper.ResolveIncident)
	router.GET(baseURL+"/v1/incidents/:incident_id/action_items", wrapper.ListIncidentActionItems)
	router.POST(baseURL+"/v1/incidents/:incident_id/action_items", wrapper.CreateIncidentActionItem)
	router.GET(baseURL+"/v1/incidents/:incident_id/alerts", wrapper.ListAlert)
	router.POST(baseURL+"/v1/incidents/:incident_id/alerts", wrapper.AttachAlert)
	router.GET(baseURL+"/v1/incidents/:incident_id/events", wrapper.ListIncidentEvents)
	router.POST(baseURL+"/v1/incidents/:incident_id/events", wrapper.CreateIncidentEvent)
	router.GET(baseURL+"/v1/incidents/:incident_id/incident_tasks", wrapper.ListIncidentTasks)
	router.POST(baseURL+"/v1/incidents/:incident_id/incident_tasks", wrapper.CreateIncidentTask)
	router.DELETE(baseURL+"/v1/playbook_tasks/:id", wrapper.DeletePlaybookTask)
	router.GET(baseURL+"/v1/playbook_tasks/:id", wrapper.GetPlaybookTasks)
	router.PUT(baseURL+"/v1/playbook_tasks/:id", wrapper.UpdatePlaybookTask)
	router.GET(baseURL+"/v1/playbooks", wrapper.ListPlaybooks)
	router.POST(baseURL+"/v1/playbooks", wrapper.CreatePlaybook)
	router.DELETE(baseURL+"/v1/playbooks/:id", wrapper.DeletePlaybook)
	router.GET(baseURL+"/v1/playbooks/:id", wrapper.GetPlaybook)
	router.PUT(baseURL+"/v1/playbooks/:id", wrapper.UpdatePlaybook)
	router.GET(baseURL+"/v1/playbooks/:playbook_id/playbook_tasks", wrapper.ListPlaybookTasks)
	router.POST(baseURL+"/v1/playbooks/:playbook_id/playbook_tasks", wrapper.CreatePlaybookTask)
	router.GET(baseURL+"/v1/post_mortem_templates", wrapper.ListPostmortemTemplates)
	router.POST(baseURL+"/v1/post_mortem_templates", wrapper.CreatePostmortemTemplate)
	router.DELETE(baseURL+"/v1/post_mortem_templates/:id", wrapper.DeletePostmortemTemplate)
	router.GET(baseURL+"/v1/post_mortem_templates/:id", wrapper.GetPostmortemTemplate)
	router.PUT(baseURL+"/v1/post_mortem_templates/:id", wrapper.UpdatePostmortemTemplate)
	router.GET(baseURL+"/v1/post_mortems/:id", wrapper.GetIncidentPostmortem)
	router.PUT(baseURL+"/v1/post_mortems/:id", wrapper.UpdateIncidentPostmortem)
	router.GET(baseURL+"/v1/pulses", wrapper.ListPulses)
	router.POST(baseURL+"/v1/pulses", wrapper.CreatePulse)
	router.GET(baseURL+"/v1/pulses/:id", wrapper.GetPulse)
	router.PUT(baseURL+"/v1/pulses/:id", wrapper.UpdatePulse)
	router.GET(baseURL+"/v1/services", wrapper.ListServices)
	router.POST(baseURL+"/v1/services", wrapper.CreateService)
	router.DELETE(baseURL+"/v1/services/:id", wrapper.DeleteService)
	router.GET(baseURL+"/v1/services/:id", wrapper.GetService)
	router.PUT(baseURL+"/v1/services/:id", wrapper.UpdateService)
	router.GET(baseURL+"/v1/severities", wrapper.ListSeverities)
	router.POST(baseURL+"/v1/severities", wrapper.CreateSeverity)
	router.DELETE(baseURL+"/v1/severities/:id", wrapper.DeleteSeverity)
	router.GET(baseURL+"/v1/severities/:id", wrapper.GetSeverity)
	router.PUT(baseURL+"/v1/severities/:id", wrapper.UpdateSeverity)
	router.GET(baseURL+"/v1/status-pages", wrapper.ListStatusPages)
	router.POST(baseURL+"/v1/status-pages", wrapper.CreateStatusPage)
	router.DELETE(baseURL+"/v1/status-pages/:id", wrapper.DeleteStatusPage)
	router.GET(baseURL+"/v1/status-pages/:id", wrapper.GetStatusPage)
	router.PUT(baseURL+"/v1/status-pages/:id", wrapper.UpdateStatusPage)
	router.GET(baseURL+"/v1/teams", wrapper.ListTeams)
	router.POST(baseURL+"/v1/teams", wrapper.CreateTeam)
	router.DELETE(baseURL+"/v1/teams/:id", wrapper.DeleteTeam)
	router.GET(baseURL+"/v1/teams/:id", wrapper.GetTeam)
	router.PUT(baseURL+"/v1/teams/:id", wrapper.UpdateTeam)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"XgUA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

